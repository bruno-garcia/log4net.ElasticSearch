<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Nest</name>
    </assembly>
    <members>
        <member name="T:Nest.AliasExtensions">
            <summary>Implements several handy alias extensions.
            </summary>
        </member>
        <member name="M:Nest.AliasExtensions.GetAliasesPointingToIndex(Nest.IElasticClient,System.String)">
            <summary>
            Returns a list of aliases that point to the specified index, simplified version of GetAliases.
            </summary>
            <param name="client"></param>
            <param name="indexName">The exact indexname we want to know aliases of</param>
        </member>
        <member name="M:Nest.AliasExtensions.GetAliasesPointingToIndexAsync(Nest.IElasticClient,System.String)">
            <summary>
            Returns a list of aliases that point to the specified index, simplified version of GetAliases.
            </summary>
            <param name="client"></param>
            <param name="indexName">The exact indexname we want to know aliases of</param>
        </member>
        <member name="M:Nest.AliasExtensions.GetIndicesPointingToAlias(Nest.IElasticClient,System.String)">
            <summary>
            Returns a list of indices that have the specified aliasName applied to them. Simplified version of GetAliases.
            </summary>
            <param name="client"></param>
            <param name="aliasName">The exact alias name</param>
        </member>
        <member name="M:Nest.AliasExtensions.GetIndicesPointingToAliasAsync(Nest.IElasticClient,System.String)">
            <summary>
            Returns a list of indices that have the specified aliasName applied to them. Simplified version of GetAliases.
            </summary>
            <param name="client"></param>
            <param name="aliasName">The exact alias name</param>
        </member>
        <member name="T:Nest.CountExtensions">
            <summary>Implements a convenience extension method for count that defaults
            to counting over all indices and types.
            </summary>
        </member>
        <member name="M:Nest.CountExtensions.Count(Nest.IElasticClient,System.Func{Nest.CountDescriptor{System.Object},Nest.CountDescriptor{System.Object}})">
            <summary>
            The count API allows to easily execute a query and get the number of matches for that query. 
            It can be executed across one or more indices and across one or more types. 
            <para>This overload returns a dynamic response and defaults to all types and indices</para>
            <para> </para>>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-count.html
            </summary>
            <param name="client"></param>
            <param name="countSelector">An optional descriptor to describe the count operation</param>
        </member>
        <member name="M:Nest.CountExtensions.CountAsync(Nest.IElasticClient,System.Func{Nest.CountDescriptor{System.Object},Nest.CountDescriptor{System.Object}})">
            <summary>
            The count API allows to easily execute a query and get the number of matches for that query. 
            It can be executed across one or more indices and across one or more types. 
            <para>This overload returns a dynamic response and defaults to all types and indices</para>
            <para> </para>>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-count.html
            </summary>
            <param name="client"></param>
            <param name="countSelector">An optional descriptor to describe the count operation</param>
        </member>
        <member name="T:Nest.DeleteExtensions">
            <summary>
            Implements extensions to Delete that allow for easier by id deletes.
            </summary>
        </member>
        <member name="M:Nest.DeleteExtensions.Delete(Nest.IElasticClient,System.String,System.String,System.String,System.Func{Nest.DeleteDescriptor{System.Object},Nest.DeleteDescriptor{System.Object}})">
             <summary>
            The delete API allows to delete a typed JSON document from a specific index based on its id. 
             <para> </para>>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/docs-delete.html
             </summary>
             <param name="client"></param>
             <param name="index">The name of the index as string</param>
             <param name="type">The type name of the document you wish to delete</param>
             <param name="id">The id as string of the document you want to delete</param>
             <param name="selector">An optional descriptor to further describe the delete operation</param>
        </member>
        <member name="M:Nest.DeleteExtensions.Delete``1(Nest.IElasticClient,System.Int64,System.Func{Nest.DeleteDescriptor{``0},Nest.DeleteDescriptor{``0}})">
             <summary>
            The delete API allows to delete a typed JSON document from a specific index based on its id. 
             <para> </para>>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/docs-delete.html
             </summary>
             <typeparam name="T">The type used to infer the default index and typename</typeparam>
             <param name="client"></param>
             <param name="id">The id as int of the document you want to delete</param>
             <param name="selector">An optional descriptor to further describe the delete operation</param>
        </member>
        <member name="M:Nest.DeleteExtensions.Delete``1(Nest.IElasticClient,System.String,System.Func{Nest.DeleteDescriptor{``0},Nest.DeleteDescriptor{``0}})">
             <summary>
            The delete API allows to delete a typed JSON document from a specific index based on its id. 
             <para> </para>>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/docs-delete.html
             </summary>
             <typeparam name="T">The type used to infer the default index and typename</typeparam>
             <param name="client"></param>
             <param name="id">The id as string of the document you want to delete</param>
             <param name="selector">An optional descriptor to further describe the delete operation</param>
        </member>
        <member name="M:Nest.DeleteExtensions.DeleteAsync``1(Nest.IElasticClient,System.Int64,System.Func{Nest.DeleteDescriptor{``0},Nest.DeleteDescriptor{``0}})">
             <summary>
            The delete API allows to delete a typed JSON document from a specific index based on its id. 
             <para> </para>>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/docs-delete.html
             </summary>
             <typeparam name="T">The type used to infer the default index and typename</typeparam>
             <param name="client"></param>
             <param name="id">The id as int of the document you want to delete</param>
             <param name="selector">An optional descriptor to further describe the delete operation</param>
        </member>
        <member name="M:Nest.DeleteExtensions.DeleteAsync(Nest.IElasticClient,System.String,System.String,System.String,System.Func{Nest.DeleteDescriptor{System.Object},Nest.DeleteDescriptor{System.Object}})">
             <summary>
            The delete API allows to delete a typed JSON document from a specific index based on its id. 
             <para> </para>>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/docs-delete.html
             </summary>
             <param name="client"></param>
             <param name="index">The name of the index as string</param>
             <param name="type">The type name of the document you wish to delete</param>
             <param name="id">The id as string of the document you want to delete</param>
             <param name="selector">An optional descriptor to further describe the delete operation</param>
        </member>
        <member name="M:Nest.DeleteExtensions.DeleteAsync``1(Nest.IElasticClient,System.String,System.Func{Nest.DeleteDescriptor{``0},Nest.DeleteDescriptor{``0}})">
             <summary>
            The delete API allows to delete a typed JSON document from a specific index based on its id. 
             <para> </para>>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/docs-delete.html
             </summary>
             <typeparam name="T">The type used to infer the default index and typename</typeparam>
             <param name="client"></param>
             <param name="id">The id as string of the document you want to delete</param>
             <param name="selector">An optional descriptor to further describe the delete operation</param>
        </member>
        <member name="M:Nest.DeleteExtensions.Delete``1(Nest.IElasticClient,``0,System.Func{Nest.DeleteDescriptor{``0},Nest.DeleteDescriptor{``0}})">
             <summary>
            The delete API allows to delete a typed JSON document from a specific index based on its id. 
             <para> </para>>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/docs-delete.html
             </summary>
             <typeparam name="T">The type used to infer the default index and typename</typeparam>
             <param name="client"></param>
             <param name="obj">The object used to infer the id</param>
             <param name="selector">An optional descriptor to further describe the delete operation</param>
        </member>
        <member name="M:Nest.DeleteExtensions.DeleteAsync``1(Nest.IElasticClient,``0,System.Func{Nest.DeleteDescriptor{``0},Nest.DeleteDescriptor{``0}})">
             <summary>
            The delete API allows to delete a typed JSON document from a specific index based on its id. 
             <para> </para>>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/docs-delete.html
             </summary>
             <typeparam name="T">The type used to infer the default index and typename</typeparam>
             <param name="client"></param>
             <param name="obj">The object used to infer the id</param>
             <param name="selector">An optional descriptor to further describe the delete operation</param>
        </member>
        <member name="T:Nest.IndexManyExtensions">
            <summary>
            Provides GetMany extensions that make it easier to get many documents given a list of ids
            </summary>
        </member>
        <member name="M:Nest.IndexManyExtensions.IndexMany``1(Nest.IElasticClient,System.Collections.Generic.IEnumerable{``0},System.String,System.String)">
            <summary>
            Shortcut into the Bulk call that indexes the specified objects
            <para> </para>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/docs-bulk.html
            </summary>
            <param name="client"></param>
            <typeparam name="T">The type used to infer the default index and typename</typeparam>
            <param name="objects">List of objects to index, Id will be inferred (Id property or IdProperty attribute on type)</param>
            <param name="index">Override the inferred indexname for T</param>
            <param name="type">Override the inferred typename for T</param>
        </member>
        <member name="M:Nest.IndexManyExtensions.IndexManyAsync``1(Nest.IElasticClient,System.Collections.Generic.IEnumerable{``0},System.String,System.String)">
            <summary>
            Shortcut into the Bulk call that indexes the specified objects
            <para> </para>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/docs-bulk.html
            </summary>
            <param name="client"></param>
            <typeparam name="T">The type used to infer the default index and typename</typeparam>
            <param name="objects">List of objects to index, Id will be inferred (Id property or IdProperty attribute on type)</param>
            <param name="index">Override the inferred indexname for T</param>
            <param name="type">Override the inferred typename for T</param>
        </member>
        <member name="T:Nest.GetExtensions">
            <summary>
            Implements Get() extensions that make it easier to get a document given an id
            </summary>
        </member>
        <member name="M:Nest.GetExtensions.Get``1(Nest.IElasticClient,System.String,System.String,System.String)">
            <summary>
            The get API allows to get a typed JSON document from the index based on its id.
            <para> </para>>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/docs-get.html
            </summary>
            <typeparam name="T">The type used to infer the default index and typename</typeparam>
            <param name="client"></param>
            <param name="id">The string id of the document we want the fetch</param>
            <param name="index">Optionally override the inferred index name for T</param>
            <param name="type">Optionally override the inferred typename for T</param>
        </member>
        <member name="M:Nest.GetExtensions.Get``1(Nest.IElasticClient,System.Int64,System.String,System.String)">
            <summary>
            The get API allows to get a typed JSON document from the index based on its id.
            <para> </para>>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/docs-get.html
            </summary>
            <typeparam name="T">The type used to infer the default index and typename</typeparam>
            <param name="client"></param>
            <param name="id">The long id of the document we want the fetch</param>
            <param name="index">Optionally override the inferred index name for T</param>
            <param name="type">Optionally override the inferred typename for T</param>
        </member>
        <member name="M:Nest.GetExtensions.GetAsync``1(Nest.IElasticClient,System.String,System.String,System.String)">
            <summary>
            The get API allows to get a typed JSON document from the index based on its id.
            <para> </para>>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/docs-get.html
            </summary>
            <typeparam name="T">The type used to infer the default index and typename</typeparam>
            <param name="client"></param>
            <param name="id">The string id of the document we want the fetch</param>
            <param name="index">Optionally override the inferred index name for T</param>
            <param name="type">Optionally override the inferred typename for T</param>
        </member>
        <member name="M:Nest.GetExtensions.GetAsync``1(Nest.IElasticClient,System.Int64,System.String,System.String)">
            <summary>
            The get API allows to get a typed JSON document from the index based on its id.
            <para> </para>>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/docs-get.html
            </summary>
            <typeparam name="T">The type used to infer the default index and typename</typeparam>
            <param name="client"></param>
            <param name="id">The long id of the document we want the fetch</param>
            <param name="index">Optionally override the inferred index name for T</param>
            <param name="type">Optionally override the inferred typename for T</param>
        </member>
        <member name="T:Nest.DeleteManyExtensions">
            <summary>
            Provides GetMany extensions that make it easier to get many documents given a list of ids
            </summary>
        </member>
        <member name="M:Nest.DeleteManyExtensions.DeleteMany``1(Nest.IElasticClient,System.Collections.Generic.IEnumerable{``0},System.String,System.String)">
            <summary>
            Shortcut into the Bulk call that deletes the specified objects
            <para> </para>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/docs-bulk.html
            </summary>
            <param name="client"></param>
            <typeparam name="T">The type used to infer the default index and typename</typeparam>
            <param name="objects">List of objects to delete</param>
            <param name="index">Override the inferred indexname for T</param>
            <param name="type">Override the inferred typename for T</param>
        </member>
        <member name="M:Nest.DeleteManyExtensions.DeleteManyAsync``1(Nest.IElasticClient,System.Collections.Generic.IEnumerable{``0},System.String,System.String)">
            <summary>
            Shortcut into the Bulk call that deletes the specified objects
            <para> </para>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/docs-bulk.html
            </summary>
            <param name="client"></param>
            <typeparam name="T">The type used to infer the default index and typename</typeparam>
            <param name="objects">List of objects to delete</param>
            <param name="index">Override the inferred indexname for T</param>
            <param name="type">Override the inferred typename for T</param>
        </member>
        <member name="T:Nest.GetManyExtensions">
            <summary>
            Provides GetMany extensions that make it easier to get many documents given a list of ids
            </summary>
        </member>
        <member name="M:Nest.GetManyExtensions.GetMany``1(Nest.IElasticClient,System.Collections.Generic.IEnumerable{System.String},System.String,System.String)">
            <summary>
            Multi GET API allows to get multiple documents based on an index, type (optional) and id (and possibly routing). 
            The response includes a docs array with all the fetched documents, each element similar in structure to a document 
            provided by the get API.
            <para> </para>>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/docs-multi-get.html
            </summary>
            <typeparam name="T">The type used to infer the default index and typename</typeparam>
            <param name="client"></param>
            <param name="ids">IEnumerable of ids as string for the documents to fetch</param>
            <param name="index">Optionally override the default inferred index name for T</param>
            <param name="type">Optionally overiide the default inferred typename for T</param>
        </member>
        <member name="M:Nest.GetManyExtensions.GetMany``1(Nest.IElasticClient,System.Collections.Generic.IEnumerable{System.Int64},System.String,System.String)">
            <summary>
            Multi GET API allows to get multiple documents based on an index, type (optional) and id (and possibly routing). 
            The response includes a docs array with all the fetched documents, each element similar in structure to a document 
            provided by the get API.
            <para> </para>>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/docs-multi-get.html
            </summary>
            <typeparam name="T">The type used to infer the default index and typename</typeparam>
            <param name="client"></param>
            <param name="ids">IEnumerable of ids as ints for the documents to fetch</param>
            <param name="index">Optionally override the default inferred index name for T</param>
            <param name="type">Optionally overiide the default inferred typename for T</param>
        </member>
        <member name="M:Nest.GetManyExtensions.GetManyAsync``1(Nest.IElasticClient,System.Collections.Generic.IEnumerable{System.String},System.String,System.String)">
            <summary>
            Multi GET API allows to get multiple documents based on an index, type (optional) and id (and possibly routing). 
            The response includes a docs array with all the fetched documents, each element similar in structure to a document 
            provided by the get API.
            <para> </para>>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/docs-multi-get.html
            </summary>
            <typeparam name="T">The type used to infer the default index and typename</typeparam>
            <param name="client"></param>
            <param name="ids">IEnumerable of ids as string for the documents to fetch</param>
            <param name="index">Optionally override the default inferred index name for T</param>
            <param name="type">Optionally overiide the default inferred typename for T</param>
        </member>
        <member name="M:Nest.GetManyExtensions.GetManyAsync``1(Nest.IElasticClient,System.Collections.Generic.IEnumerable{System.Int64},System.String,System.String)">
            <summary>
            Multi GET API allows to get multiple documents based on an index, type (optional) and id (and possibly routing). 
            The response includes a docs array with all the fetched documents, each element similar in structure to a document 
            provided by the get API.
            <para> </para>>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/docs-multi-get.html
            </summary>
            <typeparam name="T">The type used to infer the default index and typename</typeparam>
            <param name="client"></param>
            <param name="ids">IEnumerable of ids as ints for the documents to fetch</param>
            <param name="index">Optionally override the default inferred index name for T</param>
            <param name="type">Optionally overiide the default inferred typename for T</param>
        </member>
        <member name="T:Nest.CreateIndexExtensions">
            <summary>
            Provides convenience extension to open an index by string or type.
            </summary>
        </member>
        <member name="M:Nest.CreateIndexExtensions.CreateIndex(Nest.IElasticClient,System.String,System.Func{Nest.CreateIndexDescriptor,Nest.CreateIndexDescriptor})">
            <summary>
            The create index API allows to instantiate an index. Elasticsearch provides support for multiple indices, 
            including executing operations across several indices.
            <para> </para>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/indices-create-index.html
            </summary>
            <param name="client"></param>
            <param name="index">The name of the index to be created</param>
            <param name="createIndexSelector">A descriptor that further describes the parameters for the create index operation</param>
        </member>
        <member name="M:Nest.CreateIndexExtensions.CreatIndex(Nest.IElasticClient,System.String,System.Func{Nest.CreateIndexDescriptor,Nest.CreateIndexDescriptor})">
            <summary>
            The create index API allows to instantiate an index. Elasticsearch provides support for multiple indices, 
            including executing operations across several indices.
            <para> </para>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/indices-create-index.html
            </summary>
            <param name="client"></param>
            <param name="index">The name of the index to be created</param>
            <param name="createIndexSelector">A descriptor that further describes the parameters for the create index operation</param>
        </member>
        <member name="T:Nest.OpenCloseIndexExtensions">
            <summary>
            Provides convenience extension to open an index by string or type.
            </summary>
        </member>
        <member name="M:Nest.OpenCloseIndexExtensions.OpenIndex(Nest.IElasticClient,System.String)">
            <summary>
            The open and close index APIs allow to close an index, and later on opening it. 
            A closed index has almost no overhead on the cluster (except for maintaining its metadata), and is blocked 
            for read/write operations. 
            A closed index can be opened which will then go through the normal recovery process.
            <para> </para>>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/indices-open-close.html
            </summary>
            <param name="client"></param>
            <param name="index">The name of the index to be opened</param>
        </member>
        <member name="M:Nest.OpenCloseIndexExtensions.OpenIndex``1(Nest.IElasticClient)">
            <summary>
            The open and close index APIs allow to close an index, and later on opening it. 
            A closed index has almost no overhead on the cluster (except for maintaining its metadata), and is blocked 
            for read/write operations. 
            A closed index can be opened which will then go through the normal recovery process.
            <para> </para>>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/indices-open-close.html
            </summary>
            <typeparam name="T"> The type used to infer the index name to be opened</typeparam>
            <param name="client"></param>
        </member>
        <member name="M:Nest.OpenCloseIndexExtensions.CloseIndex(Nest.IElasticClient,System.String)">
            <summary>
            The open and close index APIs allow to close an index, and later on opening it. 
            A closed index has almost no overhead on the cluster (except for maintaining its metadata), and is blocked 
            for read/write operations. 
            A closed index can be opened which will then go through the normal recovery process.
            <para> </para>>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/indices-open-close.html
            </summary>
            <param name="client"></param>
            <param name="index">The name of the index to be closed</param>
        </member>
        <member name="M:Nest.OpenCloseIndexExtensions.CloseIndex``1(Nest.IElasticClient)">
            <summary>
            The open and close index APIs allow to close an index, and later on opening it. 
            A closed index has almost no overhead on the cluster (except for maintaining its metadata), and is blocked 
            for read/write operations. 
            A closed index can be opened which will then go through the normal recovery process.
            <para> </para>>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/indices-open-close.html
            </summary>
            <typeparam name="T">The type used to infer the index name to be closed</typeparam>
            <param name="client"></param>
        </member>
        <member name="T:Nest.ScrollExtensions">
            <summary>
            Provides extension methods to provide a cleaner scoll API given a scollTime and scrollId
            </summary>
        </member>
        <member name="M:Nest.ScrollExtensions.Scroll``1(Nest.IElasticClient,System.String,System.String)">
            <summary>
            A search request can be scrolled by specifying the scroll parameter. 
            <para>The scroll parameter is a time value parameter (for example: scroll=5m), 
            indicating for how long the nodes that participate in the search will maintain relevant resources in
            order to continue and support it.</para><para> 
            This is very similar in its idea to opening a cursor against a database.</para>
            </summary>
            <typeparam name="T">The type that represents the result hits</typeparam>
            <param name="client"></param>
            <param name="scrollTime">The time the server should wait for the scroll before closing the scan operation</param>
            <param name="scrollId">The scroll id to continue the scroll operation</param>
        </member>
        <member name="M:Nest.ScrollExtensions.ScrollAsync``1(Nest.IElasticClient,System.String,System.String)">
            <summary>
            A search request can be scrolled by specifying the scroll parameter. 
            <para>The scroll parameter is a time value parameter (for example: scroll=5m), 
            indicating for how long the nodes that participate in the search will maintain relevant resources in
            order to continue and support it.</para><para> 
            This is very similar in its idea to opening a cursor against a database.</para>
            </summary>
            <typeparam name="T">The type that represents the result hits</typeparam>
            <param name="client"></param>
            <param name="scrollTime">The time the server should wait for the scroll before closing the scan operation</param>
            <param name="scrollId">The scroll id to continue the scroll operation</param>
        </member>
        <member name="M:Nest.ScrollExtensions.ClearScroll(Nest.IElasticClient,System.String)">
            <summary>
            Deletes a registered scroll request on the cluster 
            <para> </para>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-request-scroll.html
            </summary>
            <param name="client"></param>
            <param name="scrollId">The scrollId to clear</param>
        </member>
        <member name="M:Nest.ScrollExtensions.ClearScrollAsync(Nest.IElasticClient,System.String)">
            <summary>
            Deletes a registered scroll request on the cluster 
            <para> </para>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-request-scroll.html
            </summary>
            <param name="client"></param>
            <param name="scrollId">The scrollId to clear</param>
        </member>
        <member name="M:Nest.SerializationExtensions.SerializerExtensions.Deserialize``1(Nest.IElasticClient,System.String)">
            <summary>
            This is a convenience method to deserialize to T using the registered deserializer. 
            <para>NOTE:</para> If you want to deserialize to a NEST response you need to use the overload that 
            takes an ElasticsearchResponse
            </summary>
            <typeparam name="T">The type to deserialize to</typeparam>
            <param name="client">the interface we are extending</param>
            <param name="data">The string representation of the data to be deserialized</param>
        </member>
        <member name="T:Nest.SourceExtensions">
            <summary>
            Provides convenience extension methods that make it easier to get the _source for 
            a given document given a string or long id.
            </summary>
        </member>
        <member name="M:Nest.SourceExtensions.Source``1(Nest.IElasticClient,System.String,System.String,System.String)">
            <summary>
            Use the /{index}/{type}/{id}/_source endpoint to get just the _source field of the document, 
            without any additional content around it. 
            <para> </para>>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/docs-get.html#_source
            </summary>
            <typeparam name="T">The type used to infer the default index and typename</typeparam>
            <param name="client"></param>
            <param name="id">id as string of the document we want the _source from</param>
            <param name="index">Optionally override the inferred index name for T</param>
            <param name="type">Optionally override the inferred type name for T</param>
        </member>
        <member name="M:Nest.SourceExtensions.Source``1(Nest.IElasticClient,System.Int64,System.String,System.String)">
            <summary>
            Use the /{index}/{type}/{id}/_source endpoint to get just the _source field of the document, 
            without any additional content around it. 
            <para> </para>>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/docs-get.html#_source
            </summary>
            <typeparam name="T">The type used to infer the default index and typename</typeparam>
            <param name="client"></param>
            <param name="id">id as int of the document we want the _source from</param>
            <param name="index">Optionally override the inferred index name for T</param>
            <param name="type">Optionally override the inferred type name for T</param>
        </member>
        <member name="M:Nest.SourceExtensions.SourceAsync``1(Nest.IElasticClient,System.String,System.String,System.String)">
            <summary>
            Use the /{index}/{type}/{id}/_source endpoint to get just the _source field of the document, 
            without any additional content around it. 
            <para> </para>>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/docs-get.html#_source
            </summary>
            <typeparam name="T">The type used to infer the default index and typename</typeparam>
            <param name="client"></param>
            <param name="id">id as string of the document we want the _source from</param>
            <param name="index">Optionally override the inferred index name for T</param>
            <param name="type">Optionally override the inferred type name for T</param>
        </member>
        <member name="M:Nest.SourceExtensions.SourceAsync``1(Nest.IElasticClient,System.Int64,System.String,System.String)">
            <summary>
            Use the /{index}/{type}/{id}/_source endpoint to get just the _source field of the document, 
            without any additional content around it. 
            <para> </para>>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/docs-get.html#_source
            </summary>
            <typeparam name="T">The type used to infer the default index and typename</typeparam>
            <param name="client"></param>
            <param name="id">id as int of the document we want the _source from</param>
            <param name="index">Optionally override the inferred index name for T</param>
            <param name="type">Optionally override the inferred type name for T</param>
        </member>
        <member name="T:Nest.SourceManyExtensions">
            <summary>
            Provides convenience extension methods to get many _source's given a list of ids.
            </summary>
        </member>
        <member name="M:Nest.SourceManyExtensions.SourceMany``1(Nest.IElasticClient,System.Collections.Generic.IEnumerable{System.String},System.String,System.String)">
            <summary>
            SourceMany allows you to get a list of T documents out of elasticsearch, internally it calls into MultiGet()
            <para>
            Multi GET API allows to get multiple documents based on an index, type (optional) and id (and possibly routing). 
            The response includes a docs array with all the fetched documents, each element similar in structure to a document 
            provided by the get API.
            </para>
            <para> </para>>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/docs-multi-get.html
            </summary>
            <typeparam name="T">The type used to infer the default index and typename</typeparam>
            <param name="client"></param>
            <param name="ids">A list of ids as string</param>
            <param name="index">Optionally override the default inferred indexname for T</param>
            <param name="type">Optionally override the default inferred indexname for T</param>
        </member>
        <member name="M:Nest.SourceManyExtensions.SourceMany``1(Nest.IElasticClient,System.Collections.Generic.IEnumerable{System.Int64},System.String,System.String)">
            <summary>
            SourceMany allows you to get a list of T documents out of elasticsearch, internally it calls into MultiGet()
            <para>
            Multi GET API allows to get multiple documents based on an index, type (optional) and id (and possibly routing). 
            The response includes a docs array with all the fetched documents, each element similar in structure to a document 
            provided by the get API.
            </para>
            <para> </para>>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/docs-multi-get.html
            </summary>
            <typeparam name="T">The type used to infer the default index and typename</typeparam>
            <param name="client"></param>
            <param name="ids">A list of ids as int</param>
            <param name="index">Optionally override the default inferred indexname for T</param>
            <param name="type">Optionally override the default inferred indexname for T</param>
        </member>
        <member name="M:Nest.SourceManyExtensions.SourceManyAsync``1(Nest.IElasticClient,System.Collections.Generic.IEnumerable{System.String},System.String,System.String)">
            <summary>
            SourceMany allows you to get a list of T documents out of elasticsearch, internally it calls into MultiGet()
            <para>
            Multi GET API allows to get multiple documents based on an index, type (optional) and id (and possibly routing). 
            The response includes a docs array with all the fetched documents, each element similar in structure to a document 
            provided by the get API.
            </para>
            <para> </para>>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/docs-multi-get.html
            </summary>
            <typeparam name="T">The type used to infer the default index and typename</typeparam>
            <param name="client"></param>
            <param name="ids">A list of ids as string</param>
            <param name="index">Optionally override the default inferred indexname for T</param>
            <param name="type">Optionally override the default inferred indexname for T</param>
        </member>
        <member name="M:Nest.SourceManyExtensions.SourceManyAsync``1(Nest.IElasticClient,System.Collections.Generic.IEnumerable{System.Int64},System.String,System.String)">
            <summary>
            SourceMany allows you to get a list of T documents out of elasticsearch, internally it calls into MultiGet()
            <para>
            Multi GET API allows to get multiple documents based on an index, type (optional) and id (and possibly routing). 
            The response includes a docs array with all the fetched documents, each element similar in structure to a document 
            provided by the get API.
            </para>
            <para> </para>>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/docs-multi-get.html
            </summary>
            <typeparam name="T">The type used to infer the default index and typename</typeparam>
            <param name="client"></param>
            <param name="ids">A list of ids as int</param>
            <param name="index">Optionally override the default inferred indexname for T</param>
            <param name="type">Optionally override the default inferred indexname for T</param>
        </member>
        <member name="P:Nest.HistogramItem.Date">
            <summary>
            Get a DateTime form of the returned key, only make sense on date_histogram aggregations.
            </summary>
        </member>
        <member name="T:Nest.IAliasAction">
            <summary>
            Marker interface for alias operation
            </summary>
        </member>
        <member name="T:Nest.AliasAddOperation">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nest.PatternReplaceCharFilter">
            <summary>
            The pattern_replace char filter allows the use of a regex to manipulate the characters in a string before analysis. 
            </summary>
        </member>
        <member name="T:Nest.DelimitedPayloadTokenFilter">
            <summary>
            Splits tokens into tokens and payload whenever a delimiter character is found.
            </summary>
        </member>
        <member name="P:Nest.DelimitedPayloadTokenFilter.Delimiter">
            <summary>
            Character used for splitting the tokens.
            </summary>
        </member>
        <member name="P:Nest.DelimitedPayloadTokenFilter.Encoding">
            <summary>
            The type of the payload. int for integer, float for float and identity for characters. 
            </summary>
        </member>
        <member name="T:Nest.CommonGramsTokenFilter">
             <summary>
             Token filter that generates bigrams for frequently occuring terms. Single terms are still indexed.
            <para>Note, common_words or common_words_path field is required.</para>
             </summary>
        </member>
        <member name="P:Nest.CommonGramsTokenFilter.CommonWords">
            <summary>
            A list of common words to use.
            </summary>
        </member>
        <member name="P:Nest.CommonGramsTokenFilter.CommonWordsPath">
            <summary>
            A path (either relative to config location, or absolute) to a list of common words.
            </summary>
        </member>
        <member name="P:Nest.CommonGramsTokenFilter.IgnoreCase">
            <summary>
            If true, common words matching will be case insensitive.
            </summary>
        </member>
        <member name="P:Nest.CommonGramsTokenFilter.QueryMode">
            <summary>
            Generates bigrams then removes common words and single terms followed by a common word.
            </summary>
        </member>
        <member name="T:Nest.KeywordRepeatTokenFilter">
            <summary>
            The keyword_repeat token filter Emits each incoming token twice once as keyword and once as a non-keyword to allow an unstemmed version of a term to be indexed side by side with the stemmed version of the term.
            </summary>
        </member>
        <member name="T:Nest.HunspellTokenFilter">
             <summary>
             Basic support for hunspell stemming. 
            <para> Hunspell dictionaries will be picked up from a dedicated hunspell directory on the filesystem.</para>
             </summary>
        </member>
        <member name="P:Nest.HunspellTokenFilter.IgnoreCase">
            <summary>
            If true, dictionary matching will be case insensitive.
            </summary>
        </member>
        <member name="P:Nest.HunspellTokenFilter.Locale">
            <summary>
            A locale for this filter. If this is unset, the lang or language are used instead - so one of these has to be set.
            </summary>
        </member>
        <member name="P:Nest.HunspellTokenFilter.Dictionary">
            <summary>
            The name of a dictionary.
            </summary>
        </member>
        <member name="P:Nest.HunspellTokenFilter.Dedup">
            <summary>
            If only unique terms should be returned, this needs to be set to true.
            </summary>
        </member>
        <member name="P:Nest.HunspellTokenFilter.LongestOnly">
            <summary>
            If only the longest term should be returned, set this to true.
            </summary>
        </member>
        <member name="T:Nest.LimitTokenCountTokenFilter">
            <summary>
            Limits the number of tokens that are indexed per document and field.
            </summary>
        </member>
        <member name="P:Nest.LimitTokenCountTokenFilter.MaxTokenCount">
            <summary>
            The maximum number of tokens that should be indexed per document and field.
            </summary>
        </member>
        <member name="P:Nest.LimitTokenCountTokenFilter.ConsumeAllTokens">
            <summary>
            If set to true the filter exhaust the stream even if max_token_count tokens have been consumed already.
            </summary>
        </member>
        <member name="T:Nest.PatternCaptureTokenFilter">
            <summary>
            The pattern_capture token filter, unlike the pattern tokenizer, emits a token for every capture group in the regular expression.
            </summary>
        </member>
        <member name="P:Nest.PatternCaptureTokenFilter.PreserveOriginal">
            <summary>
            If preserve_original is set to true then it would also emit the original token
            </summary>
        </member>
        <member name="T:Nest.KeepWordsTokenFilter">
            <summary>
            A token filter of type keep that only keeps tokens with text contained in a predefined set of words.
            </summary>
        </member>
        <member name="P:Nest.KeepWordsTokenFilter.KeepWords">
            <summary>
            A list of words to keep.
            </summary>
        </member>
        <member name="P:Nest.KeepWordsTokenFilter.KeepWordsPath">
            <summary>
            A path to a words file.
            </summary>
        </member>
        <member name="P:Nest.KeepWordsTokenFilter.KeepWordsCase">
            <summary>
            A boolean indicating whether to lower case the words.
            </summary>
        </member>
        <member name="T:Nest.StemmerOverrideTokenFilter">
            <summary>
            Overrides stemming algorithms, by applying a custom mapping, then protecting these terms from being modified by stemmers. Must be placed before any stemming filters.
            </summary>
        </member>
        <member name="P:Nest.StemmerOverrideTokenFilter.Rules">
            <summary>
            A list of mapping rules to use.
            </summary>
        </member>
        <member name="P:Nest.StemmerOverrideTokenFilter.RulesPath">
            <summary>
            A path (either relative to config location, or absolute) to a list of mappings.
            </summary>
        </member>
        <member name="T:Nest.UppercaseTokenFilter">
            <summary>
            A token filter of type uppercase that normalizes token text to upper case.
            </summary>
        </member>
        <member name="T:Nest.IRequest">
            <summary>
            </summary>
        </member>
        <member name="P:Nest.IRequest`1.RequestParameters">
            <summary>
            Used to describe request parameters not part of the body. e.q query string or 
            connection configuration overrides
            </summary>
        </member>
        <member name="P:Nest.IRequest`1.RequestConfiguration">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nest.GetAliasRequest">
            <summary>Request parameters for IndicesGetAliasForAll
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.GetAliasRequest.IgnoreUnavailable">
            <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
        </member>
        <member name="P:Nest.GetAliasRequest.AllowNoIndices">
            <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
        </member>
        <member name="P:Nest.GetAliasRequest.ExpandWildcards">
            <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        </member>
        <member name="P:Nest.GetAliasRequest.Local">
            <summary>Return local information, do not retrieve the state from master node (default: false)</summary>
        </member>
        <member name="T:Nest.GetAliasDescriptor">
            <summary>descriptor for IndicesGetAliasForAll
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html
            </pre>
            </summary>
        </member>
        <member name="T:Nest.IndicesOptionalPathDescriptor`2">
            <summary>
            Provides a base for descriptors that need to describe a path in the form of 
            <pre>
            /{indices}
            </pre>
            {indices} is optional 
            </summary>
        </member>
        <member name="M:Nest.BasePathDescriptor`2.RequestConfiguration(System.Func{Elasticsearch.Net.Connection.Configuration.RequestConfigurationDescriptor,Elasticsearch.Net.Connection.Configuration.IRequestConfiguration})">
            <summary>
            Specify settings for this request alone, handy if you need a custom timeout or want to bypass sniffing, retries
            </summary>
        </member>
        <member name="M:Nest.GetAliasDescriptor.IgnoreUnavailable(System.Boolean)">
            <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
        </member>
        <member name="M:Nest.GetAliasDescriptor.AllowNoIndices(System.Boolean)">
            <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
        </member>
        <member name="M:Nest.GetAliasDescriptor.ExpandWildcards(Elasticsearch.Net.ExpandWildcards)">
            <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        </member>
        <member name="M:Nest.GetAliasDescriptor.Local(System.Boolean)">
            <summary>Return local information, do not retrieve the state from master node (default: false)</summary>
        </member>
        <member name="T:Nest.ConnectionSettings">
            <summary>
            Provides NEST's ElasticClient with configurationsettings
            </summary>
        </member>
        <member name="T:Nest.ConnectionSettings`1">
            <summary>
            Control how NEST's behaviour.
            </summary>
        </member>
        <member name="M:Nest.ConnectionSettings`1.PluralizeTypeNames">
            <summary>
            This calls SetDefaultTypenameInferrer with an implementation that will pluralize type names. This used to be the default prior to Nest 0.90
            </summary>
        </member>
        <member name="M:Nest.ConnectionSettings`1.SetJsonSerializerSettingsModifier(System.Action{Newtonsoft.Json.JsonSerializerSettings})">
            <summary>
            Allows you to update internal the json.net serializer settings to your liking
            </summary>
        </member>
        <member name="M:Nest.ConnectionSettings`1.AddContractJsonConverters(System.Func{System.Type,Newtonsoft.Json.JsonConverter}[])">
            <summary>
            Add a custom JsonConverter to the build in json serialization by passing in a predicate for a type.
            This is faster then adding them using AddJsonConverters() because this way they will be part of the cached 
            Json.net contract for a type.
            </summary>
        </member>
        <member name="M:Nest.ConnectionSettings`1.SetDefaultIndex(System.String)">
            <summary>
            Index to default to when no index is specified.
            </summary>
            <param name="defaultIndex">When null/empty/not set might throw NRE later on
            when not specifying index explicitly while indexing.
            </param>
        </member>
        <member name="M:Nest.ConnectionSettings`1.SetDefaultPropertyNameInferrer(System.Func{System.String,System.String})">
            <summary>
            By default NEST camelCases property names (EmailAddress => emailAddress) that do not have an explicit propertyname 
            either via an ElasticProperty attribute or because they are part of Dictionary where the keys should be treated verbatim.
            <pre>
            Here you can register a function that transforms propertynames (default casing, pre- or suffixing)
            </pre>
            </summary>
        </member>
        <member name="M:Nest.ConnectionSettings`1.SetDefaultTypeNameInferrer(System.Func{System.Type,System.String})">
            <summary>
            Allows you to override how type names should be reprented, the default will call .ToLowerInvariant() on the type's name.
            </summary>
        </member>
        <member name="M:Nest.ConnectionSettings`1.MapDefaultTypeIndices(System.Action{Nest.FluentDictionary{System.Type,System.String}})">
            <summary>
            Map types to a index names. Takes precedence over SetDefaultIndex().
            </summary>
        </member>
        <member name="M:Nest.ConnectionSettings`1.MapDefaultTypeNames(System.Action{Nest.FluentDictionary{System.Type,System.String}})">
            <summary>
            Allows you to override typenames, takes priority over the global SetDefaultTypeNameInferrer()
            </summary>
        </member>
        <member name="M:Nest.ConnectionSettings.#ctor(System.Uri,System.String)">
            <summary>
            Instantiate a new connectionsettings object that proves ElasticClient with configuration values
            </summary>
            <param name="uri">A single uri representing the root of the node you want to connect to
            <para>defaults to http://localhost:9200</para>
            </param>
            <param name="defaultIndex">The default index/alias name used for operations that expect an index/alias name, 
            By specifying it once alot of magic string can be avoided.
            <para>You can also specify specific default index/alias names for types using .SetDefaultTypeIndices(</para>
            <para>If you do not specify this, NEST might throw a runtime exception if an explicit indexname was not provided for a call</para>
            </param>
        </member>
        <member name="M:Nest.ConnectionSettings.#ctor(Elasticsearch.Net.ConnectionPool.IConnectionPool,System.String)">
            <summary>
            Instantiate a new connectionsettings object that proves ElasticClient with configuration values
            </summary>
            <param name="connectionPool">A connection pool implementation that'll tell the client what nodes are available</param>
            <param name="defaultIndex">The default index/alias name used for operations that expect an index/alias name, 
            By specifying it once alot of magic string can be avoided.
            <para>You can also specify specific default index/alias names for types using .SetDefaultTypeIndices(</para>
            <para>If you do not specify this, NEST might throw a runtime exception if an explicit indexname was not provided for a call</para>
            </param>
        </member>
        <member name="T:Nest.DescriptorForAttribute">
            <summary>
            DescriptorFor is a marker to rename unintuitive generated elasticsearch operation names
            </summary>
        </member>
        <member name="M:Nest.Resolvers.Property.Path``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Nullable{System.Double})">
            <summary>
            Create a strongly typed string representation of the path to a property
            <para>i.e p => p.Arrary.First().SubProperty.Field will return 'array.subProperty.field'</para>
            </summary>
            <typeparam name="T">The type of the object</typeparam>
            <param name="path">The path we want to specify</param>
            <param name="boost">An optional ^boost postfix, only make sense with queries</param>
        </member>
        <member name="M:Nest.Resolvers.Property.Name``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Nullable{System.Double})">
            <summary>
            Create a strongly typed string representation of the name to a property
            <para>i.e p => p.Arrary.First().SubProperty.Field will return 'field'</para>
            </summary>
            <typeparam name="T">The type of the object</typeparam>
            <param name="path">The path we want to specify</param>
            <param name="boost">An optional ^boost postfix, only make sense with queries</param>
        </member>
        <member name="T:Nest.PropertyNameMarker">
            <summary>
            Represents a typed container for property names i.e "property" in "field.nested.property";
            </summary>
        </member>
        <member name="T:Nest.PropertyPathMarker">
            <summary>
            Represents a typed container for object paths "field.nested.property";
            </summary>
        </member>
        <member name="T:Nest.ClusterGetSettingsRequest">
            <summary>Request parameters for ClusterGetSettings
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-update-settings.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.ClusterGetSettingsRequest.FlatSettings">
            <summary>Return settings in flat format (default: false)</summary>
        </member>
        <member name="P:Nest.ClusterGetSettingsRequest.MasterTimeout">
            <summary>Explicit operation timeout for connection to master node</summary>
        </member>
        <member name="P:Nest.ClusterGetSettingsRequest.Timeout">
            <summary>Explicit operation timeout</summary>
        </member>
        <member name="T:Nest.ClusterGetSettingsDescriptor">
            <summary>descriptor for ClusterGetSettings
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-update-settings.html
            </pre>
            </summary>
        </member>
        <member name="M:Nest.ClusterGetSettingsDescriptor.FlatSettings(System.Boolean)">
            <summary>Return settings in flat format (default: false)</summary>
        </member>
        <member name="M:Nest.ClusterGetSettingsDescriptor.MasterTimeout(System.String)">
            <summary>Explicit operation timeout for connection to master node</summary>
        </member>
        <member name="M:Nest.ClusterGetSettingsDescriptor.Timeout(System.String)">
            <summary>Explicit operation timeout</summary>
        </member>
        <member name="T:Nest.ClusterSettingsRequest">
            <summary>Request parameters for ClusterPutSettings
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-update-settings.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.ClusterSettingsRequest.FlatSettings">
            <summary>Return settings in flat format (default: false)</summary>
        </member>
        <member name="T:Nest.ClusterSettingsDescriptor">
            <summary>descriptor for ClusterPutSettings
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-update-settings.html
            </pre>
            </summary>
        </member>
        <member name="M:Nest.ClusterSettingsDescriptor.FlatSettings(System.Boolean)">
            <summary>Return settings in flat format (default: false)</summary>
        </member>
        <member name="T:Nest.DeleteSnapshotRequest">
            <summary>Request parameters for SnapshotDelete
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.DeleteSnapshotRequest.MasterTimeout">
            <summary>Explicit operation timeout for connection to master node</summary>
        </member>
        <member name="T:Nest.DeleteSnapshotDescriptor">
            <summary>descriptor for SnapshotDelete
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html
            </pre>
            </summary>
        </member>
        <member name="T:Nest.RepositorySnapshotPathDescriptor`2">
            <summary>
            Provides a base for descriptors that need to describe a path that contains a
            <pre>
            {repository}
            </pre>
            routing value
            </summary>
        </member>
        <member name="M:Nest.RepositorySnapshotPathDescriptor`2.Repository(System.String)">
            <summary>
            Specify the name of the repository we are targeting
            </summary>
        </member>
        <member name="M:Nest.DeleteSnapshotDescriptor.MasterTimeout(System.String)">
            <summary>Explicit operation timeout for connection to master node</summary>
        </member>
        <member name="M:Nest.QueryContainer.op_BitwiseAnd(Nest.QueryContainer,Nest.QueryContainer)">
            <summary>
            AND's two BaseQueries
            </summary>
            <returns>A new basequery that represents the AND of the two</returns>
        </member>
        <member name="M:Nest.RescoreQueryDescriptor`1.Query(Nest.QueryContainer)">
            <summary>
            Describe the query to perform using the static Query class
            </summary>
        </member>
        <member name="M:Nest.DSL.Visitor.IQueryVisitor.Visit(Nest.IQueryContainer)">
            <summary>
            Visit the query container just before we dispatch into the query it holds
            </summary>
            <param name="queryDescriptor"></param>
        </member>
        <member name="M:Nest.DSL.Visitor.IQueryVisitor.Visit(Nest.IQuery)">
            <summary>
            Visit every query item just before they are visited by their specialized Visit() implementation
            </summary>
            <param name="query">The IQuery object that will be visited</param>
        </member>
        <member name="M:Nest.DSL.Visitor.IQueryVisitor.Visit(Nest.IFilterContainer)">
            <summary>
            Visit the filter container just before we dispatch into the filter it holds
            </summary>
            <param name="filterDescriptor"></param>
        </member>
        <member name="M:Nest.DSL.Visitor.IQueryVisitor.Visit(Nest.IFilter)">
            <summary>
            Visit every filer item just before they are visited by their specialized Visit() implementation
            </summary>
            <param name="filter">The IFilterBase object that will be visited</param>
        </member>
        <member name="P:Nest.DSL.Visitor.IQueryVisitor.Depth">
            <summary>
            The current depth of the node being visited
            </summary>
        </member>
        <member name="P:Nest.DSL.Visitor.IQueryVisitor.Scope">
            <summary>
            Hints the relation with the parent, i,e queries inside a Must clause will have VisitorScope.Must set.
            </summary>
        </member>
        <member name="T:Nest.AbortBenchmarkRequest">
            <summary>Request parameters for AbortBenchmark
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-benchmark.html
            </pre>
            </summary>
        </member>
        <member name="T:Nest.BulkRequest">
            <summary>Request parameters for Bulk
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-bulk.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.BulkRequest.Consistency">
            <summary>Explicit write consistency setting for the operation</summary>
        </member>
        <member name="P:Nest.BulkRequest.Refresh">
            <summary>Refresh the index after performing the operation</summary>
        </member>
        <member name="P:Nest.BulkRequest.Replication">
            <summary>Explicitely set the replication type</summary>
        </member>
        <member name="P:Nest.BulkRequest.Routing">
            <summary>Specific routing value</summary>
        </member>
        <member name="P:Nest.BulkRequest.Timeout">
            <summary>Explicit operation timeout</summary>
        </member>
        <member name="P:Nest.BulkRequest.TypeQueryString">
            <summary>Default document type for items which don&#39;t provide one</summary>
        </member>
        <member name="T:Nest.CatAliasesRequest">
            <summary>Request parameters for CatAliases
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-aliases.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.CatAliasesRequest.Local">
            <summary>Return local information, do not retrieve the state from master node (default: false)</summary>
        </member>
        <member name="P:Nest.CatAliasesRequest.MasterTimeout">
            <summary>Explicit operation timeout for connection to master node</summary>
        </member>
        <member name="P:Nest.CatAliasesRequest.H">
            <summary>Comma-separated list of column names to display</summary>
        </member>
        <member name="P:Nest.CatAliasesRequest.Help">
            <summary>Return help information</summary>
        </member>
        <member name="P:Nest.CatAliasesRequest.V">
            <summary>Verbose mode. Display column headers</summary>
        </member>
        <member name="T:Nest.CatAllocationRequest">
            <summary>Request parameters for CatAllocation
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-allocation.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.CatAllocationRequest.Bytes">
            <summary>The unit in which to display byte values</summary>
        </member>
        <member name="P:Nest.CatAllocationRequest.Local">
            <summary>Return local information, do not retrieve the state from master node (default: false)</summary>
        </member>
        <member name="P:Nest.CatAllocationRequest.MasterTimeout">
            <summary>Explicit operation timeout for connection to master node</summary>
        </member>
        <member name="P:Nest.CatAllocationRequest.H">
            <summary>Comma-separated list of column names to display</summary>
        </member>
        <member name="P:Nest.CatAllocationRequest.Help">
            <summary>Return help information</summary>
        </member>
        <member name="P:Nest.CatAllocationRequest.V">
            <summary>Verbose mode. Display column headers</summary>
        </member>
        <member name="T:Nest.CatCountRequest">
            <summary>Request parameters for CatCount
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-count.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.CatCountRequest.Local">
            <summary>Return local information, do not retrieve the state from master node (default: false)</summary>
        </member>
        <member name="P:Nest.CatCountRequest.MasterTimeout">
            <summary>Explicit operation timeout for connection to master node</summary>
        </member>
        <member name="P:Nest.CatCountRequest.H">
            <summary>Comma-separated list of column names to display</summary>
        </member>
        <member name="P:Nest.CatCountRequest.Help">
            <summary>Return help information</summary>
        </member>
        <member name="P:Nest.CatCountRequest.V">
            <summary>Verbose mode. Display column headers</summary>
        </member>
        <member name="T:Nest.CatFielddataRequest">
            <summary>Request parameters for CatFielddata
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/cat-fielddata.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.CatFielddataRequest.Bytes">
            <summary>The unit in which to display byte values</summary>
        </member>
        <member name="P:Nest.CatFielddataRequest.Local">
            <summary>Return local information, do not retrieve the state from master node (default: false)</summary>
        </member>
        <member name="P:Nest.CatFielddataRequest.MasterTimeout">
            <summary>Explicit operation timeout for connection to master node</summary>
        </member>
        <member name="P:Nest.CatFielddataRequest.H">
            <summary>Comma-separated list of column names to display</summary>
        </member>
        <member name="P:Nest.CatFielddataRequest.Help">
            <summary>Return help information</summary>
        </member>
        <member name="P:Nest.CatFielddataRequest.V">
            <summary>Verbose mode. Display column headers</summary>
        </member>
        <member name="P:Nest.CatFielddataRequest.Fields">
            <summary>A comma-separated list of fields to return the fielddata size</summary>
        </member>
        <member name="T:Nest.CatHealthRequest">
            <summary>Request parameters for CatHealth
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-health.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.CatHealthRequest.Local">
            <summary>Return local information, do not retrieve the state from master node (default: false)</summary>
        </member>
        <member name="P:Nest.CatHealthRequest.MasterTimeout">
            <summary>Explicit operation timeout for connection to master node</summary>
        </member>
        <member name="P:Nest.CatHealthRequest.H">
            <summary>Comma-separated list of column names to display</summary>
        </member>
        <member name="P:Nest.CatHealthRequest.Help">
            <summary>Return help information</summary>
        </member>
        <member name="P:Nest.CatHealthRequest.Ts">
            <summary>Set to false to disable timestamping</summary>
        </member>
        <member name="P:Nest.CatHealthRequest.V">
            <summary>Verbose mode. Display column headers</summary>
        </member>
        <member name="T:Nest.CatHelpRequest">
            <summary>Request parameters for CatHelp
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.CatHelpRequest.Help">
            <summary>Return help information</summary>
        </member>
        <member name="T:Nest.CatIndicesRequest">
            <summary>Request parameters for CatIndices
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-indices.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.CatIndicesRequest.Bytes">
            <summary>The unit in which to display byte values</summary>
        </member>
        <member name="P:Nest.CatIndicesRequest.Local">
            <summary>Return local information, do not retrieve the state from master node (default: false)</summary>
        </member>
        <member name="P:Nest.CatIndicesRequest.MasterTimeout">
            <summary>Explicit operation timeout for connection to master node</summary>
        </member>
        <member name="P:Nest.CatIndicesRequest.H">
            <summary>Comma-separated list of column names to display</summary>
        </member>
        <member name="P:Nest.CatIndicesRequest.Help">
            <summary>Return help information</summary>
        </member>
        <member name="P:Nest.CatIndicesRequest.Pri">
            <summary>Set to true to return stats only for primary shards</summary>
        </member>
        <member name="P:Nest.CatIndicesRequest.V">
            <summary>Verbose mode. Display column headers</summary>
        </member>
        <member name="T:Nest.CatMasterRequest">
            <summary>Request parameters for CatMaster
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-master.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.CatMasterRequest.Local">
            <summary>Return local information, do not retrieve the state from master node (default: false)</summary>
        </member>
        <member name="P:Nest.CatMasterRequest.MasterTimeout">
            <summary>Explicit operation timeout for connection to master node</summary>
        </member>
        <member name="P:Nest.CatMasterRequest.H">
            <summary>Comma-separated list of column names to display</summary>
        </member>
        <member name="P:Nest.CatMasterRequest.Help">
            <summary>Return help information</summary>
        </member>
        <member name="P:Nest.CatMasterRequest.V">
            <summary>Verbose mode. Display column headers</summary>
        </member>
        <member name="T:Nest.CatNodesRequest">
            <summary>Request parameters for CatNodes
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-nodes.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.CatNodesRequest.Local">
            <summary>Return local information, do not retrieve the state from master node (default: false)</summary>
        </member>
        <member name="P:Nest.CatNodesRequest.MasterTimeout">
            <summary>Explicit operation timeout for connection to master node</summary>
        </member>
        <member name="P:Nest.CatNodesRequest.H">
            <summary>Comma-separated list of column names to display</summary>
        </member>
        <member name="P:Nest.CatNodesRequest.Help">
            <summary>Return help information</summary>
        </member>
        <member name="P:Nest.CatNodesRequest.V">
            <summary>Verbose mode. Display column headers</summary>
        </member>
        <member name="T:Nest.CatPendingTasksRequest">
            <summary>Request parameters for CatPendingTasks
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-pending-tasks.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.CatPendingTasksRequest.Local">
            <summary>Return local information, do not retrieve the state from master node (default: false)</summary>
        </member>
        <member name="P:Nest.CatPendingTasksRequest.MasterTimeout">
            <summary>Explicit operation timeout for connection to master node</summary>
        </member>
        <member name="P:Nest.CatPendingTasksRequest.H">
            <summary>Comma-separated list of column names to display</summary>
        </member>
        <member name="P:Nest.CatPendingTasksRequest.Help">
            <summary>Return help information</summary>
        </member>
        <member name="P:Nest.CatPendingTasksRequest.V">
            <summary>Verbose mode. Display column headers</summary>
        </member>
        <member name="T:Nest.CatPluginsRequest">
            <summary>Request parameters for CatPlugins
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/cat-plugins.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.CatPluginsRequest.Local">
            <summary>Return local information, do not retrieve the state from master node (default: false)</summary>
        </member>
        <member name="P:Nest.CatPluginsRequest.MasterTimeout">
            <summary>Explicit operation timeout for connection to master node</summary>
        </member>
        <member name="P:Nest.CatPluginsRequest.H">
            <summary>Comma-separated list of column names to display</summary>
        </member>
        <member name="P:Nest.CatPluginsRequest.Help">
            <summary>Return help information</summary>
        </member>
        <member name="P:Nest.CatPluginsRequest.V">
            <summary>Verbose mode. Display column headers</summary>
        </member>
        <member name="T:Nest.CatRecoveryRequest">
            <summary>Request parameters for CatRecovery
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-recovery.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.CatRecoveryRequest.Bytes">
            <summary>The unit in which to display byte values</summary>
        </member>
        <member name="P:Nest.CatRecoveryRequest.MasterTimeout">
            <summary>Explicit operation timeout for connection to master node</summary>
        </member>
        <member name="P:Nest.CatRecoveryRequest.H">
            <summary>Comma-separated list of column names to display</summary>
        </member>
        <member name="P:Nest.CatRecoveryRequest.Help">
            <summary>Return help information</summary>
        </member>
        <member name="P:Nest.CatRecoveryRequest.V">
            <summary>Verbose mode. Display column headers</summary>
        </member>
        <member name="T:Nest.CatShardsRequest">
            <summary>Request parameters for CatShards
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-shards.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.CatShardsRequest.Local">
            <summary>Return local information, do not retrieve the state from master node (default: false)</summary>
        </member>
        <member name="P:Nest.CatShardsRequest.MasterTimeout">
            <summary>Explicit operation timeout for connection to master node</summary>
        </member>
        <member name="P:Nest.CatShardsRequest.H">
            <summary>Comma-separated list of column names to display</summary>
        </member>
        <member name="P:Nest.CatShardsRequest.Help">
            <summary>Return help information</summary>
        </member>
        <member name="P:Nest.CatShardsRequest.V">
            <summary>Verbose mode. Display column headers</summary>
        </member>
        <member name="T:Nest.CatThreadPoolRequest">
            <summary>Request parameters for CatThreadPool
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/cat-thread-pool.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.CatThreadPoolRequest.Local">
            <summary>Return local information, do not retrieve the state from master node (default: false)</summary>
        </member>
        <member name="P:Nest.CatThreadPoolRequest.MasterTimeout">
            <summary>Explicit operation timeout for connection to master node</summary>
        </member>
        <member name="P:Nest.CatThreadPoolRequest.H">
            <summary>Comma-separated list of column names to display</summary>
        </member>
        <member name="P:Nest.CatThreadPoolRequest.Help">
            <summary>Return help information</summary>
        </member>
        <member name="P:Nest.CatThreadPoolRequest.V">
            <summary>Verbose mode. Display column headers</summary>
        </member>
        <member name="P:Nest.CatThreadPoolRequest.FullId">
            <summary>Enables displaying the complete node ids</summary>
        </member>
        <member name="T:Nest.ClearScrollRequest">
            <summary>Request parameters for ClearScroll
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-request-scroll.html
            </pre>
            </summary>
        </member>
        <member name="T:Nest.ClusterHealthRequest">
            <summary>Request parameters for ClusterHealth
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-health.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.ClusterHealthRequest.Level">
            <summary>Specify the level of detail for returned information</summary>
        </member>
        <member name="P:Nest.ClusterHealthRequest.Local">
            <summary>Return local information, do not retrieve the state from master node (default: false)</summary>
        </member>
        <member name="P:Nest.ClusterHealthRequest.MasterTimeout">
            <summary>Explicit operation timeout for connection to master node</summary>
        </member>
        <member name="P:Nest.ClusterHealthRequest.Timeout">
            <summary>Explicit operation timeout</summary>
        </member>
        <member name="P:Nest.ClusterHealthRequest.WaitForActiveShards">
            <summary>Wait until the specified number of shards is active</summary>
        </member>
        <member name="P:Nest.ClusterHealthRequest.WaitForNodes">
            <summary>Wait until the specified number of nodes is available</summary>
        </member>
        <member name="P:Nest.ClusterHealthRequest.WaitForRelocatingShards">
            <summary>Wait until the specified number of relocating shards is finished</summary>
        </member>
        <member name="P:Nest.ClusterHealthRequest.WaitForStatus">
            <summary>Wait until cluster is in a specific state</summary>
        </member>
        <member name="T:Nest.ClusterPendingTasksRequest">
            <summary>Request parameters for ClusterPendingTasks
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-pending.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.ClusterPendingTasksRequest.Local">
            <summary>Return local information, do not retrieve the state from master node (default: false)</summary>
        </member>
        <member name="P:Nest.ClusterPendingTasksRequest.MasterTimeout">
            <summary>Specify timeout for connection to master</summary>
        </member>
        <member name="T:Nest.ClusterRerouteRequest">
            <summary>Request parameters for ClusterReroute
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-reroute.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.ClusterRerouteRequest.DryRun">
            <summary>Simulate the operation only and return the resulting state</summary>
        </member>
        <member name="P:Nest.ClusterRerouteRequest.Explain">
            <summary>Return an explanation of why the commands can or cannot be executed</summary>
        </member>
        <member name="P:Nest.ClusterRerouteRequest.FilterMetadata">
            <summary>Don&#39;t return cluster state metadata (default: false)</summary>
        </member>
        <member name="P:Nest.ClusterRerouteRequest.MasterTimeout">
            <summary>Explicit operation timeout for connection to master node</summary>
        </member>
        <member name="P:Nest.ClusterRerouteRequest.Timeout">
            <summary>Explicit operation timeout</summary>
        </member>
        <member name="T:Nest.ClusterStateRequest">
            <summary>Request parameters for ClusterState
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-state.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.ClusterStateRequest.Local">
            <summary>Return local information, do not retrieve the state from master node (default: false)</summary>
        </member>
        <member name="P:Nest.ClusterStateRequest.MasterTimeout">
            <summary>Specify timeout for connection to master</summary>
        </member>
        <member name="P:Nest.ClusterStateRequest.FlatSettings">
            <summary>Return settings in flat format (default: false)</summary>
        </member>
        <member name="T:Nest.ClusterStatsRequest">
            <summary>Request parameters for ClusterStats
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-stats.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.ClusterStatsRequest.FlatSettings">
            <summary>Return settings in flat format (default: false)</summary>
        </member>
        <member name="P:Nest.ClusterStatsRequest.Human">
            <summary>Whether to return time and byte values in human-readable format.</summary>
        </member>
        <member name="T:Nest.CountRequest`1">
            <summary>Request parameters for Count
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-count.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.CountRequest`1.IgnoreUnavailable">
            <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
        </member>
        <member name="P:Nest.CountRequest`1.AllowNoIndices">
            <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
        </member>
        <member name="P:Nest.CountRequest`1.ExpandWildcards">
            <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        </member>
        <member name="P:Nest.CountRequest`1.MinScore">
            <summary>Include only documents with a specific `_score` value in the result</summary>
        </member>
        <member name="P:Nest.CountRequest`1.Preference">
            <summary>Specify the node or shard the operation should be performed on (default: random)</summary>
        </member>
        <member name="P:Nest.CountRequest`1.Routing">
            <summary>Specific routing value</summary>
        </member>
        <member name="P:Nest.CountRequest`1.Source">
            <summary>The URL-encoded query definition (instead of using the request body)</summary>
        </member>
        <member name="T:Nest.PercolateCountRequest`1">
            <summary>Request parameters for CountPercolateGet
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.PercolateCountRequest`1.Routing">
            <summary>A comma-separated list of specific routing values</summary>
        </member>
        <member name="P:Nest.PercolateCountRequest`1.Preference">
            <summary>Specify the node or shard the operation should be performed on (default: random)</summary>
        </member>
        <member name="P:Nest.PercolateCountRequest`1.IgnoreUnavailable">
            <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
        </member>
        <member name="P:Nest.PercolateCountRequest`1.AllowNoIndices">
            <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
        </member>
        <member name="P:Nest.PercolateCountRequest`1.ExpandWildcards">
            <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        </member>
        <member name="P:Nest.PercolateCountRequest`1.PercolateIndex">
            <summary>The index to count percolate the document into. Defaults to index.</summary>
        </member>
        <member name="P:Nest.PercolateCountRequest`1.PercolateType">
            <summary>The type to count percolate document into. Defaults to type.</summary>
        </member>
        <member name="P:Nest.PercolateCountRequest`1.Version">
            <summary>Explicit version number for concurrency control</summary>
        </member>
        <member name="P:Nest.PercolateCountRequest`1.VersionType">
            <summary>Specific version type</summary>
        </member>
        <member name="T:Nest.DeleteRequest`1">
            <summary>Request parameters for Delete
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-delete.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.DeleteRequest`1.Consistency">
            <summary>Specific write consistency setting for the operation</summary>
        </member>
        <member name="P:Nest.DeleteRequest`1.Parent">
            <summary>ID of parent document</summary>
        </member>
        <member name="P:Nest.DeleteRequest`1.Refresh">
            <summary>Refresh the index after performing the operation</summary>
        </member>
        <member name="P:Nest.DeleteRequest`1.Replication">
            <summary>Specific replication type</summary>
        </member>
        <member name="P:Nest.DeleteRequest`1.Routing">
            <summary>Specific routing value</summary>
        </member>
        <member name="P:Nest.DeleteRequest`1.Timeout">
            <summary>Explicit operation timeout</summary>
        </member>
        <member name="P:Nest.DeleteRequest`1.Version">
            <summary>Explicit version number for concurrency control</summary>
        </member>
        <member name="P:Nest.DeleteRequest`1.VersionType">
            <summary>Specific version type</summary>
        </member>
        <member name="T:Nest.DeleteByQueryRequest`1">
            <summary>Request parameters for DeleteByQuery
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-delete-by-query.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.DeleteByQueryRequest`1.Analyzer">
            <summary>The analyzer to use for the query string</summary>
        </member>
        <member name="P:Nest.DeleteByQueryRequest`1.Consistency">
            <summary>Specific write consistency setting for the operation</summary>
        </member>
        <member name="P:Nest.DeleteByQueryRequest`1.DefaultOperator">
            <summary>The default operator for query string query (AND or OR)</summary>
        </member>
        <member name="P:Nest.DeleteByQueryRequest`1.Df">
            <summary>The field to use as default where no field prefix is given in the query string</summary>
        </member>
        <member name="P:Nest.DeleteByQueryRequest`1.IgnoreUnavailable">
            <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
        </member>
        <member name="P:Nest.DeleteByQueryRequest`1.AllowNoIndices">
            <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
        </member>
        <member name="P:Nest.DeleteByQueryRequest`1.ExpandWildcards">
            <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        </member>
        <member name="P:Nest.DeleteByQueryRequest`1.Replication">
            <summary>Specific replication type</summary>
        </member>
        <member name="P:Nest.DeleteByQueryRequest`1.Q">
            <summary>Query in the Lucene query string syntax</summary>
        </member>
        <member name="P:Nest.DeleteByQueryRequest`1.Routing">
            <summary>Specific routing value</summary>
        </member>
        <member name="P:Nest.DeleteByQueryRequest`1.Source">
            <summary>The URL-encoded query definition (instead of using the request body)</summary>
        </member>
        <member name="P:Nest.DeleteByQueryRequest`1.Timeout">
            <summary>Explicit operation timeout</summary>
        </member>
        <member name="T:Nest.DocumentExistsRequest`1">
            <summary>Request parameters for Exists
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-get.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.DocumentExistsRequest`1.Parent">
            <summary>The ID of the parent document</summary>
        </member>
        <member name="P:Nest.DocumentExistsRequest`1.Preference">
            <summary>Specify the node or shard the operation should be performed on (default: random)</summary>
        </member>
        <member name="P:Nest.DocumentExistsRequest`1.Realtime">
            <summary>Specify whether to perform the operation in realtime or search mode</summary>
        </member>
        <member name="P:Nest.DocumentExistsRequest`1.Refresh">
            <summary>Refresh the shard containing the document before performing the operation</summary>
        </member>
        <member name="P:Nest.DocumentExistsRequest`1.Routing">
            <summary>Specific routing value</summary>
        </member>
        <member name="T:Nest.ExplainRequest">
            <summary>Request parameters for ExplainGet
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-explain.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.ExplainRequest.AnalyzeWildcard">
            <summary>Specify whether wildcards and prefix queries in the query string query should be analyzed (default: false)</summary>
        </member>
        <member name="P:Nest.ExplainRequest.Analyzer">
            <summary>The analyzer for the query string query</summary>
        </member>
        <member name="P:Nest.ExplainRequest.DefaultOperator">
            <summary>The default operator for query string query (AND or OR)</summary>
        </member>
        <member name="P:Nest.ExplainRequest.Df">
            <summary>The default field for query string query (default: _all)</summary>
        </member>
        <member name="P:Nest.ExplainRequest.Fields">
            <summary>A comma-separated list of fields to return in the response</summary>
        </member>
        <member name="P:Nest.ExplainRequest.Lenient">
            <summary>Specify whether format-based query failures (such as providing text to a numeric field) should be ignored</summary>
        </member>
        <member name="P:Nest.ExplainRequest.LowercaseExpandedTerms">
            <summary>Specify whether query terms should be lowercased</summary>
        </member>
        <member name="P:Nest.ExplainRequest.Parent">
            <summary>The ID of the parent document</summary>
        </member>
        <member name="P:Nest.ExplainRequest.Preference">
            <summary>Specify the node or shard the operation should be performed on (default: random)</summary>
        </member>
        <member name="P:Nest.ExplainRequest.Q">
            <summary>Query in the Lucene query string syntax</summary>
        </member>
        <member name="P:Nest.ExplainRequest.Routing">
            <summary>Specific routing value</summary>
        </member>
        <member name="P:Nest.ExplainRequest.Source">
            <summary>The URL-encoded query definition (instead of using the request body)</summary>
        </member>
        <member name="P:Nest.ExplainRequest.SourceEnabled">
            <summary>True or false to return the _source field or not, or a list of fields to return</summary>
        </member>
        <member name="P:Nest.ExplainRequest.SourceExclude">
            <summary>A list of fields to exclude from the returned _source field</summary>
        </member>
        <member name="P:Nest.ExplainRequest.SourceInclude">
            <summary>A list of fields to extract and return from the _source field</summary>
        </member>
        <member name="T:Nest.GetRequest`1">
            <summary>Request parameters for Get
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-get.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.GetRequest`1.Fields">
            <summary>A comma-separated list of fields to return in the response</summary>
        </member>
        <member name="P:Nest.GetRequest`1.Parent">
            <summary>The ID of the parent document</summary>
        </member>
        <member name="P:Nest.GetRequest`1.Preference">
            <summary>Specify the node or shard the operation should be performed on (default: random)</summary>
        </member>
        <member name="P:Nest.GetRequest`1.Realtime">
            <summary>Specify whether to perform the operation in realtime or search mode</summary>
        </member>
        <member name="P:Nest.GetRequest`1.Refresh">
            <summary>Refresh the shard containing the document before performing the operation</summary>
        </member>
        <member name="P:Nest.GetRequest`1.Routing">
            <summary>Specific routing value</summary>
        </member>
        <member name="P:Nest.GetRequest`1.SourceEnabled">
            <summary>True or false to return the _source field or not, or a list of fields to return</summary>
        </member>
        <member name="P:Nest.GetRequest`1.SourceExclude">
            <summary>A list of fields to exclude from the returned _source field</summary>
        </member>
        <member name="P:Nest.GetRequest`1.SourceInclude">
            <summary>A list of fields to extract and return from the _source field</summary>
        </member>
        <member name="P:Nest.GetRequest`1.Version">
            <summary>Explicit version number for concurrency control</summary>
        </member>
        <member name="P:Nest.GetRequest`1.VersionType">
            <summary>Specific version type</summary>
        </member>
        <member name="T:Nest.SourceRequest`1">
            <summary>Request parameters for GetSource
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-get.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.SourceRequest`1.Parent">
            <summary>The ID of the parent document</summary>
        </member>
        <member name="P:Nest.SourceRequest`1.Preference">
            <summary>Specify the node or shard the operation should be performed on (default: random)</summary>
        </member>
        <member name="P:Nest.SourceRequest`1.Realtime">
            <summary>Specify whether to perform the operation in realtime or search mode</summary>
        </member>
        <member name="P:Nest.SourceRequest`1.Refresh">
            <summary>Refresh the shard containing the document before performing the operation</summary>
        </member>
        <member name="P:Nest.SourceRequest`1.Routing">
            <summary>Specific routing value</summary>
        </member>
        <member name="P:Nest.SourceRequest`1.SourceEnabled">
            <summary>True or false to return the _source field or not, or a list of fields to return</summary>
        </member>
        <member name="P:Nest.SourceRequest`1.SourceExclude">
            <summary>A list of fields to exclude from the returned _source field</summary>
        </member>
        <member name="P:Nest.SourceRequest`1.SourceInclude">
            <summary>A list of fields to extract and return from the _source field</summary>
        </member>
        <member name="P:Nest.SourceRequest`1.Version">
            <summary>Explicit version number for concurrency control</summary>
        </member>
        <member name="P:Nest.SourceRequest`1.VersionType">
            <summary>Specific version type</summary>
        </member>
        <member name="T:Nest.IndexRequest`1">
            <summary>Request parameters for Index
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-index_.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.IndexRequest`1.Consistency">
            <summary>Explicit write consistency setting for the operation</summary>
        </member>
        <member name="P:Nest.IndexRequest`1.OpType">
            <summary>Explicit operation type</summary>
        </member>
        <member name="P:Nest.IndexRequest`1.Parent">
            <summary>ID of the parent document</summary>
        </member>
        <member name="P:Nest.IndexRequest`1.Refresh">
            <summary>Refresh the index after performing the operation</summary>
        </member>
        <member name="P:Nest.IndexRequest`1.Replication">
            <summary>Specific replication type</summary>
        </member>
        <member name="P:Nest.IndexRequest`1.Routing">
            <summary>Specific routing value</summary>
        </member>
        <member name="P:Nest.IndexRequest`1.Timeout">
            <summary>Explicit operation timeout</summary>
        </member>
        <member name="P:Nest.IndexRequest`1.Timestamp">
            <summary>Explicit timestamp for the document</summary>
        </member>
        <member name="P:Nest.IndexRequest`1.Ttl">
            <summary>Expiration time for the document</summary>
        </member>
        <member name="P:Nest.IndexRequest`1.Version">
            <summary>Explicit version number for concurrency control</summary>
        </member>
        <member name="P:Nest.IndexRequest`1.VersionType">
            <summary>Specific version type</summary>
        </member>
        <member name="T:Nest.AnalyzeRequest">
            <summary>Request parameters for IndicesAnalyzeGetForAll
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-analyze.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.AnalyzeRequest.Analyzer">
            <summary>The name of the analyzer to use</summary>
        </member>
        <member name="P:Nest.AnalyzeRequest.CharFilters">
            <summary>A comma-separated list of character filters to use for the analysis</summary>
        </member>
        <member name="P:Nest.AnalyzeRequest.Field">
            <summary>Use the analyzer configured for this field (instead of passing the analyzer name)</summary>
        </member>
        <member name="P:Nest.AnalyzeRequest.Filters">
            <summary>A comma-separated list of filters to use for the analysis</summary>
        </member>
        <member name="P:Nest.AnalyzeRequest.IndexQueryString">
            <summary>The name of the index to scope the operation</summary>
        </member>
        <member name="P:Nest.AnalyzeRequest.PreferLocal">
            <summary>With `true`, specify that a local shard should be used if available, with `false`, use a random shard (default: true)</summary>
        </member>
        <member name="P:Nest.AnalyzeRequest.Text">
            <summary>The text on which the analysis should be performed (when request body is not used)</summary>
        </member>
        <member name="P:Nest.AnalyzeRequest.Tokenizer">
            <summary>The name of the tokenizer to use for the analysis</summary>
        </member>
        <member name="P:Nest.AnalyzeRequest.Format">
            <summary>Format of the output</summary>
        </member>
        <member name="T:Nest.ClearCacheRequest">
            <summary>Request parameters for IndicesClearCacheForAll
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-clearcache.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.ClearCacheRequest.FieldData">
            <summary>Clear field data</summary>
        </member>
        <member name="P:Nest.ClearCacheRequest.Fields">
            <summary>A comma-separated list of fields to clear when using the `field_data` parameter (default: all)</summary>
        </member>
        <member name="P:Nest.ClearCacheRequest.Filter">
            <summary>Clear filter caches</summary>
        </member>
        <member name="P:Nest.ClearCacheRequest.FilterCache">
            <summary>Clear filter caches</summary>
        </member>
        <member name="P:Nest.ClearCacheRequest.FilterKeys">
            <summary>A comma-separated list of keys to clear when using the `filter_cache` parameter (default: all)</summary>
        </member>
        <member name="P:Nest.ClearCacheRequest.Id">
            <summary>Clear ID caches for parent/child</summary>
        </member>
        <member name="P:Nest.ClearCacheRequest.IdCache">
            <summary>Clear ID caches for parent/child</summary>
        </member>
        <member name="P:Nest.ClearCacheRequest.IgnoreUnavailable">
            <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
        </member>
        <member name="P:Nest.ClearCacheRequest.AllowNoIndices">
            <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
        </member>
        <member name="P:Nest.ClearCacheRequest.ExpandWildcards">
            <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        </member>
        <member name="P:Nest.ClearCacheRequest.IndexQueryString">
            <summary>A comma-separated list of index name to limit the operation</summary>
        </member>
        <member name="P:Nest.ClearCacheRequest.Recycler">
            <summary>Clear the recycler cache</summary>
        </member>
        <member name="T:Nest.CloseIndexRequest">
            <summary>Request parameters for IndicesClose
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-open-close.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.CloseIndexRequest.Timeout">
            <summary>Explicit operation timeout</summary>
        </member>
        <member name="P:Nest.CloseIndexRequest.MasterTimeout">
            <summary>Specify timeout for connection to master</summary>
        </member>
        <member name="P:Nest.CloseIndexRequest.IgnoreUnavailable">
            <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
        </member>
        <member name="P:Nest.CloseIndexRequest.AllowNoIndices">
            <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
        </member>
        <member name="P:Nest.CloseIndexRequest.ExpandWildcards">
            <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        </member>
        <member name="T:Nest.CreateIndexRequest">
            <summary>Request parameters for IndicesCreate
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-create-index.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.CreateIndexRequest.Timeout">
            <summary>Explicit operation timeout</summary>
        </member>
        <member name="P:Nest.CreateIndexRequest.MasterTimeout">
            <summary>Specify timeout for connection to master</summary>
        </member>
        <member name="T:Nest.DeleteIndexRequest">
            <summary>Request parameters for IndicesDelete
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-delete-index.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.DeleteIndexRequest.Timeout">
            <summary>Explicit operation timeout</summary>
        </member>
        <member name="P:Nest.DeleteIndexRequest.MasterTimeout">
            <summary>Specify timeout for connection to master</summary>
        </member>
        <member name="T:Nest.IndicesDeleteAliasRequest">
            <summary>Request parameters for IndicesDeleteAlias
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.IndicesDeleteAliasRequest.Timeout">
            <summary>Explicit timestamp for the document</summary>
        </member>
        <member name="P:Nest.IndicesDeleteAliasRequest.MasterTimeout">
            <summary>Specify timeout for connection to master</summary>
        </member>
        <member name="T:Nest.DeleteMappingRequest`1">
            <summary>Request parameters for IndicesDeleteMapping
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-delete-mapping.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.DeleteMappingRequest`1.MasterTimeout">
            <summary>Specify timeout for connection to master</summary>
        </member>
        <member name="T:Nest.DeleteTemplateRequest">
            <summary>Request parameters for IndicesDeleteTemplateForAll
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-templates.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.DeleteTemplateRequest.Timeout">
            <summary>Explicit operation timeout</summary>
        </member>
        <member name="P:Nest.DeleteTemplateRequest.MasterTimeout">
            <summary>Specify timeout for connection to master</summary>
        </member>
        <member name="T:Nest.DeleteWarmerRequest">
            <summary>Request parameters for IndicesDeleteWarmer
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.DeleteWarmerRequest.MasterTimeout">
            <summary>Specify timeout for connection to master</summary>
        </member>
        <member name="T:Nest.IndexExistsRequest">
            <summary>Request parameters for IndicesExists
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-settings.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.IndexExistsRequest.IgnoreUnavailable">
            <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
        </member>
        <member name="P:Nest.IndexExistsRequest.AllowNoIndices">
            <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
        </member>
        <member name="P:Nest.IndexExistsRequest.ExpandWildcards">
            <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        </member>
        <member name="P:Nest.IndexExistsRequest.Local">
            <summary>Return local information, do not retrieve the state from master node (default: false)</summary>
        </member>
        <member name="T:Nest.IndicesExistsAliasRequest">
            <summary>Request parameters for IndicesExistsAliasForAll
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.IndicesExistsAliasRequest.IgnoreUnavailable">
            <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
        </member>
        <member name="P:Nest.IndicesExistsAliasRequest.AllowNoIndices">
            <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
        </member>
        <member name="P:Nest.IndicesExistsAliasRequest.ExpandWildcards">
            <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        </member>
        <member name="P:Nest.IndicesExistsAliasRequest.Local">
            <summary>Return local information, do not retrieve the state from master node (default: false)</summary>
        </member>
        <member name="T:Nest.IndicesExistsTemplateRequest">
            <summary>Request parameters for IndicesExistsTemplateForAll
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-templates.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.IndicesExistsTemplateRequest.Local">
            <summary>Return local information, do not retrieve the state from master node (default: false)</summary>
        </member>
        <member name="T:Nest.IndicesExistsTypeRequest">
            <summary>Request parameters for IndicesExistsType
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-types-exists.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.IndicesExistsTypeRequest.IgnoreUnavailable">
            <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
        </member>
        <member name="P:Nest.IndicesExistsTypeRequest.AllowNoIndices">
            <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
        </member>
        <member name="P:Nest.IndicesExistsTypeRequest.ExpandWildcards">
            <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        </member>
        <member name="P:Nest.IndicesExistsTypeRequest.Local">
            <summary>Return local information, do not retrieve the state from master node (default: false)</summary>
        </member>
        <member name="T:Nest.FlushRequest">
            <summary>Request parameters for IndicesFlushForAll
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-flush.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.FlushRequest.Force">
            <summary>Whether a flush should be forced even if it is not necessarily needed ie. if no changes will be committed to the index. This is useful if transaction log IDs should be incremented even if no uncommitted changes are present. (This setting can be considered as internal)</summary>
        </member>
        <member name="P:Nest.FlushRequest.Full">
            <summary>If set to true a new index writer is created and settings that have been changed related to the index writer will be refreshed. Note: if a full flush is required for a setting to take effect this will be part of the settings update process and it not required to be executed by the user. (This setting can be considered as internal)</summary>
        </member>
        <member name="P:Nest.FlushRequest.IgnoreUnavailable">
            <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
        </member>
        <member name="P:Nest.FlushRequest.AllowNoIndices">
            <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
        </member>
        <member name="P:Nest.FlushRequest.ExpandWildcards">
            <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        </member>
        <member name="T:Nest.GetAliasesRequest">
            <summary>Request parameters for IndicesGetAliasesForAll
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.GetAliasesRequest.Timeout">
            <summary>Explicit operation timeout</summary>
        </member>
        <member name="P:Nest.GetAliasesRequest.Local">
            <summary>Return local information, do not retrieve the state from master node (default: false)</summary>
        </member>
        <member name="T:Nest.IndicesGetFieldMappingRequest">
            <summary>Request parameters for IndicesGetFieldMappingForAll
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-field-mapping.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.IndicesGetFieldMappingRequest.IncludeDefaults">
            <summary>Whether the default mapping values should be returned as well</summary>
        </member>
        <member name="P:Nest.IndicesGetFieldMappingRequest.IgnoreUnavailable">
            <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
        </member>
        <member name="P:Nest.IndicesGetFieldMappingRequest.AllowNoIndices">
            <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
        </member>
        <member name="P:Nest.IndicesGetFieldMappingRequest.ExpandWildcards">
            <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        </member>
        <member name="P:Nest.IndicesGetFieldMappingRequest.Local">
            <summary>Return local information, do not retrieve the state from master node (default: false)</summary>
        </member>
        <member name="T:Nest.GetMappingRequest`1">
            <summary>Request parameters for IndicesGetMappingForAll
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-mapping.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.GetMappingRequest`1.IgnoreUnavailable">
            <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
        </member>
        <member name="P:Nest.GetMappingRequest`1.AllowNoIndices">
            <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
        </member>
        <member name="P:Nest.GetMappingRequest`1.ExpandWildcards">
            <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        </member>
        <member name="P:Nest.GetMappingRequest`1.Local">
            <summary>Return local information, do not retrieve the state from master node (default: false)</summary>
        </member>
        <member name="T:Nest.GetIndexSettingsRequest">
            <summary>Request parameters for IndicesGetSettingsForAll
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-mapping.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.GetIndexSettingsRequest.IgnoreUnavailable">
            <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
        </member>
        <member name="P:Nest.GetIndexSettingsRequest.AllowNoIndices">
            <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
        </member>
        <member name="P:Nest.GetIndexSettingsRequest.ExpandWildcards">
            <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        </member>
        <member name="P:Nest.GetIndexSettingsRequest.FlatSettings">
            <summary>Return settings in flat format (default: false)</summary>
        </member>
        <member name="P:Nest.GetIndexSettingsRequest.Local">
            <summary>Return local information, do not retrieve the state from master node (default: false)</summary>
        </member>
        <member name="T:Nest.GetTemplateRequest">
            <summary>Request parameters for IndicesGetTemplateForAll
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-templates.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.GetTemplateRequest.FlatSettings">
            <summary>Return settings in flat format (default: false)</summary>
        </member>
        <member name="P:Nest.GetTemplateRequest.Local">
            <summary>Return local information, do not retrieve the state from master node (default: false)</summary>
        </member>
        <member name="T:Nest.GetWarmerRequest">
            <summary>Request parameters for IndicesGetWarmerForAll
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.GetWarmerRequest.IgnoreUnavailable">
            <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
        </member>
        <member name="P:Nest.GetWarmerRequest.AllowNoIndices">
            <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
        </member>
        <member name="P:Nest.GetWarmerRequest.ExpandWildcards">
            <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        </member>
        <member name="P:Nest.GetWarmerRequest.Local">
            <summary>Return local information, do not retrieve the state from master node (default: false)</summary>
        </member>
        <member name="T:Nest.OpenIndexRequest">
            <summary>Request parameters for IndicesOpen
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-open-close.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.OpenIndexRequest.Timeout">
            <summary>Explicit operation timeout</summary>
        </member>
        <member name="P:Nest.OpenIndexRequest.MasterTimeout">
            <summary>Specify timeout for connection to master</summary>
        </member>
        <member name="P:Nest.OpenIndexRequest.IgnoreUnavailable">
            <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
        </member>
        <member name="P:Nest.OpenIndexRequest.AllowNoIndices">
            <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
        </member>
        <member name="P:Nest.OpenIndexRequest.ExpandWildcards">
            <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        </member>
        <member name="T:Nest.OptimizeRequest">
            <summary>Request parameters for IndicesOptimizeForAll
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-optimize.html
            </pre>
            </summary>
        </member>
        <member name="M:Nest.OptimizeRequest.#ctor">
            <summary>
            Does an _optimize on all indices (unless bounded by setting the Indices property).
            </summary>
        </member>
        <member name="M:Nest.OptimizeRequest.#ctor(Nest.IndexNameMarker)">
            <summary>
            Does an _optimize on /{index}/_optimize
            </summary>
        </member>
        <member name="M:Nest.OptimizeRequest.#ctor(System.Collections.Generic.IEnumerable{Nest.IndexNameMarker})">
            <summary>
            Does an _optimize on /{indices}/_optimize
            </summary>
        </member>
        <member name="P:Nest.OptimizeRequest.Flush">
            <summary>Specify whether the index should be flushed after performing the operation (default: true)</summary>
        </member>
        <member name="P:Nest.OptimizeRequest.IgnoreUnavailable">
            <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
        </member>
        <member name="P:Nest.OptimizeRequest.AllowNoIndices">
            <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
        </member>
        <member name="P:Nest.OptimizeRequest.ExpandWildcards">
            <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        </member>
        <member name="P:Nest.OptimizeRequest.MaxNumSegments">
            <summary>The number of segments the index should be merged into (default: dynamic)</summary>
        </member>
        <member name="P:Nest.OptimizeRequest.OnlyExpungeDeletes">
            <summary>Specify whether the operation should only expunge deleted documents</summary>
        </member>
        <member name="P:Nest.OptimizeRequest.OperationThreading">
            <summary>TODO: ?</summary>
        </member>
        <member name="P:Nest.OptimizeRequest.WaitForMerge">
            <summary>Specify whether the request should block until the merge process is finished (default: true)</summary>
        </member>
        <member name="P:Nest.OptimizeRequest.Force">
            <summary>Force a merge operation to run, even if there is a single segment in the index (default: false)</summary>
        </member>
        <member name="T:Nest.IndicesPutAliasRequest">
            <summary>Request parameters for IndicesPutAlias
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.IndicesPutAliasRequest.Timeout">
            <summary>Explicit timestamp for the document</summary>
        </member>
        <member name="P:Nest.IndicesPutAliasRequest.MasterTimeout">
            <summary>Specify timeout for connection to master</summary>
        </member>
        <member name="T:Nest.PutMappingRequest`1">
            <summary>Request parameters for IndicesPutMapping
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-put-mapping.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.PutMappingRequest`1.IgnoreConflicts">
            <summary>Specify whether to ignore conflicts while updating the mapping (default: false)</summary>
        </member>
        <member name="P:Nest.PutMappingRequest`1.Timeout">
            <summary>Explicit operation timeout</summary>
        </member>
        <member name="P:Nest.PutMappingRequest`1.MasterTimeout">
            <summary>Specify timeout for connection to master</summary>
        </member>
        <member name="P:Nest.PutMappingRequest`1.IgnoreUnavailable">
            <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
        </member>
        <member name="P:Nest.PutMappingRequest`1.AllowNoIndices">
            <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
        </member>
        <member name="P:Nest.PutMappingRequest`1.ExpandWildcards">
            <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        </member>
        <member name="T:Nest.UpdateSettingsRequest">
            <summary>Request parameters for IndicesPutSettingsForAll
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-update-settings.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.UpdateSettingsRequest.MasterTimeout">
            <summary>Specify timeout for connection to master</summary>
        </member>
        <member name="P:Nest.UpdateSettingsRequest.IgnoreUnavailable">
            <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
        </member>
        <member name="P:Nest.UpdateSettingsRequest.AllowNoIndices">
            <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
        </member>
        <member name="P:Nest.UpdateSettingsRequest.ExpandWildcards">
            <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        </member>
        <member name="P:Nest.UpdateSettingsRequest.FlatSettings">
            <summary>Return settings in flat format (default: false)</summary>
        </member>
        <member name="T:Nest.PutTemplateRequest">
            <summary>Request parameters for IndicesPutTemplateForAll
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-templates.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.PutTemplateRequest.Timeout">
            <summary>Explicit operation timeout</summary>
        </member>
        <member name="P:Nest.PutTemplateRequest.MasterTimeout">
            <summary>Specify timeout for connection to master</summary>
        </member>
        <member name="P:Nest.PutTemplateRequest.FlatSettings">
            <summary>Return settings in flat format (default: false)</summary>
        </member>
        <member name="T:Nest.PutWarmerRequest">
            <summary>Request parameters for IndicesPutWarmerForAll
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.PutWarmerRequest.MasterTimeout">
            <summary>Specify timeout for connection to master</summary>
        </member>
        <member name="P:Nest.PutWarmerRequest.IgnoreUnavailable">
            <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed) in the search request to warm</summary>
        </member>
        <member name="P:Nest.PutWarmerRequest.AllowNoIndices">
            <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices in the search request to warm. (This includes `_all` string or when no indices have been specified)</summary>
        </member>
        <member name="P:Nest.PutWarmerRequest.ExpandWildcards">
            <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both, in the search request to warm.</summary>
        </member>
        <member name="T:Nest.IndicesRecoveryRequest">
            <summary>Request parameters for IndicesRecoveryForAll
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/indices-recovery.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.IndicesRecoveryRequest.Detailed">
            <summary>Whether to display detailed information about shard recovery</summary>
        </member>
        <member name="P:Nest.IndicesRecoveryRequest.ActiveOnly">
            <summary>Display only those recoveries that are currently on-going</summary>
        </member>
        <member name="P:Nest.IndicesRecoveryRequest.Human">
            <summary>Whether to return time and byte values in human-readable format.</summary>
        </member>
        <member name="T:Nest.RefreshRequest">
            <summary>Request parameters for IndicesRefreshForAll
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-refresh.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.RefreshRequest.IgnoreUnavailable">
            <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
        </member>
        <member name="P:Nest.RefreshRequest.AllowNoIndices">
            <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
        </member>
        <member name="P:Nest.RefreshRequest.ExpandWildcards">
            <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        </member>
        <member name="P:Nest.RefreshRequest.Force">
            <summary>Force a refresh even if not required</summary>
        </member>
        <member name="P:Nest.RefreshRequest.OperationThreading">
            <summary>TODO: ?</summary>
        </member>
        <member name="T:Nest.SegmentsRequest">
            <summary>Request parameters for IndicesSegmentsForAll
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-segments.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.SegmentsRequest.IgnoreUnavailable">
            <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
        </member>
        <member name="P:Nest.SegmentsRequest.AllowNoIndices">
            <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
        </member>
        <member name="P:Nest.SegmentsRequest.ExpandWildcards">
            <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        </member>
        <member name="P:Nest.SegmentsRequest.Human">
            <summary>Whether to return time and byte values in human-readable format.</summary>
        </member>
        <member name="P:Nest.SegmentsRequest.OperationThreading">
            <summary>TODO: ?</summary>
        </member>
        <member name="T:Nest.IndicesStatsRequest">
            <summary>Request parameters for IndicesStatsForAll
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-stats.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.IndicesStatsRequest.CompletionFields">
            <summary>A comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards)</summary>
        </member>
        <member name="P:Nest.IndicesStatsRequest.FielddataFields">
            <summary>A comma-separated list of fields for `fielddata` index metric (supports wildcards)</summary>
        </member>
        <member name="P:Nest.IndicesStatsRequest.Fields">
            <summary>A comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards)</summary>
        </member>
        <member name="P:Nest.IndicesStatsRequest.Groups">
            <summary>A comma-separated list of search groups for `search` index metric</summary>
        </member>
        <member name="P:Nest.IndicesStatsRequest.Human">
            <summary>Whether to return time and byte values in human-readable format.</summary>
        </member>
        <member name="P:Nest.IndicesStatsRequest.Level">
            <summary>Return stats aggregated at cluster, index or shard level</summary>
        </member>
        <member name="T:Nest.IndicesStatusRequest">
            <summary>Request parameters for IndicesStatusForAll
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-status.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.IndicesStatusRequest.IgnoreUnavailable">
            <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
        </member>
        <member name="P:Nest.IndicesStatusRequest.AllowNoIndices">
            <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
        </member>
        <member name="P:Nest.IndicesStatusRequest.ExpandWildcards">
            <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        </member>
        <member name="P:Nest.IndicesStatusRequest.Human">
            <summary>Whether to return time and byte values in human-readable format.</summary>
        </member>
        <member name="P:Nest.IndicesStatusRequest.OperationThreading">
            <summary>TODO: ?</summary>
        </member>
        <member name="P:Nest.IndicesStatusRequest.Recovery">
            <summary>Return information about shard recovery</summary>
        </member>
        <member name="P:Nest.IndicesStatusRequest.Snapshot">
            <summary>TODO: ?</summary>
        </member>
        <member name="T:Nest.AliasRequest">
            <summary>Request parameters for IndicesUpdateAliasesForAll
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.AliasRequest.Timeout">
            <summary>Request timeout</summary>
        </member>
        <member name="P:Nest.AliasRequest.MasterTimeout">
            <summary>Specify timeout for connection to master</summary>
        </member>
        <member name="T:Nest.ValidateQueryRequest`1">
            <summary>Request parameters for IndicesValidateQueryGetForAll
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-validate.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.ValidateQueryRequest`1.Explain">
            <summary>Return detailed information about the error</summary>
        </member>
        <member name="P:Nest.ValidateQueryRequest`1.IgnoreUnavailable">
            <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
        </member>
        <member name="P:Nest.ValidateQueryRequest`1.AllowNoIndices">
            <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
        </member>
        <member name="P:Nest.ValidateQueryRequest`1.ExpandWildcards">
            <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        </member>
        <member name="P:Nest.ValidateQueryRequest`1.OperationThreading">
            <summary>TODO: ?</summary>
        </member>
        <member name="P:Nest.ValidateQueryRequest`1.Source">
            <summary>The URL-encoded query definition (instead of using the request body)</summary>
        </member>
        <member name="P:Nest.ValidateQueryRequest`1.Q">
            <summary>Query in the Lucene query string syntax</summary>
        </member>
        <member name="T:Nest.InfoRequest">
            <summary>Request parameters for Info
            <pre>
            http://www.elasticsearch.org/guide/
            </pre>
            </summary>
        </member>
        <member name="T:Nest.ListBenchmarksRequest">
            <summary>Request parameters for ListBenchmarks
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-benchmark.html
            </pre>
            </summary>
        </member>
        <member name="T:Nest.MultiGetRequest">
            <summary>Request parameters for MgetGet
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-get.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.MultiGetRequest.Fields">
            <summary>A comma-separated list of fields to return in the response</summary>
        </member>
        <member name="P:Nest.MultiGetRequest.Preference">
            <summary>Specify the node or shard the operation should be performed on (default: random)</summary>
        </member>
        <member name="P:Nest.MultiGetRequest.Realtime">
            <summary>Specify whether to perform the operation in realtime or search mode</summary>
        </member>
        <member name="P:Nest.MultiGetRequest.Refresh">
            <summary>Refresh the shard containing the document before performing the operation</summary>
        </member>
        <member name="P:Nest.MultiGetRequest.SourceEnabled">
            <summary>True or false to return the _source field or not, or a list of fields to return</summary>
        </member>
        <member name="P:Nest.MultiGetRequest.SourceExclude">
            <summary>A list of fields to exclude from the returned _source field</summary>
        </member>
        <member name="P:Nest.MultiGetRequest.SourceInclude">
            <summary>A list of fields to extract and return from the _source field</summary>
        </member>
        <member name="T:Nest.MoreLikeThisRequest`1">
            <summary>Request parameters for MltGet
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-more-like-this.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.MoreLikeThisRequest`1.BoostTerms">
            <summary>The boost factor</summary>
        </member>
        <member name="P:Nest.MoreLikeThisRequest`1.MaxDocFreq">
            <summary>The word occurrence frequency as count: words with higher occurrence in the corpus will be ignored</summary>
        </member>
        <member name="P:Nest.MoreLikeThisRequest`1.MaxQueryTerms">
            <summary>The maximum query terms to be included in the generated query</summary>
        </member>
        <member name="P:Nest.MoreLikeThisRequest`1.MaxWordLength">
            <summary>The minimum length of the word: longer words will be ignored</summary>
        </member>
        <member name="P:Nest.MoreLikeThisRequest`1.MinDocFreq">
            <summary>The word occurrence frequency as count: words with lower occurrence in the corpus will be ignored</summary>
        </member>
        <member name="P:Nest.MoreLikeThisRequest`1.MinTermFreq">
            <summary>The term frequency as percent: terms with lower occurence in the source document will be ignored</summary>
        </member>
        <member name="P:Nest.MoreLikeThisRequest`1.MinWordLength">
            <summary>The minimum length of the word: shorter words will be ignored</summary>
        </member>
        <member name="P:Nest.MoreLikeThisRequest`1.MltFields">
            <summary>Specific fields to perform the query against</summary>
        </member>
        <member name="P:Nest.MoreLikeThisRequest`1.PercentTermsToMatch">
            <summary>How many terms have to match in order to consider the document a match (default: 0.3)</summary>
        </member>
        <member name="P:Nest.MoreLikeThisRequest`1.Routing">
            <summary>Specific routing value</summary>
        </member>
        <member name="P:Nest.MoreLikeThisRequest`1.SearchFrom">
            <summary>The offset from which to return results</summary>
        </member>
        <member name="P:Nest.MoreLikeThisRequest`1.SearchIndices">
            <summary>A comma-separated list of indices to perform the query against (default: the index containing the document)</summary>
        </member>
        <member name="P:Nest.MoreLikeThisRequest`1.SearchQueryHint">
            <summary>The search query hint</summary>
        </member>
        <member name="P:Nest.MoreLikeThisRequest`1.SearchScroll">
            <summary>A scroll search request definition</summary>
        </member>
        <member name="P:Nest.MoreLikeThisRequest`1.SearchSize">
            <summary>The number of documents to return (default: 10)</summary>
        </member>
        <member name="P:Nest.MoreLikeThisRequest`1.SearchSource">
            <summary>A specific search request definition (instead of using the request body)</summary>
        </member>
        <member name="P:Nest.MoreLikeThisRequest`1.SearchType">
            <summary>Specific search type (eg. `dfs_then_fetch`, `count`, etc)</summary>
        </member>
        <member name="P:Nest.MoreLikeThisRequest`1.SearchTypes">
            <summary>A comma-separated list of types to perform the query against (default: the same type as the document)</summary>
        </member>
        <member name="P:Nest.MoreLikeThisRequest`1.StopWords">
            <summary>A list of stop words to be ignored</summary>
        </member>
        <member name="T:Nest.MpercolateRequest">
            <summary>Request parameters for MpercolateGet
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.MpercolateRequest.IgnoreUnavailable">
            <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
        </member>
        <member name="P:Nest.MpercolateRequest.AllowNoIndices">
            <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
        </member>
        <member name="P:Nest.MpercolateRequest.ExpandWildcards">
            <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        </member>
        <member name="T:Nest.MultiSearchRequest">
            <summary>Request parameters for MsearchGet
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-multi-search.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.MultiSearchRequest.SearchType">
            <summary>Search operation type</summary>
        </member>
        <member name="T:Nest.MultiTermVectorsRequest">
            <summary>Request parameters for MtermvectorsGet
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-termvectors.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.MultiTermVectorsRequest.TermStatistics">
            <summary>Specifies if total term frequency and document frequency should be returned. Applies to all returned documents unless otherwise specified in body &quot;params&quot; or &quot;docs&quot;.</summary>
        </member>
        <member name="P:Nest.MultiTermVectorsRequest.FieldStatistics">
            <summary>Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned. Applies to all returned documents unless otherwise specified in body &quot;params&quot; or &quot;docs&quot;.</summary>
        </member>
        <member name="P:Nest.MultiTermVectorsRequest.Fields">
            <summary>A comma-separated list of fields to return. Applies to all returned documents unless otherwise specified in body &quot;params&quot; or &quot;docs&quot;.</summary>
        </member>
        <member name="P:Nest.MultiTermVectorsRequest.Offsets">
            <summary>Specifies if term offsets should be returned. Applies to all returned documents unless otherwise specified in body &quot;params&quot; or &quot;docs&quot;.</summary>
        </member>
        <member name="P:Nest.MultiTermVectorsRequest.Positions">
            <summary>Specifies if term positions should be returned. Applies to all returned documents unless otherwise specified in body &quot;params&quot; or &quot;docs&quot;.</summary>
        </member>
        <member name="P:Nest.MultiTermVectorsRequest.Payloads">
            <summary>Specifies if term payloads should be returned. Applies to all returned documents unless otherwise specified in body &quot;params&quot; or &quot;docs&quot;.</summary>
        </member>
        <member name="P:Nest.MultiTermVectorsRequest.Preference">
            <summary>Specify the node or shard the operation should be performed on (default: random) .Applies to all returned documents unless otherwise specified in body &quot;params&quot; or &quot;docs&quot;.</summary>
        </member>
        <member name="P:Nest.MultiTermVectorsRequest.Routing">
            <summary>Specific routing value. Applies to all returned documents unless otherwise specified in body &quot;params&quot; or &quot;docs&quot;.</summary>
        </member>
        <member name="P:Nest.MultiTermVectorsRequest.Parent">
            <summary>Parent id of documents. Applies to all returned documents unless otherwise specified in body &quot;params&quot; or &quot;docs&quot;.</summary>
        </member>
        <member name="T:Nest.NodesHotThreadsRequest">
            <summary>Request parameters for NodesHotThreadsForAll
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-hot-threads.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.NodesHotThreadsRequest.Interval">
            <summary>The interval for the second sampling of threads</summary>
        </member>
        <member name="P:Nest.NodesHotThreadsRequest.Snapshots">
            <summary>Number of samples of thread stacktrace (default: 10)</summary>
        </member>
        <member name="P:Nest.NodesHotThreadsRequest.Threads">
            <summary>Specify the number of threads to provide information for (default: 3)</summary>
        </member>
        <member name="P:Nest.NodesHotThreadsRequest.ThreadType">
            <summary>The type to sample (default: cpu)</summary>
        </member>
        <member name="T:Nest.NodesInfoRequest">
            <summary>Request parameters for NodesInfoForAll
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-info.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.NodesInfoRequest.FlatSettings">
            <summary>Return settings in flat format (default: false)</summary>
        </member>
        <member name="P:Nest.NodesInfoRequest.Human">
            <summary>Whether to return time and byte values in human-readable format.</summary>
        </member>
        <member name="T:Nest.NodesShutdownRequest">
            <summary>Request parameters for NodesShutdownForAll
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-shutdown.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.NodesShutdownRequest.Delay">
            <summary>Set the delay for the operation (default: 1s)</summary>
        </member>
        <member name="P:Nest.NodesShutdownRequest.Exit">
            <summary>Exit the JVM as well (default: true)</summary>
        </member>
        <member name="T:Nest.NodesStatsRequest">
            <summary>Request parameters for NodesStatsForAll
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-stats.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.NodesStatsRequest.CompletionFields">
            <summary>A comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards)</summary>
        </member>
        <member name="P:Nest.NodesStatsRequest.FielddataFields">
            <summary>A comma-separated list of fields for `fielddata` index metric (supports wildcards)</summary>
        </member>
        <member name="P:Nest.NodesStatsRequest.Fields">
            <summary>A comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards)</summary>
        </member>
        <member name="P:Nest.NodesStatsRequest.Groups">
            <summary>A comma-separated list of search groups for `search` index metric</summary>
        </member>
        <member name="P:Nest.NodesStatsRequest.Human">
            <summary>Whether to return time and byte values in human-readable format.</summary>
        </member>
        <member name="P:Nest.NodesStatsRequest.Level">
            <summary>Return indices stats aggregated at node, index or shard level</summary>
        </member>
        <member name="P:Nest.NodesStatsRequest.Types">
            <summary>A comma-separated list of document types for the `indexing` index metric</summary>
        </member>
        <member name="T:Nest.PercolateRequest`1">
            <summary>Request parameters for PercolateGet
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.PercolateRequest`1.Routing">
            <summary>A comma-separated list of specific routing values</summary>
        </member>
        <member name="P:Nest.PercolateRequest`1.Preference">
            <summary>Specify the node or shard the operation should be performed on (default: random)</summary>
        </member>
        <member name="P:Nest.PercolateRequest`1.IgnoreUnavailable">
            <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
        </member>
        <member name="P:Nest.PercolateRequest`1.AllowNoIndices">
            <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
        </member>
        <member name="P:Nest.PercolateRequest`1.ExpandWildcards">
            <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        </member>
        <member name="P:Nest.PercolateRequest`1.PercolateIndex">
            <summary>The index to percolate the document into. Defaults to index.</summary>
        </member>
        <member name="P:Nest.PercolateRequest`1.PercolateType">
            <summary>The type to percolate document into. Defaults to type.</summary>
        </member>
        <member name="P:Nest.PercolateRequest`1.Version">
            <summary>Explicit version number for concurrency control</summary>
        </member>
        <member name="P:Nest.PercolateRequest`1.VersionType">
            <summary>Specific version type</summary>
        </member>
        <member name="T:Nest.PingRequest">
            <summary>Request parameters for Ping
            <pre>
            http://www.elasticsearch.org/guide/
            </pre>
            </summary>
        </member>
        <member name="T:Nest.ScrollRequest">
            <summary>Request parameters for ScrollGet
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-request-scroll.html
            </pre>
            </summary>
        </member>
        <member name="T:Nest.SearchRequest`1">
            <summary>Request parameters for SearchGet
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-search.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.SearchRequest`1.Analyzer">
            <summary>The analyzer to use for the query string</summary>
        </member>
        <member name="P:Nest.SearchRequest`1.AnalyzeWildcard">
            <summary>Specify whether wildcard and prefix queries should be analyzed (default: false)</summary>
        </member>
        <member name="P:Nest.SearchRequest`1.DefaultOperator">
            <summary>The default operator for query string query (AND or OR)</summary>
        </member>
        <member name="P:Nest.SearchRequest`1.Df">
            <summary>The field to use as default where no field prefix is given in the query string</summary>
        </member>
        <member name="P:Nest.SearchRequest`1.IgnoreUnavailable">
            <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
        </member>
        <member name="P:Nest.SearchRequest`1.AllowNoIndices">
            <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
        </member>
        <member name="P:Nest.SearchRequest`1.ExpandWildcards">
            <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        </member>
        <member name="P:Nest.SearchRequest`1.Lenient">
            <summary>Specify whether format-based query failures (such as providing text to a numeric field) should be ignored</summary>
        </member>
        <member name="P:Nest.SearchRequest`1.LowercaseExpandedTerms">
            <summary>Specify whether query terms should be lowercased</summary>
        </member>
        <member name="P:Nest.SearchRequest`1.Preference">
            <summary>Specify the node or shard the operation should be performed on (default: random)</summary>
        </member>
        <member name="P:Nest.SearchRequest`1.Routing">
            <summary>A comma-separated list of specific routing values</summary>
        </member>
        <member name="P:Nest.SearchRequest`1.Scroll">
            <summary>Specify how long a consistent view of the index should be maintained for scrolled search</summary>
        </member>
        <member name="P:Nest.SearchRequest`1.SearchType">
            <summary>Search operation type</summary>
        </member>
        <member name="P:Nest.SearchRequest`1.Stats">
            <summary>Specific &#39;tag&#39; of the request for logging and statistical purposes</summary>
        </member>
        <member name="P:Nest.SearchRequest`1.SuggestField">
            <summary>Specify which field to use for suggestions</summary>
        </member>
        <member name="P:Nest.SearchRequest`1.SuggestMode">
            <summary>Specify suggest mode</summary>
        </member>
        <member name="P:Nest.SearchRequest`1.SuggestSize">
            <summary>How many suggestions to return in response</summary>
        </member>
        <member name="P:Nest.SearchRequest`1.SuggestText">
            <summary>The source text for which the suggestions should be returned</summary>
        </member>
        <member name="T:Nest.SearchShardsRequest">
            <summary>Request parameters for SearchShardsGet
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-shards.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.SearchShardsRequest.Preference">
            <summary>Specify the node or shard the operation should be performed on (default: random)</summary>
        </member>
        <member name="P:Nest.SearchShardsRequest.Routing">
            <summary>Specific routing value</summary>
        </member>
        <member name="P:Nest.SearchShardsRequest.Local">
            <summary>Return local information, do not retrieve the state from master node (default: false)</summary>
        </member>
        <member name="P:Nest.SearchShardsRequest.IgnoreUnavailable">
            <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
        </member>
        <member name="P:Nest.SearchShardsRequest.AllowNoIndices">
            <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
        </member>
        <member name="P:Nest.SearchShardsRequest.ExpandWildcards">
            <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        </member>
        <member name="T:Nest.SearchTemplateRequest">
            <summary>Request parameters for SearchTemplateGet
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-template.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.SearchTemplateRequest.IgnoreUnavailable">
            <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
        </member>
        <member name="P:Nest.SearchTemplateRequest.AllowNoIndices">
            <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
        </member>
        <member name="P:Nest.SearchTemplateRequest.ExpandWildcards">
            <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        </member>
        <member name="P:Nest.SearchTemplateRequest.Preference">
            <summary>Specify the node or shard the operation should be performed on (default: random)</summary>
        </member>
        <member name="P:Nest.SearchTemplateRequest.Routing">
            <summary>A comma-separated list of specific routing values</summary>
        </member>
        <member name="P:Nest.SearchTemplateRequest.Scroll">
            <summary>Specify how long a consistent view of the index should be maintained for scrolled search</summary>
        </member>
        <member name="P:Nest.SearchTemplateRequest.SearchType">
            <summary>Search operation type</summary>
        </member>
        <member name="T:Nest.SnapshotRequest">
            <summary>Request parameters for SnapshotCreate
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.SnapshotRequest.MasterTimeout">
            <summary>Explicit operation timeout for connection to master node</summary>
        </member>
        <member name="P:Nest.SnapshotRequest.WaitForCompletion">
            <summary>Should this request wait until the operation has completed before returning</summary>
        </member>
        <member name="T:Nest.CreateRepositoryRequest">
            <summary>Request parameters for SnapshotCreateRepository
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.CreateRepositoryRequest.MasterTimeout">
            <summary>Explicit operation timeout for connection to master node</summary>
        </member>
        <member name="P:Nest.CreateRepositoryRequest.Timeout">
            <summary>Explicit operation timeout</summary>
        </member>
        <member name="T:Nest.DeleteRepositoryRequest">
            <summary>Request parameters for SnapshotDeleteRepository
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.DeleteRepositoryRequest.MasterTimeout">
            <summary>Explicit operation timeout for connection to master node</summary>
        </member>
        <member name="P:Nest.DeleteRepositoryRequest.Timeout">
            <summary>Explicit operation timeout</summary>
        </member>
        <member name="T:Nest.GetSnapshotRequest">
            <summary>Request parameters for SnapshotGet
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.GetSnapshotRequest.MasterTimeout">
            <summary>Explicit operation timeout for connection to master node</summary>
        </member>
        <member name="T:Nest.SnapshotGetRepositoryRequest">
            <summary>Request parameters for SnapshotGetRepository
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.SnapshotGetRepositoryRequest.MasterTimeout">
            <summary>Explicit operation timeout for connection to master node</summary>
        </member>
        <member name="P:Nest.SnapshotGetRepositoryRequest.Local">
            <summary>Return local information, do not retrieve the state from master node (default: false)</summary>
        </member>
        <member name="T:Nest.RestoreRequest">
            <summary>Request parameters for SnapshotRestore
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.RestoreRequest.MasterTimeout">
            <summary>Explicit operation timeout for connection to master node</summary>
        </member>
        <member name="P:Nest.RestoreRequest.WaitForCompletion">
            <summary>Should this request wait until the operation has completed before returning</summary>
        </member>
        <member name="T:Nest.SnapshotStatusRequest">
            <summary>Request parameters for SnapshotStatus
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/modules-snapshots.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.SnapshotStatusRequest.MasterTimeout">
            <summary>Explicit operation timeout for connection to master node</summary>
        </member>
        <member name="T:Nest.SuggestRequest">
            <summary>Request parameters for Suggest
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-search.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.SuggestRequest.IgnoreUnavailable">
            <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
        </member>
        <member name="P:Nest.SuggestRequest.AllowNoIndices">
            <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
        </member>
        <member name="P:Nest.SuggestRequest.ExpandWildcards">
            <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        </member>
        <member name="P:Nest.SuggestRequest.Preference">
            <summary>Specify the node or shard the operation should be performed on (default: random)</summary>
        </member>
        <member name="P:Nest.SuggestRequest.Routing">
            <summary>Specific routing value</summary>
        </member>
        <member name="P:Nest.SuggestRequest.Source">
            <summary>The URL-encoded request definition (instead of using request body)</summary>
        </member>
        <member name="T:Nest.TermvectorRequest`1">
            <summary>Request parameters for TermvectorGet
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-termvectors.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.TermvectorRequest`1.TermStatistics">
            <summary>Specifies if total term frequency and document frequency should be returned.</summary>
        </member>
        <member name="P:Nest.TermvectorRequest`1.FieldStatistics">
            <summary>Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned.</summary>
        </member>
        <member name="P:Nest.TermvectorRequest`1.Fields">
            <summary>A comma-separated list of fields to return.</summary>
        </member>
        <member name="P:Nest.TermvectorRequest`1.Offsets">
            <summary>Specifies if term offsets should be returned.</summary>
        </member>
        <member name="P:Nest.TermvectorRequest`1.Positions">
            <summary>Specifies if term positions should be returned.</summary>
        </member>
        <member name="P:Nest.TermvectorRequest`1.Payloads">
            <summary>Specifies if term payloads should be returned.</summary>
        </member>
        <member name="P:Nest.TermvectorRequest`1.Preference">
            <summary>Specify the node or shard the operation should be performed on (default: random).</summary>
        </member>
        <member name="P:Nest.TermvectorRequest`1.Routing">
            <summary>Specific routing value.</summary>
        </member>
        <member name="P:Nest.TermvectorRequest`1.Parent">
            <summary>Parent id of documents.</summary>
        </member>
        <member name="T:Nest.UpdateRequest`2">
            <summary>Request parameters for Update
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-update.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.UpdateRequest`2.Consistency">
            <summary>Explicit write consistency setting for the operation</summary>
        </member>
        <member name="P:Nest.UpdateRequest`2.Lang">
            <summary>The script language (default: mvel)</summary>
        </member>
        <member name="P:Nest.UpdateRequest`2.Parent">
            <summary>ID of the parent document</summary>
        </member>
        <member name="P:Nest.UpdateRequest`2.Refresh">
            <summary>Refresh the index after performing the operation</summary>
        </member>
        <member name="P:Nest.UpdateRequest`2.Replication">
            <summary>Specific replication type</summary>
        </member>
        <member name="P:Nest.UpdateRequest`2.RetryOnConflict">
            <summary>Specify how many times should the operation be retried when a conflict occurs (default: 0)</summary>
        </member>
        <member name="P:Nest.UpdateRequest`2.Routing">
            <summary>Specific routing value</summary>
        </member>
        <member name="P:Nest.UpdateRequest`2.ScriptQueryString">
            <summary>The URL-encoded script definition (instead of using request body)</summary>
        </member>
        <member name="P:Nest.UpdateRequest`2.Timeout">
            <summary>Explicit operation timeout</summary>
        </member>
        <member name="P:Nest.UpdateRequest`2.Timestamp">
            <summary>Explicit timestamp for the document</summary>
        </member>
        <member name="P:Nest.UpdateRequest`2.Ttl">
            <summary>Expiration time for the document</summary>
        </member>
        <member name="P:Nest.UpdateRequest`2.Version">
            <summary>Explicit version number for concurrency control</summary>
        </member>
        <member name="P:Nest.UpdateRequest`2.VersionType">
            <summary>Specific version type</summary>
        </member>
        <member name="T:Nest.CountRequest">
            <summary>Request parameters for Count
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-count.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.CountRequest.IgnoreUnavailable">
            <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
        </member>
        <member name="P:Nest.CountRequest.AllowNoIndices">
            <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
        </member>
        <member name="P:Nest.CountRequest.ExpandWildcards">
            <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        </member>
        <member name="P:Nest.CountRequest.MinScore">
            <summary>Include only documents with a specific `_score` value in the result</summary>
        </member>
        <member name="P:Nest.CountRequest.Preference">
            <summary>Specify the node or shard the operation should be performed on (default: random)</summary>
        </member>
        <member name="P:Nest.CountRequest.Routing">
            <summary>Specific routing value</summary>
        </member>
        <member name="P:Nest.CountRequest.Source">
            <summary>The URL-encoded query definition (instead of using the request body)</summary>
        </member>
        <member name="T:Nest.DeleteRequest">
            <summary>Request parameters for Delete
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-delete.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.DeleteRequest.Consistency">
            <summary>Specific write consistency setting for the operation</summary>
        </member>
        <member name="P:Nest.DeleteRequest.Parent">
            <summary>ID of parent document</summary>
        </member>
        <member name="P:Nest.DeleteRequest.Refresh">
            <summary>Refresh the index after performing the operation</summary>
        </member>
        <member name="P:Nest.DeleteRequest.Replication">
            <summary>Specific replication type</summary>
        </member>
        <member name="P:Nest.DeleteRequest.Routing">
            <summary>Specific routing value</summary>
        </member>
        <member name="P:Nest.DeleteRequest.Timeout">
            <summary>Explicit operation timeout</summary>
        </member>
        <member name="P:Nest.DeleteRequest.Version">
            <summary>Explicit version number for concurrency control</summary>
        </member>
        <member name="P:Nest.DeleteRequest.VersionType">
            <summary>Specific version type</summary>
        </member>
        <member name="T:Nest.DeleteByQueryRequest">
            <summary>Request parameters for DeleteByQuery
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-delete-by-query.html
            </pre>
            </summary>
        </member>
        <member name="M:Nest.DeleteByQueryRequest.#ctor">
            <summary>
            Sents a delete query to _all indices
            </summary>
        </member>
        <member name="P:Nest.DeleteByQueryRequest.Analyzer">
            <summary>The analyzer to use for the query string</summary>
        </member>
        <member name="P:Nest.DeleteByQueryRequest.Consistency">
            <summary>Specific write consistency setting for the operation</summary>
        </member>
        <member name="P:Nest.DeleteByQueryRequest.DefaultOperator">
            <summary>The default operator for query string query (AND or OR)</summary>
        </member>
        <member name="P:Nest.DeleteByQueryRequest.Df">
            <summary>The field to use as default where no field prefix is given in the query string</summary>
        </member>
        <member name="P:Nest.DeleteByQueryRequest.IgnoreUnavailable">
            <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
        </member>
        <member name="P:Nest.DeleteByQueryRequest.AllowNoIndices">
            <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
        </member>
        <member name="P:Nest.DeleteByQueryRequest.ExpandWildcards">
            <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        </member>
        <member name="P:Nest.DeleteByQueryRequest.Replication">
            <summary>Specific replication type</summary>
        </member>
        <member name="P:Nest.DeleteByQueryRequest.Q">
            <summary>Query in the Lucene query string syntax</summary>
        </member>
        <member name="P:Nest.DeleteByQueryRequest.Routing">
            <summary>Specific routing value</summary>
        </member>
        <member name="P:Nest.DeleteByQueryRequest.Source">
            <summary>The URL-encoded query definition (instead of using the request body)</summary>
        </member>
        <member name="P:Nest.DeleteByQueryRequest.Timeout">
            <summary>Explicit operation timeout</summary>
        </member>
        <member name="T:Nest.DocumentExistsRequest">
            <summary>Request parameters for Exists
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-get.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.DocumentExistsRequest.Parent">
            <summary>The ID of the parent document</summary>
        </member>
        <member name="P:Nest.DocumentExistsRequest.Preference">
            <summary>Specify the node or shard the operation should be performed on (default: random)</summary>
        </member>
        <member name="P:Nest.DocumentExistsRequest.Realtime">
            <summary>Specify whether to perform the operation in realtime or search mode</summary>
        </member>
        <member name="P:Nest.DocumentExistsRequest.Refresh">
            <summary>Refresh the shard containing the document before performing the operation</summary>
        </member>
        <member name="P:Nest.DocumentExistsRequest.Routing">
            <summary>Specific routing value</summary>
        </member>
        <member name="T:Nest.GetRequest">
            <summary>Request parameters for Get
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-get.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.GetRequest.Fields">
            <summary>A comma-separated list of fields to return in the response</summary>
        </member>
        <member name="P:Nest.GetRequest.Parent">
            <summary>The ID of the parent document</summary>
        </member>
        <member name="P:Nest.GetRequest.Preference">
            <summary>Specify the node or shard the operation should be performed on (default: random)</summary>
        </member>
        <member name="P:Nest.GetRequest.Realtime">
            <summary>Specify whether to perform the operation in realtime or search mode</summary>
        </member>
        <member name="P:Nest.GetRequest.Refresh">
            <summary>Refresh the shard containing the document before performing the operation</summary>
        </member>
        <member name="P:Nest.GetRequest.Routing">
            <summary>Specific routing value</summary>
        </member>
        <member name="P:Nest.GetRequest.SourceEnabled">
            <summary>True or false to return the _source field or not, or a list of fields to return</summary>
        </member>
        <member name="P:Nest.GetRequest.SourceExclude">
            <summary>A list of fields to exclude from the returned _source field</summary>
        </member>
        <member name="P:Nest.GetRequest.SourceInclude">
            <summary>A list of fields to extract and return from the _source field</summary>
        </member>
        <member name="P:Nest.GetRequest.Version">
            <summary>Explicit version number for concurrency control</summary>
        </member>
        <member name="P:Nest.GetRequest.VersionType">
            <summary>Specific version type</summary>
        </member>
        <member name="T:Nest.SourceRequest">
            <summary>Request parameters for GetSource
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-get.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.SourceRequest.Parent">
            <summary>The ID of the parent document</summary>
        </member>
        <member name="P:Nest.SourceRequest.Preference">
            <summary>Specify the node or shard the operation should be performed on (default: random)</summary>
        </member>
        <member name="P:Nest.SourceRequest.Realtime">
            <summary>Specify whether to perform the operation in realtime or search mode</summary>
        </member>
        <member name="P:Nest.SourceRequest.Refresh">
            <summary>Refresh the shard containing the document before performing the operation</summary>
        </member>
        <member name="P:Nest.SourceRequest.Routing">
            <summary>Specific routing value</summary>
        </member>
        <member name="P:Nest.SourceRequest.SourceEnabled">
            <summary>True or false to return the _source field or not, or a list of fields to return</summary>
        </member>
        <member name="P:Nest.SourceRequest.SourceExclude">
            <summary>A list of fields to exclude from the returned _source field</summary>
        </member>
        <member name="P:Nest.SourceRequest.SourceInclude">
            <summary>A list of fields to extract and return from the _source field</summary>
        </member>
        <member name="P:Nest.SourceRequest.Version">
            <summary>Explicit version number for concurrency control</summary>
        </member>
        <member name="P:Nest.SourceRequest.VersionType">
            <summary>Specific version type</summary>
        </member>
        <member name="T:Nest.DeleteMappingRequest">
            <summary>Request parameters for IndicesDeleteMapping
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-delete-mapping.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.DeleteMappingRequest.MasterTimeout">
            <summary>Specify timeout for connection to master</summary>
        </member>
        <member name="T:Nest.GetMappingRequest">
            <summary>Request parameters for IndicesGetMappingForAll
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-mapping.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.GetMappingRequest.IgnoreUnavailable">
            <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
        </member>
        <member name="P:Nest.GetMappingRequest.AllowNoIndices">
            <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
        </member>
        <member name="P:Nest.GetMappingRequest.ExpandWildcards">
            <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        </member>
        <member name="P:Nest.GetMappingRequest.Local">
            <summary>Return local information, do not retrieve the state from master node (default: false)</summary>
        </member>
        <member name="T:Nest.PutMappingRequest">
            <summary>Request parameters for IndicesPutMapping
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-put-mapping.html
            </pre>
            </summary>
        </member>
        <member name="M:Nest.PutMappingRequest.#ctor(Nest.TypeNameMarker)">
            <summary>
            Calls putmapping on /_all/{type}
            </summary>
        </member>
        <member name="M:Nest.PutMappingRequest.#ctor(System.Collections.Generic.IEnumerable{Nest.IndexNameMarker},Nest.TypeNameMarker)">
            <summary>
            Calls putmapping on /{indices}/{type}
            </summary>
        </member>
        <member name="M:Nest.PutMappingRequest.#ctor(Nest.IndexNameMarker,Nest.TypeNameMarker)">
            <summary>
            Calls putmapping on /{index}/{type}
            </summary>
        </member>
        <member name="P:Nest.PutMappingRequest.IgnoreConflicts">
            <summary>Specify whether to ignore conflicts while updating the mapping (default: false)</summary>
        </member>
        <member name="P:Nest.PutMappingRequest.Timeout">
            <summary>Explicit operation timeout</summary>
        </member>
        <member name="P:Nest.PutMappingRequest.MasterTimeout">
            <summary>Specify timeout for connection to master</summary>
        </member>
        <member name="P:Nest.PutMappingRequest.IgnoreUnavailable">
            <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
        </member>
        <member name="P:Nest.PutMappingRequest.AllowNoIndices">
            <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
        </member>
        <member name="P:Nest.PutMappingRequest.ExpandWildcards">
            <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        </member>
        <member name="T:Nest.ValidateQueryRequest">
            <summary>Request parameters for IndicesValidateQueryGetForAll
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-validate.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.ValidateQueryRequest.Explain">
            <summary>Return detailed information about the error</summary>
        </member>
        <member name="P:Nest.ValidateQueryRequest.IgnoreUnavailable">
            <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
        </member>
        <member name="P:Nest.ValidateQueryRequest.AllowNoIndices">
            <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
        </member>
        <member name="P:Nest.ValidateQueryRequest.ExpandWildcards">
            <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        </member>
        <member name="P:Nest.ValidateQueryRequest.OperationThreading">
            <summary>TODO: ?</summary>
        </member>
        <member name="P:Nest.ValidateQueryRequest.Source">
            <summary>The URL-encoded query definition (instead of using the request body)</summary>
        </member>
        <member name="P:Nest.ValidateQueryRequest.Q">
            <summary>Query in the Lucene query string syntax</summary>
        </member>
        <member name="T:Nest.MoreLikeThisRequest">
            <summary>Request parameters for MltGet
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-more-like-this.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.MoreLikeThisRequest.BoostTerms">
            <summary>The boost factor</summary>
        </member>
        <member name="P:Nest.MoreLikeThisRequest.MaxDocFreq">
            <summary>The word occurrence frequency as count: words with higher occurrence in the corpus will be ignored</summary>
        </member>
        <member name="P:Nest.MoreLikeThisRequest.MaxQueryTerms">
            <summary>The maximum query terms to be included in the generated query</summary>
        </member>
        <member name="P:Nest.MoreLikeThisRequest.MaxWordLength">
            <summary>The minimum length of the word: longer words will be ignored</summary>
        </member>
        <member name="P:Nest.MoreLikeThisRequest.MinDocFreq">
            <summary>The word occurrence frequency as count: words with lower occurrence in the corpus will be ignored</summary>
        </member>
        <member name="P:Nest.MoreLikeThisRequest.MinTermFreq">
            <summary>The term frequency as percent: terms with lower occurence in the source document will be ignored</summary>
        </member>
        <member name="P:Nest.MoreLikeThisRequest.MinWordLength">
            <summary>The minimum length of the word: shorter words will be ignored</summary>
        </member>
        <member name="P:Nest.MoreLikeThisRequest.MltFields">
            <summary>Specific fields to perform the query against</summary>
        </member>
        <member name="P:Nest.MoreLikeThisRequest.PercentTermsToMatch">
            <summary>How many terms have to match in order to consider the document a match (default: 0.3)</summary>
        </member>
        <member name="P:Nest.MoreLikeThisRequest.Routing">
            <summary>Specific routing value</summary>
        </member>
        <member name="P:Nest.MoreLikeThisRequest.SearchFrom">
            <summary>The offset from which to return results</summary>
        </member>
        <member name="P:Nest.MoreLikeThisRequest.SearchIndices">
            <summary>A comma-separated list of indices to perform the query against (default: the index containing the document)</summary>
        </member>
        <member name="P:Nest.MoreLikeThisRequest.SearchQueryHint">
            <summary>The search query hint</summary>
        </member>
        <member name="P:Nest.MoreLikeThisRequest.SearchScroll">
            <summary>A scroll search request definition</summary>
        </member>
        <member name="P:Nest.MoreLikeThisRequest.SearchSize">
            <summary>The number of documents to return (default: 10)</summary>
        </member>
        <member name="P:Nest.MoreLikeThisRequest.SearchSource">
            <summary>A specific search request definition (instead of using the request body)</summary>
        </member>
        <member name="P:Nest.MoreLikeThisRequest.SearchType">
            <summary>Specific search type (eg. `dfs_then_fetch`, `count`, etc)</summary>
        </member>
        <member name="P:Nest.MoreLikeThisRequest.SearchTypes">
            <summary>A comma-separated list of types to perform the query against (default: the same type as the document)</summary>
        </member>
        <member name="P:Nest.MoreLikeThisRequest.StopWords">
            <summary>A list of stop words to be ignored</summary>
        </member>
        <member name="T:Nest.SearchRequest">
            <summary>Request parameters for SearchGet
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-search.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.SearchRequest.Analyzer">
            <summary>The analyzer to use for the query string</summary>
        </member>
        <member name="P:Nest.SearchRequest.AnalyzeWildcard">
            <summary>Specify whether wildcard and prefix queries should be analyzed (default: false)</summary>
        </member>
        <member name="P:Nest.SearchRequest.DefaultOperator">
            <summary>The default operator for query string query (AND or OR)</summary>
        </member>
        <member name="P:Nest.SearchRequest.Df">
            <summary>The field to use as default where no field prefix is given in the query string</summary>
        </member>
        <member name="P:Nest.SearchRequest.IgnoreUnavailable">
            <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
        </member>
        <member name="P:Nest.SearchRequest.AllowNoIndices">
            <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
        </member>
        <member name="P:Nest.SearchRequest.ExpandWildcards">
            <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        </member>
        <member name="P:Nest.SearchRequest.Lenient">
            <summary>Specify whether format-based query failures (such as providing text to a numeric field) should be ignored</summary>
        </member>
        <member name="P:Nest.SearchRequest.LowercaseExpandedTerms">
            <summary>Specify whether query terms should be lowercased</summary>
        </member>
        <member name="P:Nest.SearchRequest.Preference">
            <summary>Specify the node or shard the operation should be performed on (default: random)</summary>
        </member>
        <member name="P:Nest.SearchRequest.Routing">
            <summary>A comma-separated list of specific routing values</summary>
        </member>
        <member name="P:Nest.SearchRequest.Scroll">
            <summary>Specify how long a consistent view of the index should be maintained for scrolled search</summary>
        </member>
        <member name="P:Nest.SearchRequest.SearchType">
            <summary>Search operation type</summary>
        </member>
        <member name="P:Nest.SearchRequest.Stats">
            <summary>Specific &#39;tag&#39; of the request for logging and statistical purposes</summary>
        </member>
        <member name="P:Nest.SearchRequest.SuggestField">
            <summary>Specify which field to use for suggestions</summary>
        </member>
        <member name="P:Nest.SearchRequest.SuggestMode">
            <summary>Specify suggest mode</summary>
        </member>
        <member name="P:Nest.SearchRequest.SuggestSize">
            <summary>How many suggestions to return in response</summary>
        </member>
        <member name="P:Nest.SearchRequest.SuggestText">
            <summary>The source text for which the suggestions should be returned</summary>
        </member>
        <member name="T:Nest.TermvectorRequest">
            <summary>Request parameters for TermvectorGet
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-termvectors.html
            </pre>
            </summary>
        </member>
        <member name="P:Nest.TermvectorRequest.TermStatistics">
            <summary>Specifies if total term frequency and document frequency should be returned.</summary>
        </member>
        <member name="P:Nest.TermvectorRequest.FieldStatistics">
            <summary>Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned.</summary>
        </member>
        <member name="P:Nest.TermvectorRequest.Fields">
            <summary>A comma-separated list of fields to return.</summary>
        </member>
        <member name="P:Nest.TermvectorRequest.Offsets">
            <summary>Specifies if term offsets should be returned.</summary>
        </member>
        <member name="P:Nest.TermvectorRequest.Positions">
            <summary>Specifies if term positions should be returned.</summary>
        </member>
        <member name="P:Nest.TermvectorRequest.Payloads">
            <summary>Specifies if term payloads should be returned.</summary>
        </member>
        <member name="P:Nest.TermvectorRequest.Preference">
            <summary>Specify the node or shard the operation should be performed on (default: random).</summary>
        </member>
        <member name="P:Nest.TermvectorRequest.Routing">
            <summary>Specific routing value.</summary>
        </member>
        <member name="P:Nest.TermvectorRequest.Parent">
            <summary>Parent id of documents.</summary>
        </member>
        <member name="T:Nest.ElasticClient">
            <summary>
            ElasticClient is NEST's strongly typed client which exposes fully mapped elasticsearch endpoints
            </summary>
        </member>
        <member name="M:Nest.IElasticClient.Reindex``1(System.Func{Nest.ReindexDescriptor{``0},Nest.ReindexDescriptor{``0}})">
            <summary>
            Helper method that allows you to reindex from one index into another using SCAN and SCROLL.
            </summary>
            <returns>An IObservable you can subscribe to to listen to the progress of the reindexation process</returns>
        </member>
        <member name="M:Nest.IElasticClient.Scroll``1(Nest.IScrollRequest)">
            <summary>
            A search request can be scrolled by specifying the scroll parameter. 
            <para>The scroll parameter is a time value parameter (for example: scroll=5m), 
            indicating for how long the nodes that participate in the search will maintain relevant resources in
            order to continue and support it.</para><para> 
            This is very similar in its idea to opening a cursor against a database.</para>
            <para> </para><para>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-request-scroll.html</para>
            </summary>
            <typeparam name="T">The type that represents the result hits</typeparam>
            <param name="scrollRequest">A descriptor that describes the scroll operation</param>
            <returns>A query response holding T hits as well as the ScrollId for the next scroll operation</returns>
        </member>
        <member name="M:Nest.IElasticClient.Scroll``1(System.Func{Nest.ScrollDescriptor{``0},Nest.ScrollDescriptor{``0}})">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.ScrollAsync``1(Nest.IScrollRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.ScrollAsync``1(System.Func{Nest.ScrollDescriptor{``0},Nest.ScrollDescriptor{``0}})">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.Update``1(System.Func{Nest.UpdateDescriptor{``0,``0},Nest.UpdateDescriptor{``0,``0}})">
            <summary>
            The update API allows to update a document based on a script provided. 
            <para>The operation gets the document (collocated with the shard) from the index, runs the script 
            (with optional script language and parameters), and index back the result 
            (also allows to delete, or ignore the operation). </para>
            <para>It uses versioning to make sure no updates have happened during the "get" and "reindex".</para>
            <para> </para>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/docs-update.html
            </summary>
            <typeparam name="T">The type to describe the document to be updated</typeparam>
            <param name="updateSelector">a descriptor that describes the update operation</param>
        </member>
        <member name="M:Nest.IElasticClient.Update``2(System.Func{Nest.UpdateDescriptor{``0,``1},Nest.UpdateDescriptor{``0,``1}})">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.Update``1(Nest.IUpdateRequest{``0,``0})">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.Update``2(Nest.IUpdateRequest{``0,``1})">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.UpdateAsync``1(System.Func{Nest.UpdateDescriptor{``0,``0},Nest.UpdateDescriptor{``0,``0}})">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.UpdateAsync``1(Nest.IUpdateRequest{``0,``0})">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.UpdateAsync``2(System.Func{Nest.UpdateDescriptor{``0,``1},Nest.UpdateDescriptor{``0,``1}})">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.UpdateAsync``2(Nest.IUpdateRequest{``0,``1})">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.UpdateSettings(System.Func{Nest.UpdateSettingsDescriptor,Nest.UpdateSettingsDescriptor})">
            <summary>
            Change specific index level settings in real time. Note not all index settings CAN be updated.
            <para> </para>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/indices-update-settings.html
            </summary>
            <param name="updateSettingsSelector">A descriptor that strongly types all the updateable settings</param>
        </member>
        <member name="M:Nest.IElasticClient.UpdateSettings(Nest.IUpdateSettingsRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.UpdateSettingsAsync(System.Func{Nest.UpdateSettingsDescriptor,Nest.UpdateSettingsDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.UpdateSettingsAsync(Nest.IUpdateSettingsRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.Validate``1(System.Func{Nest.ValidateQueryDescriptor{``0},Nest.ValidateQueryDescriptor{``0}})">
            <summary>
            The validate API allows a user to validate a potentially expensive query without executing it.
            <para> </para>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-validate.html
            </summary>
            <typeparam name="T">The type used to describe the query</typeparam>
            <param name="querySelector">A descriptor that describes the query operation</param>
        </member>
        <member name="M:Nest.IElasticClient.Validate(Nest.IValidateQueryRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.ValidateAsync``1(System.Func{Nest.ValidateQueryDescriptor{``0},Nest.ValidateQueryDescriptor{``0}})">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.ValidateAsync(Nest.IValidateQueryRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.OpenIndex(System.Func{Nest.OpenIndexDescriptor,Nest.OpenIndexDescriptor})">
            <summary>
            The open and close index APIs allow to close an index, and later on opening it. 
            A closed index has almost no overhead on the cluster (except for maintaining its metadata), and is blocked 
            for read/write operations. 
            A closed index can be opened which will then go through the normal recovery process.
            <para> </para>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/indices-open-close.html
            </summary>
            <param name="openIndexSelector">A descriptor thata describes the open index operation</param>
        </member>
        <member name="M:Nest.IElasticClient.OpenIndex(Nest.IOpenIndexRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.OpenIndexAsync(System.Func{Nest.OpenIndexDescriptor,Nest.OpenIndexDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.OpenIndexAsync(Nest.IOpenIndexRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.CloseIndex(System.Func{Nest.CloseIndexDescriptor,Nest.CloseIndexDescriptor})">
            <summary>
            The open and close index APIs allow to close an index, and later on opening it. 
            A closed index has almost no overhead on the cluster (except for maintaining its metadata), and is blocked 
            for read/write operations. 
            A closed index can be opened which will then go through the normal recovery process.
            <para> </para>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/indices-open-close.html
            </summary>
            <param name="closeIndexSelector">A descriptor thata describes the close index operation</param>
        </member>
        <member name="M:Nest.IElasticClient.CloseIndex(Nest.ICloseIndexRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.CloseIndexAsync(System.Func{Nest.CloseIndexDescriptor,Nest.CloseIndexDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.CloseIndexAsync(Nest.ICloseIndexRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.Refresh(System.Func{Nest.RefreshDescriptor,Nest.RefreshDescriptor})">
            <summary>
            The refresh API allows to explicitly refresh one or more index, making all operations performed since the last refresh 
            available for search. The (near) real-time capabilities depend on the index engine used. 
            <para> </para>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/indices-refresh.html
            </summary>
            <param name="refreshSelector">A descriptor that describes the parameters for the refresh operation</param>
        </member>
        <member name="M:Nest.IElasticClient.Refresh(Nest.IRefreshRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.RefreshAsync(System.Func{Nest.RefreshDescriptor,Nest.RefreshDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.RefreshAsync(Nest.IRefreshRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.Segments(System.Func{Nest.SegmentsDescriptor,Nest.SegmentsDescriptor})">
            <summary>
            Provide low level segments information that a Lucene index (shard level) is built with. 
            Allows to be used to provide more information on the state of a shard and an index, possibly optimization information,
            data "wasted" on deletes, and so on.
            <para> </para>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/indices-segments.html
            </summary>
            <param name="segmentsSelector">A descriptor that describes the parameters for the segments operation</param>
        </member>
        <member name="M:Nest.IElasticClient.Segments(Nest.ISegmentsRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.SegmentsAsync(System.Func{Nest.SegmentsDescriptor,Nest.SegmentsDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.SegmentsAsync(Nest.ISegmentsRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.ClusterState(System.Func{Nest.ClusterStateDescriptor,Nest.ClusterStateDescriptor})">
            <summary>
            The cluster state API allows to get a comprehensive state information of the whole cluster.
            <para> </para>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/cluster-state.html
            </summary>
            <param name="clusterStateSelector">A descriptor that describes the parameters for the cluster state operation</param>
        </member>
        <member name="M:Nest.IElasticClient.ClusterState(Nest.IClusterStateRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.ClusterStateAsync(System.Func{Nest.ClusterStateDescriptor,Nest.ClusterStateDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.ClusterStateAsync(Nest.IClusterStateRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.PutWarmer(System.String,System.Func{Nest.PutWarmerDescriptor,Nest.PutWarmerDescriptor})">
            <summary>
            Allows to put a warmup search request on a specific index (or indices), with the body composing of a regular 
            search request. Types can be provided as part of the URI if the search request is designed to be run only 
            against the specific types.
            <para> </para>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/indices-warmers.html#warmer-adding
            </summary>
            <param name="name">The name for the warmer that you want to register</param>
            <param name="selector">A descriptor that further describes what the warmer should look like</param>
        </member>
        <member name="M:Nest.IElasticClient.PutWarmer(Nest.IPutWarmerRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.PutWarmerAsync(System.String,System.Func{Nest.PutWarmerDescriptor,Nest.PutWarmerDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.PutWarmerAsync(Nest.IPutWarmerRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.GetWarmer(System.String,System.Func{Nest.GetWarmerDescriptor,Nest.GetWarmerDescriptor})">
            <summary>
            Getting a warmer for specific index (or alias, or several indices) based on its name. 
            <para> </para>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/indices-warmers.html#warmer-retrieving
            </summary>
            <param name="name">The name of the warmer to get</param>
            <param name="selector">An optional selector specifying additional parameters for the get warmer operation</param>
        </member>
        <member name="M:Nest.IElasticClient.GetWarmer(Nest.IGetWarmerRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.GetWarmerAsync(System.String,System.Func{Nest.GetWarmerDescriptor,Nest.GetWarmerDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.GetWarmerAsync(Nest.IGetWarmerRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.DeleteWarmer(System.String,System.Func{Nest.DeleteWarmerDescriptor,Nest.DeleteWarmerDescriptor})">
            <summary>
            Deletes a warmer
            <para> </para>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/indices-warmers.html#removing
            </summary>
            <param name="name">The name of the warmer to delete</param>
            <param name="selector">An optional selector specifying additional parameters for the delete warmer operation</param>
        </member>
        <member name="M:Nest.IElasticClient.DeleteWarmer(Nest.IDeleteWarmerRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.DeleteWarmerAsync(System.String,System.Func{Nest.DeleteWarmerDescriptor,Nest.DeleteWarmerDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.DeleteWarmerAsync(Nest.IDeleteWarmerRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.GetTemplate(System.String,System.Func{Nest.GetTemplateDescriptor,Nest.GetTemplateDescriptor})">
            <summary>
            Gets an index template
            <para> </para>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/indices-templates.html#getting
            </summary>
            <param name="name">The name of the template to get</param>
            <param name="getTemplateSelector">An optional selector specifying additional parameters for the get template operation</param>
        </member>
        <member name="M:Nest.IElasticClient.GetTemplate(Nest.IGetTemplateRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.GetTemplateAsync(System.String,System.Func{Nest.GetTemplateDescriptor,Nest.GetTemplateDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.GetTemplateAsync(Nest.IGetTemplateRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.PutTemplate(System.String,System.Func{Nest.PutTemplateDescriptor,Nest.PutTemplateDescriptor})">
            <summary>
            Index templates allow to define templates that will automatically be applied to new indices created. 
            <para>The templates include both settings and mappings, and a simple pattern template that controls if 
            the template will be applied to the index created. </para>
            <para> </para>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/indices-templates.html
            </summary>
            <param name="name">The name of the template to register</param>
            <param name="putTemplateSelector">An optional selector specifying additional parameters for the put template operation</param>
        </member>
        <member name="M:Nest.IElasticClient.PutTemplate(Nest.IPutTemplateRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.PutTemplateAsync(System.String,System.Func{Nest.PutTemplateDescriptor,Nest.PutTemplateDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.PutTemplateAsync(Nest.IPutTemplateRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.DeleteTemplate(System.String,System.Func{Nest.DeleteTemplateDescriptor,Nest.DeleteTemplateDescriptor})">
            <summary>
            Deletes an index template
            <para> </para>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/indices-templates.html#delete
            </summary>
            <param name="name">The name of the template to delete</param>
            <param name="deleteTemplateSelector">An optional selector specifying additional parameters for the delete template operation</param>
        </member>
        <member name="M:Nest.IElasticClient.DeleteTemplate(Nest.IDeleteTemplateRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.DeleteTemplateAync(System.String,System.Func{Nest.DeleteTemplateDescriptor,Nest.DeleteTemplateDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.DeleteTemplateAync(Nest.IDeleteTemplateRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.UnregisterPercolator``1(System.String,System.Func{Nest.UnregisterPercolatorDescriptor{``0},Nest.UnregisterPercolatorDescriptor{``0}})">
            <summary>
            Unregister a percolator
            <para> </para>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-percolate.html
            </summary>
            <param name="name">The name for the percolator</param>
            <param name="selector">An optional descriptor describing the unregister percolator operation further</param>
        </member>
        <member name="M:Nest.IElasticClient.UnregisterPercolator(Nest.IUnregisterPercolatorRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.UnregisterPercolatorAsync``1(System.String,System.Func{Nest.UnregisterPercolatorDescriptor{``0},Nest.UnregisterPercolatorDescriptor{``0}})">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.UnregisterPercolatorAsync(Nest.IUnregisterPercolatorRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.RegisterPercolator``1(System.String,System.Func{Nest.RegisterPercolatorDescriptor{``0},Nest.RegisterPercolatorDescriptor{``0}})">
            <summary>
            Register a percolator
            <para> </para>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-percolate.html
            </summary>
            <typeparam name="T">The type to infer the index/type from, will also be used to strongly type the query</typeparam>
            <param name="name">The name for the percolator</param>
            <param name="percolatorSelector">An optional descriptor describing the register percolator operation further</param>
        </member>
        <member name="M:Nest.IElasticClient.RegisterPercolator(Nest.IRegisterPercolatorRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.RegisterPercolatorAsync``1(System.String,System.Func{Nest.RegisterPercolatorDescriptor{``0},Nest.RegisterPercolatorDescriptor{``0}})">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.RegisterPercolatorAsync(Nest.IRegisterPercolatorRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.Percolate``1(System.Func{Nest.PercolateDescriptor{``0},Nest.PercolateDescriptor{``0}})">
            <summary>
            Percolate a document
            <para> </para>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-percolate.html
            </summary>
            <typeparam name="T">The type to infer the index/type from, and of the object that is being percolated</typeparam>
            <param name="percolateSelector">An optional descriptor describing the percolate operation further</param>
        </member>
        <member name="M:Nest.IElasticClient.Percolate``1(Nest.IPercolateRequest{``0})">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.PercolateAsync``1(System.Func{Nest.PercolateDescriptor{``0},Nest.PercolateDescriptor{``0}})">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.PercolateAsync``1(Nest.IPercolateRequest{``0})">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.PercolateCount``1(``0,System.Func{Nest.PercolateCountDescriptor{``0},Nest.PercolateCountDescriptor{``0}})">
            <summary>
            Percolate a document but only return the number of matches not the matches itself
            <para> </para>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-percolate.html
            </summary>
            <typeparam name="T">The type to infer the index/type from, and of the object that is being percolated</typeparam>
            <param name="object">The object to percolator</param>
            <param name="percolateSelector">An optional descriptor describing the percolate operation further</param>
        </member>
        <member name="M:Nest.IElasticClient.PercolateCount``1(Nest.IPercolateCountRequest{``0})">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.PercolateCountAsync``1(``0,System.Func{Nest.PercolateCountDescriptor{``0},Nest.PercolateCountDescriptor{``0}})">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.PercolateCountAsync``1(Nest.IPercolateCountRequest{``0})">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.Map``1(System.Func{Nest.PutMappingDescriptor{``0},Nest.PutMappingDescriptor{``0}})">
            <summary>
            The put mapping API allows to register specific mapping definition for a specific type.
            <para> </para>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/indices-put-mapping.html
            </summary>
            <typeparam name="T">The type we want to map in elasticsearch</typeparam>
            <param name="mappingSelector">A descriptor to describe the mapping of our type</param>
        </member>
        <member name="M:Nest.IElasticClient.Map(Nest.IPutMappingRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.MapAsync``1(System.Func{Nest.PutMappingDescriptor{``0},Nest.PutMappingDescriptor{``0}})">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.MapAsync(Nest.IPutMappingRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.GetMapping``1(System.Func{Nest.GetMappingDescriptor{``0},Nest.GetMappingDescriptor{``0}})">
            <summary>
            The get mapping API allows to retrieve mapping definitions for an index or index/type.
            <para> </para>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/indices-get-mapping.html
            </summary>
            <param name="selector">A descriptor that describes the parameters for the get mapping operation</param>
        </member>
        <member name="M:Nest.IElasticClient.GetMapping(Nest.IGetMappingRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.GetMappingAsync``1(System.Func{Nest.GetMappingDescriptor{``0},Nest.GetMappingDescriptor{``0}})">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.GetMappingAsync(Nest.IGetMappingRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.DeleteMapping``1(System.Func{Nest.DeleteMappingDescriptor{``0},Nest.DeleteMappingDescriptor{``0}})">
            <summary>
            Allow to delete a mapping (type) along with its data. 
            <para> </para>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/indices-delete-mapping.html
            </summary>
            <param name="selector">A descriptor that describes the parameters for the delete mapping operation</param>
        </member>
        <member name="M:Nest.IElasticClient.DeleteMapping(Nest.IDeleteMappingRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.DeleteMappingAsync``1(System.Func{Nest.DeleteMappingDescriptor{``0},Nest.DeleteMappingDescriptor{``0}})">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.DeleteMappingAsync(Nest.IDeleteMappingRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.Flush(System.Func{Nest.FlushDescriptor,Nest.FlushDescriptor})">
            <summary>
            The flush API allows to flush one or more indices through an API. The flush process of an index basically 
            frees memory from the index by flushing data to the index storage and clearing the internal transaction log. 
            By default, Elasticsearch uses memory heuristics in order to automatically trigger 
            flush operations as required in order to clear memory.
            <para> </para>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/indices-flush.html
            </summary>
            <param name="selector">A descriptor that describes the parameters for the flush operation</param>
        </member>
        <member name="M:Nest.IElasticClient.Flush(Nest.IFlushRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.FlushAsync(System.Func{Nest.FlushDescriptor,Nest.FlushDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.FlushAsync(Nest.IFlushRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.GetIndexSettings(System.Func{Nest.GetIndexSettingsDescriptor,Nest.GetIndexSettingsDescriptor})">
            <summary>
            The get settings API allows to retrieve settings of index/indices.
            <para> </para>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/indices-get-settings.html
            </summary>
            <param name="selector">A descriptor that describes the parameters for the get index settings operation</param>
        </member>
        <member name="M:Nest.IElasticClient.GetIndexSettings(Nest.IGetIndexSettingsRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.GetIndexSettingsAsync(System.Func{Nest.GetIndexSettingsDescriptor,Nest.GetIndexSettingsDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.GetIndexSettingsAsync(Nest.IGetIndexSettingsRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.DeleteIndex(System.Func{Nest.DeleteIndexDescriptor,Nest.DeleteIndexDescriptor})">
            <summary>
            The delete index API allows to delete an existing index.
            <para> </para>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/indices-delete-index.html
            </summary>
            <param name="selector">A descriptor that describes the parameters for the delete index operation</param>
        </member>
        <member name="M:Nest.IElasticClient.DeleteIndex(Nest.IDeleteIndexRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.DeleteIndexAsync(System.Func{Nest.DeleteIndexDescriptor,Nest.DeleteIndexDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.DeleteIndexAsync(Nest.IDeleteIndexRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.ClearCache(System.Func{Nest.ClearCacheDescriptor,Nest.ClearCacheDescriptor})">
            <summary>
            The clear cache API allows to clear either all caches or specific cached associated with one ore more indices.
            <para> </para>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/indices-clearcache.html
            </summary>
            <param name="selector">A descriptor that describes the parameters for the clear cache operation</param>
        </member>
        <member name="M:Nest.IElasticClient.ClearCache(Nest.IClearCacheRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.ClearCacheAsync(System.Func{Nest.ClearCacheDescriptor,Nest.ClearCacheDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.ClearCacheAsync(Nest.IClearCacheRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.CreateIndex(System.Func{Nest.CreateIndexDescriptor,Nest.CreateIndexDescriptor})">
            <summary>
            The create index API allows to instantiate an index. Elasticsearch provides support for multiple indices, 
            including executing operations across several indices.
            <para> </para>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/indices-create-index.html
            </summary>
            <param name="createIndexSelector">A descriptor that describes the parameters for the create index operation</param>
        </member>
        <member name="M:Nest.IElasticClient.CreateIndex(Nest.ICreateIndexRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.CreateIndexAsync(System.Func{Nest.CreateIndexDescriptor,Nest.CreateIndexDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.CreateIndexAsync(Nest.ICreateIndexRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.RootNodeInfo(System.Func{Nest.InfoDescriptor,Nest.InfoDescriptor})">
            <summary>
            Does a request to the root of an elasticsearch node
            </summary>
            <param name="selector">A descriptor to further describe the root operation</param>
        </member>
        <member name="M:Nest.IElasticClient.RootNodeInfo(Nest.IInfoRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.RootNodeInfoAsync(System.Func{Nest.InfoDescriptor,Nest.InfoDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.RootNodeInfoAsync(Nest.IInfoRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.IndicesStats(System.Func{Nest.IndicesStatsDescriptor,Nest.IndicesStatsDescriptor})">
            <summary>
            Indices level stats provide statistics on different operations happening on an index. The API provides statistics on 
            the index level scope (though most stats can also be retrieved using node level scope).
            <para> </para>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/indices-stats.html
            </summary>
            <param name="selector">Optionaly further describe the indices stats operation</param>
        </member>
        <member name="M:Nest.IElasticClient.IndicesStats(Nest.IIndicesStatsRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.IndicesStatsAsync(System.Func{Nest.IndicesStatsDescriptor,Nest.IndicesStatsDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.IndicesStatsAsync(Nest.IIndicesStatsRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.NodesInfo(System.Func{Nest.NodesInfoDescriptor,Nest.NodesInfoDescriptor})">
            <summary>
            The cluster nodes info API allows to retrieve one or more (or all) of the cluster nodes information.
            <para> </para>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/cluster-nodes-info.html
            </summary>
            <param name="selector">An optional descriptor to further describe the nodes info operation</param>
        </member>
        <member name="M:Nest.IElasticClient.NodesInfo(Nest.INodesInfoRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.NodesInfoAsync(System.Func{Nest.NodesInfoDescriptor,Nest.NodesInfoDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.NodesInfoAsync(Nest.INodesInfoRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.NodesStats(System.Func{Nest.NodesStatsDescriptor,Nest.NodesStatsDescriptor})">
            <summary>
            The cluster nodes stats API allows to retrieve one or more (or all) of the cluster nodes statistics.
            <para> </para>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/cluster-nodes-stats.html
            </summary>
            <param name="selector">An optional descriptor to further describe the nodes stats operation</param>
        </member>
        <member name="M:Nest.IElasticClient.NodesStats(Nest.INodesStatsRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.NodesStatsAsync(System.Func{Nest.NodesStatsDescriptor,Nest.NodesStatsDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.NodesStatsAsync(Nest.INodesStatsRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.IndexExists(System.Func{Nest.IndexExistsDescriptor,Nest.IndexExistsDescriptor})">
            <summary>
            Used to check if the index (indices) exists or not. 
            <para> </para>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/indices-exists.html
            </summary>
            <param name="selector">A descriptor that describes the index exist operation</param>
        </member>
        <member name="M:Nest.IElasticClient.IndexExists(Nest.IIndexExistsRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.IndexExistsAsync(System.Func{Nest.IndexExistsDescriptor,Nest.IndexExistsDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.IndexExistsAsync(Nest.IIndexExistsRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.MoreLikeThis``1(System.Func{Nest.MoreLikeThisDescriptor{``0},Nest.MoreLikeThisDescriptor{``0}})">
            <summary>
            The more like this (mlt) API allows to get documents that are "like" a specified document. 
            <para> </para>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-more-like-this.html
            </summary>
            <typeparam name="T">Type used to infer the default index and typename and used to describe the search</typeparam>
            <param name="mltSelector">A descriptor that describes the more like this operation</param>
        </member>
        <member name="M:Nest.IElasticClient.MoreLikeThis``1(Nest.IMoreLikeThisRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.MoreLikeThisAsync``1(System.Func{Nest.MoreLikeThisDescriptor{``0},Nest.MoreLikeThisDescriptor{``0}})">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.MoreLikeThisAsync``1(Nest.IMoreLikeThisRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.ClusterHealth(System.Func{Nest.ClusterHealthDescriptor,Nest.ClusterHealthDescriptor})">
            <summary>
            The cluster health API allows to get a very simple status on the health of the cluster.
            <para> </para>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/cluster-health.html
            </summary>
            <param name="clusterHealthSelector">An optional descriptor to further describe the cluster health operation</param>
        </member>
        <member name="M:Nest.IElasticClient.ClusterHealth(Nest.IClusterHealthRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.ClusterHealthAsync(System.Func{Nest.ClusterHealthDescriptor,Nest.ClusterHealthDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.ClusterHealthAsync(Nest.IClusterHealthRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.Analyze(System.Func{Nest.AnalyzeDescriptor,Nest.AnalyzeDescriptor})">
            <summary>
            Performs the analysis process on a text and return the tokens breakdown of the text.
            <para> </para>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/indices-analyze.html
            </summary>
            <param name="analyzeSelector">A descriptor that describes the analyze operation</param>
        </member>
        <member name="M:Nest.IElasticClient.Analyze(Nest.IAnalyzeRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.AnalyzeAsync(System.Func{Nest.AnalyzeDescriptor,Nest.AnalyzeDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.AnalyzeAsync(Nest.IAnalyzeRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.Search``1(System.Func{Nest.SearchDescriptor{``0},Nest.SearchDescriptor{``0}})">
            <summary>
            The search API allows to execute a search query and get back search hits that match the query.
            <para> </para>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-search.html
            </summary>
            <typeparam name="T">The type used to infer the index and typename as well describe the query strongly typed</typeparam>
            <param name="searchSelector">A descriptor that describes the parameters for the search operation</param>
        </member>
        <member name="M:Nest.IElasticClient.Search``1(Nest.ISearchRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.Search``2(System.Func{Nest.SearchDescriptor{``0},Nest.SearchDescriptor{``0}})">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.Search``2(Nest.ISearchRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.SearchAsync``1(System.Func{Nest.SearchDescriptor{``0},Nest.SearchDescriptor{``0}})">
            <inheritdoc />
            <typeparam name="T">The type used to infer the index and typename as well describe the query strongly typed</typeparam>
            <param name="searchSelector">A descriptor that describes the parameters for the search operation</param>
        </member>
        <member name="M:Nest.IElasticClient.SearchAsync``1(Nest.ISearchRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.SearchAsync``2(System.Func{Nest.SearchDescriptor{``0},Nest.SearchDescriptor{``0}})">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.SearchAsync``2(Nest.ISearchRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.MultiSearch(System.Func{Nest.MultiSearchDescriptor,Nest.MultiSearchDescriptor})">
            <summary>
            The multi search API allows to execute several search requests within the same API.
            <para> </para>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-multi-search.html
            </summary>
            <param name="multiSearchSelector">A descriptor that describes the search operations on the multi search api</param>
        </member>
        <member name="M:Nest.IElasticClient.MultiSearch(Nest.IMultiSearchRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.MultiSearchAsync(System.Func{Nest.MultiSearchDescriptor,Nest.MultiSearchDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.MultiSearchAsync(Nest.IMultiSearchRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.Count``1(System.Func{Nest.CountDescriptor{``0},Nest.CountDescriptor{``0}})">
            <summary>
            The count API allows to easily execute a query and get the number of matches for that query. 
            It can be executed across one or more indices and across one or more types. 
            <para> </para>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-count.html
            </summary>
            <typeparam name="T">The type used to infer the default index and typename as well as describe the strongly
             typed parts of the query</typeparam>
            <param name="countSelector">An optional descriptor to further describe the count operation</param>
        </member>
        <member name="M:Nest.IElasticClient.Count``1(Nest.ICountRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.CountAsync``1(System.Func{Nest.CountDescriptor{``0},Nest.CountDescriptor{``0}})">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.CountAsync``1(Nest.ICountRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.DeleteByQuery``1(System.Func{Nest.DeleteByQueryDescriptor{``0},Nest.DeleteByQueryDescriptor{``0}})">
            <summary>
            The delete by query API allows to delete documents from one or more indices and one or more types based on a query.
            <para> </para>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/docs-delete-by-query.html
            </summary>
            <typeparam name="T">The type used to infer the default index and typename as well as describe the strongly
             typed parts of the query</typeparam>
            <param name="deleteByQuerySelector">An optional descriptor to further describe the delete by query operation</param>
        </member>
        <member name="M:Nest.IElasticClient.DeleteByQuery(Nest.IDeleteByQueryRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.DeleteByQueryAsync``1(System.Func{Nest.DeleteByQueryDescriptor{``0},Nest.DeleteByQueryDescriptor{``0}})">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.DeleteByQueryAsync(Nest.IDeleteByQueryRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.Bulk(Nest.IBulkRequest)">
            <summary>
            The bulk API makes it possible to perform many index/delete operations in a single API call. 
            This can greatly increase the indexing speed.
            <para> </para>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/docs-bulk.html
            </summary>
            <param name="bulkRequest">A descriptor the describe the index/create/delete operation for this bulk operation</param>
        </member>
        <member name="M:Nest.IElasticClient.Bulk(System.Func{Nest.BulkDescriptor,Nest.BulkDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.BulkAsync(Nest.IBulkRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.BulkAsync(System.Func{Nest.BulkDescriptor,Nest.BulkDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.Index``1(``0,System.Func{Nest.IndexDescriptor{``0},Nest.IndexDescriptor{``0}})">
            <summary>
            The index API adds or updates a typed JSON document in a specific index, making it searchable. 
            <para> </para>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/docs-index_.html
            </summary>
            <typeparam name="T">The type used to infer the default index and typename</typeparam>
            <param name="object">The object to be indexed, Id will be inferred (Id property or IdProperty attribute on type)</param>
            <param name="indexSelector">Optionally furter describe the index operation i.e override type/index/id</param>
        </member>
        <member name="M:Nest.IElasticClient.Index``1(Nest.IIndexRequest{``0})">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.IndexAsync``1(``0,System.Func{Nest.IndexDescriptor{``0},Nest.IndexDescriptor{``0}})">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.IndexAsync``1(Nest.IIndexRequest{``0})">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.Delete``1(System.Func{Nest.DeleteDescriptor{``0},Nest.DeleteDescriptor{``0}})">
             <summary>
            The delete API allows to delete a typed JSON document from a specific index based on its id. 
             <para> </para>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/docs-delete.html
             </summary>
             <typeparam name="T">The type used to infer the default index and typename</typeparam>
             <param name="deleteSelector">Describe the delete operation, i.e type/index/id</param>
        </member>
        <member name="M:Nest.IElasticClient.Delete(Nest.IDeleteRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.DeleteAsync``1(System.Func{Nest.DeleteDescriptor{``0},Nest.DeleteDescriptor{``0}})">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.DeleteAsync(Nest.IDeleteRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.MultiGet(System.Func{Nest.MultiGetDescriptor,Nest.MultiGetDescriptor})">
            <summary>
            Multi GET API allows to get multiple documents based on an index, type (optional) and id (and possibly routing). 
            The response includes a docs array with all the fetched documents, each element similar in structure to a document 
            provided by the get API.
            <para> </para>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/docs-multi-get.html
            </summary>
            <param name="multiGetSelector">A descriptor describing which documents should be fetched</param>
        </member>
        <member name="M:Nest.IElasticClient.MultiGet(Nest.IMultiGetRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.MultiGetAsync(System.Func{Nest.MultiGetDescriptor,Nest.MultiGetDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.MultiGetAsync(Nest.IMultiGetRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.Source``1(System.Func{Nest.SourceDescriptor{``0},Nest.SourceDescriptor{``0}})">
            <summary>
            Use the /{index}/{type}/{id}/_source endpoint to get just the _source field of the document, 
            without any additional content around it. 
            <para> </para>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/docs-get.html#_source
            </summary>
            <typeparam name="T">The type used to infer the default index and typename</typeparam>
            <param name="getSelector">A descriptor that describes which document's source to fetch</param>
        </member>
        <member name="M:Nest.IElasticClient.Source``1(Nest.ISourceRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.SourceAsync``1(System.Func{Nest.SourceDescriptor{``0},Nest.SourceDescriptor{``0}})">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.SourceAsync``1(Nest.ISourceRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.Get``1(System.Func{Nest.GetDescriptor{``0},Nest.GetDescriptor{``0}})">
            <summary>
            Use the /{index}/{type}/{id} to get the document and its metadata
            <para> </para>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/docs-get.html#_source
            </summary>
            <typeparam name="T">The type used to infer the default index and typename</typeparam>
            <param name="getSelector">A descriptor that describes which document's source to fetch</param>
        </member>
        <member name="M:Nest.IElasticClient.Get``1(Nest.IGetRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.GetAsync``1(System.Func{Nest.GetDescriptor{``0},Nest.GetDescriptor{``0}})">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.GetAsync``1(Nest.IGetRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.Alias(System.Func{Nest.AliasDescriptor,Nest.AliasDescriptor})">
            <summary>
            APIs in elasticsearch accept an index name when working against a specific index, and several indices when applicable. 
            <para>The index aliases API allow to alias an index with a name, with all APIs automatically converting the alias name to the 
            actual index name.</para><para> An alias can also be mapped to more than one index, and when specifying it, the alias 
            will automatically expand to the aliases indices.i</para><para> An alias can also be associated with a filter that will 
            automatically be applied when searching, and routing values.</para>
            <para> </para>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/indices-aliases.html
            </summary>
            <param name="aliasSelector">A desriptor that describes the parameters for the alias operation</param>
        </member>
        <member name="M:Nest.IElasticClient.Alias(Nest.IAliasRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.AliasAsync(System.Func{Nest.AliasDescriptor,Nest.AliasDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.AliasAsync(Nest.IAliasRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.GetAlias(System.Func{Nest.GetAliasDescriptor,Nest.GetAliasDescriptor})">
            <summary>
            The get index alias api allows to filter by alias name and index name. This api redirects to the master and fetches 
            the requested index aliases, if available. This api only serialises the found index aliases.
            <para> Difference with GetAlias is that this call will also return indices without aliases set</para>
            <para> </para>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/indices-aliases.html#alias-retrieving
            </summary>
            <param name="getAliasDescriptor">A descriptor that describes which aliases/indexes we are interested int</param>
        </member>
        <member name="M:Nest.IElasticClient.GetAlias(Nest.IGetAliasRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.GetAliasAsync(System.Func{Nest.GetAliasDescriptor,Nest.GetAliasDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.GetAliasAsync(Nest.IGetAliasRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.GetAliases(System.Func{Nest.GetAliasesDescriptor,Nest.GetAliasesDescriptor})">
            <summary>
            The get index alias api allows to filter by alias name and index name. This api redirects to the master and fetches 
            the requested index aliases, if available. This api only serialises the found index aliases.
            <para> </para>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/indices-aliases.html#alias-retrieving
            </summary>
            <param name="getAliasesDescriptor">A descriptor that describes which aliases/indexes we are interested int</param>
        </member>
        <member name="M:Nest.IElasticClient.GetAliases(Nest.IGetAliasesRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.GetAliasesAsync(System.Func{Nest.GetAliasesDescriptor,Nest.GetAliasesDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.GetAliasesAsync(Nest.IGetAliasesRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.Optimize(System.Func{Nest.OptimizeDescriptor,Nest.OptimizeDescriptor})">
            <summary>
            The optimize API allows to optimize one or more indices through an API. The optimize process basically optimizes 
            the index for faster search operations (and relates to the number of segments a Lucene index holds within each shard).
             The optimize operation allows to reduce the number of segments by merging them.
            <para> </para>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/indices-optimize.html
            </summary>
            <param name="optimizeSelector">An optional descriptor that further describes the optimize operation, i.e limit it to one index</param>
        </member>
        <member name="M:Nest.IElasticClient.Optimize(Nest.IOptimizeRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.OptimizeAsync(System.Func{Nest.OptimizeDescriptor,Nest.OptimizeDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.OptimizeAsync(Nest.IOptimizeRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.Status(System.Func{Nest.IndicesStatusDescriptor,Nest.IndicesStatusDescriptor})">
            <summary>
            The indices status API allows to get a comprehensive status information of one or more indices.
            <para> </para>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/indices-status.html
            </summary>
            <param name="selector">An optional descriptor that further describes the status operation, i.e limiting it to certain indices</param>
        </member>
        <member name="M:Nest.IElasticClient.Status(Nest.IIndicesStatusRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.StatusAsync(System.Func{Nest.IndicesStatusDescriptor,Nest.IndicesStatusDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.StatusAsync(Nest.IIndicesStatusRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.TermVector``1(System.Func{Nest.TermvectorDescriptor{``0},Nest.TermvectorDescriptor{``0}})">
            <summary>
            Returns information and statistics on terms in the fields of a particular document as stored in the index.
            <para> </para>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/docs-termvectors.html
            </summary>
            <typeparam name="T"></typeparam>
            <param name="termVectorSelector"></param>
        </member>
        <member name="M:Nest.IElasticClient.TermVector(Nest.ITermvectorRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.TermVectorAsync``1(System.Func{Nest.TermvectorDescriptor{``0},Nest.TermvectorDescriptor{``0}})">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.TermVectorAsync(Nest.ITermvectorRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.MultiTermVectors``1(System.Func{Nest.MultiTermVectorsDescriptor{``0},Nest.MultiTermVectorsDescriptor{``0}})">
            <summary>
            Multi termvectors API allows to get multiple termvectors based on an index, type and id.
            <para> </para>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/docs-multi-termvectors.html
            </summary>
            <typeparam name="T">The type used to infer the default index and typename</typeparam>
            <param name="multiTermVectorsSelector">The descriptor describing the multi termvectors operation</param>
        </member>
        <member name="M:Nest.IElasticClient.MultiTermVectors(Nest.IMultiTermVectorsRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.MultiTermVectorsAsync``1(System.Func{Nest.MultiTermVectorsDescriptor{``0},Nest.MultiTermVectorsDescriptor{``0}})">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.MultiTermVectorsAsync(Nest.IMultiTermVectorsRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.Suggest``1(System.Func{Nest.SuggestDescriptor{``0},Nest.SuggestDescriptor{``0}})">
            <summary>
            The suggest feature suggests similar looking terms based on a provided text by using a suggester. 
            <para> </para>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-suggesters.html
            </summary>
            <typeparam name="T">The type used to strongly type parts of the suggest operation</typeparam>
            <param name="selector">The suggesters to use this operation (can be multiple)</param>
        </member>
        <member name="M:Nest.IElasticClient.Suggest(Nest.ISuggestRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.SuggestAsync``1(System.Func{Nest.SuggestDescriptor{``0},Nest.SuggestDescriptor{``0}})">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.SuggestAsync(Nest.ISuggestRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.ClearScroll(System.Func{Nest.ClearScrollDescriptor,Nest.ClearScrollDescriptor})">
            <summary>
            Deletes a registered scroll request on the cluster 
            <para> </para>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-request-scroll.html
            </summary>
            <param name="clearScrollSelector">Specify the scroll id as well as request specific configuration</param>
        </member>
        <member name="M:Nest.IElasticClient.ClearScroll(Nest.IClearScrollRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.ClearScrollAsync(System.Func{Nest.ClearScrollDescriptor,Nest.ClearScrollDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.ClearScrollAsync(Nest.IClearScrollRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.DocumentExists``1(System.Func{Nest.DocumentExistsDescriptor{``0},Nest.DocumentExistsDescriptor{``0}})">
            <summary>
            Check if a document exists without returning its contents
            <para> </para>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/docs-get.html
            </summary>
            <typeparam name="T">The type used to infer the default index and typename</typeparam>
            <param name="existsSelector">Describe what document we are looking for</param>
        </member>
        <member name="M:Nest.IElasticClient.DocumentExists(Nest.IDocumentExistsRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.DocumentExistsAsync``1(System.Func{Nest.DocumentExistsDescriptor{``0},Nest.DocumentExistsDescriptor{``0}})">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.DocumentExistsAsync(Nest.IDocumentExistsRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.CreateRepository(System.String,System.Func{Nest.CreateRepositoryDescriptor,Nest.CreateRepositoryDescriptor})">
            <summary>
            Before any snapshot or restore operation can be performed a snapshot repository should be registered in Elasticsearch. 
            <para> </para>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/modules-snapshots.html#_repositories
            </summary>
            <param name="repository">The name for the repository</param>
            <param name="selector">describe what the repository looks like</param>
        </member>
        <member name="M:Nest.IElasticClient.CreateRepository(Nest.ICreateRepositoryRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.CreateRepositoryAsync(System.String,System.Func{Nest.CreateRepositoryDescriptor,Nest.CreateRepositoryDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.CreateRepositoryAsync(Nest.ICreateRepositoryRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.DeleteRepository(System.String,System.Func{Nest.DeleteRepositoryDescriptor,Nest.DeleteRepositoryDescriptor})">
            <summary>
            Delete a repository, if you have ongoing restore operations be sure to delete the indices being restored into first.
            <para> </para>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/modules-snapshots.html#_repositories
            </summary>
            <param name="repository">The name of the repository</param>
            <param name="selector">Optionaly provide the delete operation with more details</param>>
        </member>
        <member name="M:Nest.IElasticClient.DeleteRepository(Nest.IDeleteRepositoryRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.DeleteRepositoryAsync(System.String,System.Func{Nest.DeleteRepositoryDescriptor,Nest.DeleteRepositoryDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.DeleteRepositoryAsync(Nest.IDeleteRepositoryRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.Snapshot(System.String,System.String,System.Func{Nest.SnapshotDescriptor,Nest.SnapshotDescriptor})">
            <summary>
            A repository can contain multiple snapshots of the same cluster. Snapshot are identified by unique names within the cluster.
            /// <para> </para>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/modules-snapshots.html#_snapshot
            </summary>
            <param name="repository">The name of the repository we want to create a snapshot in</param>
            <param name="snapshotName">The name of the snapshot</param>
            <param name="selector">Optionally provide more details about the snapshot operation</param>
        </member>
        <member name="M:Nest.IElasticClient.Snapshot(Nest.ISnapshotRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.SnapshotAsync(System.String,System.String,System.Func{Nest.SnapshotDescriptor,Nest.SnapshotDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.SnapshotAsync(Nest.ISnapshotRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.DeleteSnapshot(System.String,System.String,System.Func{Nest.DeleteSnapshotDescriptor,Nest.DeleteSnapshotDescriptor})">
            <summary>
            Delete a snapshot
            <para> </para>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/modules-snapshots.html#_snapshot
            </summary>
            <param name="repository">The repository name under which the snapshot we want to delete lives</param>
            <param name="snapshotName">The name of the snapshot that we want to delete</param>
            <param name="selector">Optionally further describe the delete snapshot operation</param>
        </member>
        <member name="M:Nest.IElasticClient.DeleteSnapshot(Nest.IDeleteSnapshotRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.DeleteSnapshotAsync(System.String,System.String,System.Func{Nest.DeleteSnapshotDescriptor,Nest.DeleteSnapshotDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.DeleteSnapshotAsync(Nest.IDeleteSnapshotRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.GetSnapshot(System.String,System.String,System.Func{Nest.GetSnapshotDescriptor,Nest.GetSnapshotDescriptor})">
            <summary>
            Gets information about one or more snapshots
            <para> </para>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/modules-snapshots.html#_snapshot
            </summary>
            <param name="repository">The repository name under which the snapshots live</param>
            <param name="snapshotName">The names of the snapshots we want information from (can be _all or wildcards)</param>
            <param name="selector">Optionally further describe the get snapshot operation</param>
        </member>
        <member name="M:Nest.IElasticClient.GetSnapshot(Nest.IGetSnapshotRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.GetSnapshotAsync(System.String,System.String,System.Func{Nest.GetSnapshotDescriptor,Nest.GetSnapshotDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.GetSnapshotAsync(Nest.IGetSnapshotRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.Restore(System.String,System.String,System.Func{Nest.RestoreDescriptor,Nest.RestoreDescriptor})">
            <summary>
            Restore a snapshot
            <para> </para>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/modules-snapshots.html#_restore
            </summary>
            <param name="repository">The repository name that holds our snapshot</param>
            <param name="snapshotName">The name of the snapshot that we want to restore</param>
            <param name="selector">Optionally further describe the restore operation</param>
        </member>
        <member name="M:Nest.IElasticClient.Restore(Nest.IRestoreRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.RestoreAsync(System.String,System.String,System.Func{Nest.RestoreDescriptor,Nest.RestoreDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.RestoreAsync(Nest.IRestoreRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.ClusterSettings(System.Func{Nest.ClusterSettingsDescriptor,Nest.ClusterSettingsDescriptor})">
            <summary>
            Allows to update cluster wide specific settings. Settings updated can either be persistent 
            (applied cross restarts) or transient (will not survive a full cluster restart). 
            <para> </para>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/cluster-update-settings.html
            </summary>
        </member>
        <member name="M:Nest.IElasticClient.ClusterSettingsAsync(System.Func{Nest.ClusterSettingsDescriptor,Nest.ClusterSettingsDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.ClusterSettings(Nest.IClusterSettingsRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.ClusterSettingsAsync(Nest.IClusterSettingsRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.ClusterGetSettings(System.Func{Nest.ClusterGetSettingsDescriptor,Nest.ClusterGetSettingsDescriptor})">
            <summary>
            Gets cluster wide specific settings. Settings updated can either be persistent 
            (applied cross restarts) or transient (will not survive a full cluster restart). 
            <para> </para>http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/cluster-update-settings.html
            </summary>
        </member>
        <member name="M:Nest.IElasticClient.ClusterGetSettingsAsync(System.Func{Nest.ClusterGetSettingsDescriptor,Nest.ClusterGetSettingsDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.ClusterGetSettings(Nest.IClusterGetSettingsRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.IElasticClient.ClusterGetSettingsAsync(Nest.IClusterGetSettingsRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.ClusterSettings(System.Func{Nest.ClusterSettingsDescriptor,Nest.ClusterSettingsDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.ClusterSettingsAsync(System.Func{Nest.ClusterSettingsDescriptor,Nest.ClusterSettingsDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.ClusterSettings(Nest.IClusterSettingsRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.ClusterSettingsAsync(Nest.IClusterSettingsRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.ClusterGetSettings(System.Func{Nest.ClusterGetSettingsDescriptor,Nest.ClusterGetSettingsDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.ClusterGetSettingsAsync(System.Func{Nest.ClusterGetSettingsDescriptor,Nest.ClusterGetSettingsDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.ClusterGetSettings(Nest.IClusterGetSettingsRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.ClusterGetSettingsAsync(Nest.IClusterGetSettingsRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.DeleteIndex(System.Func{Nest.DeleteIndexDescriptor,Nest.DeleteIndexDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.DeleteIndex(Nest.IDeleteIndexRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.DeleteIndexAsync(System.Func{Nest.DeleteIndexDescriptor,Nest.DeleteIndexDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.DeleteIndexAsync(Nest.IDeleteIndexRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.DocumentExists``1(System.Func{Nest.DocumentExistsDescriptor{``0},Nest.DocumentExistsDescriptor{``0}})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.DocumentExists(Nest.IDocumentExistsRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.DocumentExistsAsync``1(System.Func{Nest.DocumentExistsDescriptor{``0},Nest.DocumentExistsDescriptor{``0}})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.DocumentExistsAsync(Nest.IDocumentExistsRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.MultiTermVectors``1(System.Func{Nest.MultiTermVectorsDescriptor{``0},Nest.MultiTermVectorsDescriptor{``0}})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.MultiTermVectors(Nest.IMultiTermVectorsRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.MultiTermVectorsAsync``1(System.Func{Nest.MultiTermVectorsDescriptor{``0},Nest.MultiTermVectorsDescriptor{``0}})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.MultiTermVectorsAsync(Nest.IMultiTermVectorsRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.Snapshot(System.String,System.String,System.Func{Nest.SnapshotDescriptor,Nest.SnapshotDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.Snapshot(Nest.ISnapshotRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.SnapshotAsync(System.String,System.String,System.Func{Nest.SnapshotDescriptor,Nest.SnapshotDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.SnapshotAsync(Nest.ISnapshotRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.GetSnapshot(System.String,System.String,System.Func{Nest.GetSnapshotDescriptor,Nest.GetSnapshotDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.GetSnapshot(Nest.IGetSnapshotRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.GetSnapshotAsync(System.String,System.String,System.Func{Nest.GetSnapshotDescriptor,Nest.GetSnapshotDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.GetSnapshotAsync(Nest.IGetSnapshotRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.DeleteSnapshot(System.String,System.String,System.Func{Nest.DeleteSnapshotDescriptor,Nest.DeleteSnapshotDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.DeleteSnapshot(Nest.IDeleteSnapshotRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.DeleteSnapshotAsync(System.String,System.String,System.Func{Nest.DeleteSnapshotDescriptor,Nest.DeleteSnapshotDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.DeleteSnapshotAsync(Nest.IDeleteSnapshotRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.Restore(Nest.IRestoreRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.Restore(System.String,System.String,System.Func{Nest.RestoreDescriptor,Nest.RestoreDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.RestoreAsync(Nest.IRestoreRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.RestoreAsync(System.String,System.String,System.Func{Nest.RestoreDescriptor,Nest.RestoreDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.CreateRepository(System.String,System.Func{Nest.CreateRepositoryDescriptor,Nest.CreateRepositoryDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.CreateRepository(Nest.ICreateRepositoryRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.CreateRepositoryAsync(System.String,System.Func{Nest.CreateRepositoryDescriptor,Nest.CreateRepositoryDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.CreateRepositoryAsync(Nest.ICreateRepositoryRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.DeleteRepository(System.String,System.Func{Nest.DeleteRepositoryDescriptor,Nest.DeleteRepositoryDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.DeleteRepository(Nest.IDeleteRepositoryRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.DeleteRepositoryAsync(System.String,System.Func{Nest.DeleteRepositoryDescriptor,Nest.DeleteRepositoryDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.DeleteRepositoryAsync(Nest.IDeleteRepositoryRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.Suggest``1(System.Func{Nest.SuggestDescriptor{``0},Nest.SuggestDescriptor{``0}})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.Suggest(Nest.ISuggestRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.SuggestAsync``1(System.Func{Nest.SuggestDescriptor{``0},Nest.SuggestDescriptor{``0}})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.SuggestAsync(Nest.ISuggestRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.RootNodeInfo(System.Func{Nest.InfoDescriptor,Nest.InfoDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.RootNodeInfo(Nest.IInfoRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.RootNodeInfoAsync(System.Func{Nest.InfoDescriptor,Nest.InfoDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.RootNodeInfoAsync(Nest.IInfoRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.TermVector``1(System.Func{Nest.TermvectorDescriptor{``0},Nest.TermvectorDescriptor{``0}})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.TermVector(Nest.ITermvectorRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.TermVectorAsync``1(System.Func{Nest.TermvectorDescriptor{``0},Nest.TermvectorDescriptor{``0}})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.TermVectorAsync(Nest.ITermvectorRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.UpdateSettings(System.Func{Nest.UpdateSettingsDescriptor,Nest.UpdateSettingsDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.UpdateSettings(Nest.IUpdateSettingsRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.UpdateSettingsAsync(System.Func{Nest.UpdateSettingsDescriptor,Nest.UpdateSettingsDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.UpdateSettingsAsync(Nest.IUpdateSettingsRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.Status(System.Func{Nest.IndicesStatusDescriptor,Nest.IndicesStatusDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.Status(Nest.IIndicesStatusRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.StatusAsync(System.Func{Nest.IndicesStatusDescriptor,Nest.IndicesStatusDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.StatusAsync(Nest.IIndicesStatusRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.Reindex``1(System.Func{Nest.ReindexDescriptor{``0},Nest.ReindexDescriptor{``0}})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.ClusterState(System.Func{Nest.ClusterStateDescriptor,Nest.ClusterStateDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.ClusterState(Nest.IClusterStateRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.ClusterStateAsync(System.Func{Nest.ClusterStateDescriptor,Nest.ClusterStateDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.ClusterStateAsync(Nest.IClusterStateRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.PutWarmer(System.String,System.Func{Nest.PutWarmerDescriptor,Nest.PutWarmerDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.PutWarmer(Nest.IPutWarmerRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.PutWarmerAsync(System.String,System.Func{Nest.PutWarmerDescriptor,Nest.PutWarmerDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.PutWarmerAsync(Nest.IPutWarmerRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.GetWarmer(System.String,System.Func{Nest.GetWarmerDescriptor,Nest.GetWarmerDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.GetWarmer(Nest.IGetWarmerRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.GetWarmerAsync(System.String,System.Func{Nest.GetWarmerDescriptor,Nest.GetWarmerDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.GetWarmerAsync(Nest.IGetWarmerRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.DeleteWarmer(System.String,System.Func{Nest.DeleteWarmerDescriptor,Nest.DeleteWarmerDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.DeleteWarmer(Nest.IDeleteWarmerRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.DeleteWarmerAsync(System.String,System.Func{Nest.DeleteWarmerDescriptor,Nest.DeleteWarmerDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.DeleteWarmerAsync(Nest.IDeleteWarmerRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.DeserializeWarmerResponse(Elasticsearch.Net.IElasticsearchResponse,System.IO.Stream)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.MultiSearch(System.Func{Nest.MultiSearchDescriptor,Nest.MultiSearchDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.MultiSearch(Nest.IMultiSearchRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.MultiSearchAsync(System.Func{Nest.MultiSearchDescriptor,Nest.MultiSearchDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.MultiSearchAsync(Nest.IMultiSearchRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.GetTemplate(System.String,System.Func{Nest.GetTemplateDescriptor,Nest.GetTemplateDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.GetTemplate(Nest.IGetTemplateRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.GetTemplateAsync(System.String,System.Func{Nest.GetTemplateDescriptor,Nest.GetTemplateDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.GetTemplateAsync(Nest.IGetTemplateRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.PutTemplate(System.String,System.Func{Nest.PutTemplateDescriptor,Nest.PutTemplateDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.PutTemplate(Nest.IPutTemplateRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.PutTemplateAsync(System.String,System.Func{Nest.PutTemplateDescriptor,Nest.PutTemplateDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.PutTemplateAsync(Nest.IPutTemplateRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.DeleteTemplate(System.String,System.Func{Nest.DeleteTemplateDescriptor,Nest.DeleteTemplateDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.DeleteTemplate(Nest.IDeleteTemplateRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.DeleteTemplateAync(System.String,System.Func{Nest.DeleteTemplateDescriptor,Nest.DeleteTemplateDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.DeleteTemplateAync(Nest.IDeleteTemplateRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.DeleteByQuery``1(System.Func{Nest.DeleteByQueryDescriptor{``0},Nest.DeleteByQueryDescriptor{``0}})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.DeleteByQuery(Nest.IDeleteByQueryRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.DeleteByQueryAsync``1(System.Func{Nest.DeleteByQueryDescriptor{``0},Nest.DeleteByQueryDescriptor{``0}})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.DeleteByQueryAsync(Nest.IDeleteByQueryRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.CreateIndex(System.Func{Nest.CreateIndexDescriptor,Nest.CreateIndexDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.CreateIndex(Nest.ICreateIndexRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.CreateIndexAsync(System.Func{Nest.CreateIndexDescriptor,Nest.CreateIndexDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.CreateIndexAsync(Nest.ICreateIndexRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.ClusterHealth(System.Func{Nest.ClusterHealthDescriptor,Nest.ClusterHealthDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.ClusterHealth(Nest.IClusterHealthRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.ClusterHealthAsync(System.Func{Nest.ClusterHealthDescriptor,Nest.ClusterHealthDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.ClusterHealthAsync(Nest.IClusterHealthRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.MoreLikeThis``1(System.Func{Nest.MoreLikeThisDescriptor{``0},Nest.MoreLikeThisDescriptor{``0}})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.MoreLikeThis``1(Nest.IMoreLikeThisRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.MoreLikeThisAsync``1(System.Func{Nest.MoreLikeThisDescriptor{``0},Nest.MoreLikeThisDescriptor{``0}})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.MoreLikeThisAsync``1(Nest.IMoreLikeThisRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.GetMapping``1(System.Func{Nest.GetMappingDescriptor{``0},Nest.GetMappingDescriptor{``0}})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.GetMapping(Nest.IGetMappingRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.GetMappingAsync``1(System.Func{Nest.GetMappingDescriptor{``0},Nest.GetMappingDescriptor{``0}})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.GetMappingAsync(Nest.IGetMappingRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.DeleteMapping``1(System.Func{Nest.DeleteMappingDescriptor{``0},Nest.DeleteMappingDescriptor{``0}})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.DeleteMapping(Nest.IDeleteMappingRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.DeleteMappingAsync``1(System.Func{Nest.DeleteMappingDescriptor{``0},Nest.DeleteMappingDescriptor{``0}})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.DeleteMappingAsync(Nest.IDeleteMappingRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.Get``1(System.Func{Nest.GetDescriptor{``0},Nest.GetDescriptor{``0}})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.Get``1(Nest.IGetRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.GetAsync``1(System.Func{Nest.GetDescriptor{``0},Nest.GetDescriptor{``0}})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.GetAsync``1(Nest.IGetRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.MultiGet(System.Func{Nest.MultiGetDescriptor,Nest.MultiGetDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.MultiGet(Nest.IMultiGetRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.MultiGetAsync(System.Func{Nest.MultiGetDescriptor,Nest.MultiGetDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.MultiGetAsync(Nest.IMultiGetRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.NodesInfo(System.Func{Nest.NodesInfoDescriptor,Nest.NodesInfoDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.NodesInfo(Nest.INodesInfoRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.NodesInfoAsync(System.Func{Nest.NodesInfoDescriptor,Nest.NodesInfoDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.NodesInfoAsync(Nest.INodesInfoRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.NodesStats(System.Func{Nest.NodesStatsDescriptor,Nest.NodesStatsDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.NodesStats(Nest.INodesStatsRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.NodesStatsAsync(System.Func{Nest.NodesStatsDescriptor,Nest.NodesStatsDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.NodesStatsAsync(Nest.INodesStatsRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.Scroll``1(Nest.IScrollRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.Scroll``1(System.Func{Nest.ScrollDescriptor{``0},Nest.ScrollDescriptor{``0}})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.ScrollAsync``1(Nest.IScrollRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.ScrollAsync``1(System.Func{Nest.ScrollDescriptor{``0},Nest.ScrollDescriptor{``0}})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.ClearScroll(System.Func{Nest.ClearScrollDescriptor,Nest.ClearScrollDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.ClearScroll(Nest.IClearScrollRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.ClearScrollAsync(System.Func{Nest.ClearScrollDescriptor,Nest.ClearScrollDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.ClearScrollAsync(Nest.IClearScrollRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.Validate``1(System.Func{Nest.ValidateQueryDescriptor{``0},Nest.ValidateQueryDescriptor{``0}})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.Validate(Nest.IValidateQueryRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.ValidateAsync``1(System.Func{Nest.ValidateQueryDescriptor{``0},Nest.ValidateQueryDescriptor{``0}})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.ValidateAsync(Nest.IValidateQueryRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.Bulk(Nest.IBulkRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.Bulk(System.Func{Nest.BulkDescriptor,Nest.BulkDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.BulkAsync(Nest.IBulkRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.BulkAsync(System.Func{Nest.BulkDescriptor,Nest.BulkDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.Update``1(System.Func{Nest.UpdateDescriptor{``0,``0},Nest.UpdateDescriptor{``0,``0}})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.Update``1(Nest.IUpdateRequest{``0,``0})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.Update``2(System.Func{Nest.UpdateDescriptor{``0,``1},Nest.UpdateDescriptor{``0,``1}})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.Update``2(Nest.IUpdateRequest{``0,``1})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.UpdateAsync``1(System.Func{Nest.UpdateDescriptor{``0,``0},Nest.UpdateDescriptor{``0,``0}})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.UpdateAsync``1(Nest.IUpdateRequest{``0,``0})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.UpdateAsync``2(System.Func{Nest.UpdateDescriptor{``0,``1},Nest.UpdateDescriptor{``0,``1}})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.UpdateAsync``2(Nest.IUpdateRequest{``0,``1})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.UnregisterPercolator``1(System.String,System.Func{Nest.UnregisterPercolatorDescriptor{``0},Nest.UnregisterPercolatorDescriptor{``0}})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.UnregisterPercolator(Nest.IUnregisterPercolatorRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.UnregisterPercolatorAsync``1(System.String,System.Func{Nest.UnregisterPercolatorDescriptor{``0},Nest.UnregisterPercolatorDescriptor{``0}})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.UnregisterPercolatorAsync(Nest.IUnregisterPercolatorRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.RegisterPercolator``1(System.String,System.Func{Nest.RegisterPercolatorDescriptor{``0},Nest.RegisterPercolatorDescriptor{``0}})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.RegisterPercolator(Nest.IRegisterPercolatorRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.RegisterPercolatorAsync``1(System.String,System.Func{Nest.RegisterPercolatorDescriptor{``0},Nest.RegisterPercolatorDescriptor{``0}})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.RegisterPercolatorAsync(Nest.IRegisterPercolatorRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.Percolate``1(System.Func{Nest.PercolateDescriptor{``0},Nest.PercolateDescriptor{``0}})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.Percolate``1(Nest.IPercolateRequest{``0})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.PercolateAsync``1(System.Func{Nest.PercolateDescriptor{``0},Nest.PercolateDescriptor{``0}})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.PercolateAsync``1(Nest.IPercolateRequest{``0})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.PercolateCount``1(``0,System.Func{Nest.PercolateCountDescriptor{``0},Nest.PercolateCountDescriptor{``0}})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.PercolateCount``1(Nest.IPercolateCountRequest{``0})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.PercolateCountAsync``1(``0,System.Func{Nest.PercolateCountDescriptor{``0},Nest.PercolateCountDescriptor{``0}})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.PercolateCountAsync``1(Nest.IPercolateCountRequest{``0})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.Segments(System.Func{Nest.SegmentsDescriptor,Nest.SegmentsDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.Segments(Nest.ISegmentsRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.SegmentsAsync(System.Func{Nest.SegmentsDescriptor,Nest.SegmentsDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.SegmentsAsync(Nest.ISegmentsRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.IndexExists(System.Func{Nest.IndexExistsDescriptor,Nest.IndexExistsDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.IndexExists(Nest.IIndexExistsRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.IndexExistsAsync(System.Func{Nest.IndexExistsDescriptor,Nest.IndexExistsDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.IndexExistsAsync(Nest.IIndexExistsRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.IndicesStats(System.Func{Nest.IndicesStatsDescriptor,Nest.IndicesStatsDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.IndicesStats(Nest.IIndicesStatsRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.IndicesStatsAsync(System.Func{Nest.IndicesStatsDescriptor,Nest.IndicesStatsDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.IndicesStatsAsync(Nest.IIndicesStatsRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.GetIndexSettings(System.Func{Nest.GetIndexSettingsDescriptor,Nest.GetIndexSettingsDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.GetIndexSettings(Nest.IGetIndexSettingsRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.GetIndexSettingsAsync(System.Func{Nest.GetIndexSettingsDescriptor,Nest.GetIndexSettingsDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.GetIndexSettingsAsync(Nest.IGetIndexSettingsRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.ClearCache(System.Func{Nest.ClearCacheDescriptor,Nest.ClearCacheDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.ClearCache(Nest.IClearCacheRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.ClearCacheAsync(System.Func{Nest.ClearCacheDescriptor,Nest.ClearCacheDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.ClearCacheAsync(Nest.IClearCacheRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.Analyze(System.Func{Nest.AnalyzeDescriptor,Nest.AnalyzeDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.Analyze(Nest.IAnalyzeRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.AnalyzeAsync(System.Func{Nest.AnalyzeDescriptor,Nest.AnalyzeDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.AnalyzeAsync(Nest.IAnalyzeRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.Alias(Nest.IAliasRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.Alias(System.Func{Nest.AliasDescriptor,Nest.AliasDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.AliasAsync(Nest.IAliasRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.AliasAsync(System.Func{Nest.AliasDescriptor,Nest.AliasDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.GetAlias(System.Func{Nest.GetAliasDescriptor,Nest.GetAliasDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.GetAlias(Nest.IGetAliasRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.GetAliasAsync(System.Func{Nest.GetAliasDescriptor,Nest.GetAliasDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.GetAliasAsync(Nest.IGetAliasRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.GetAliases(System.Func{Nest.GetAliasesDescriptor,Nest.GetAliasesDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.GetAliases(Nest.IGetAliasesRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.GetAliasesAsync(System.Func{Nest.GetAliasesDescriptor,Nest.GetAliasesDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.GetAliasesAsync(Nest.IGetAliasesRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.DeserializeGetAliasesResponse(Elasticsearch.Net.IElasticsearchResponse,System.IO.Stream)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.Optimize(System.Func{Nest.OptimizeDescriptor,Nest.OptimizeDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.Optimize(Nest.IOptimizeRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.OptimizeAsync(System.Func{Nest.OptimizeDescriptor,Nest.OptimizeDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.OptimizeAsync(Nest.IOptimizeRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.Flush(System.Func{Nest.FlushDescriptor,Nest.FlushDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.Flush(Nest.IFlushRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.FlushAsync(System.Func{Nest.FlushDescriptor,Nest.FlushDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.FlushAsync(Nest.IFlushRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.OpenIndex(System.Func{Nest.OpenIndexDescriptor,Nest.OpenIndexDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.OpenIndex(Nest.IOpenIndexRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.OpenIndexAsync(System.Func{Nest.OpenIndexDescriptor,Nest.OpenIndexDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.OpenIndexAsync(Nest.IOpenIndexRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.CloseIndex(System.Func{Nest.CloseIndexDescriptor,Nest.CloseIndexDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.CloseIndex(Nest.ICloseIndexRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.CloseIndexAsync(System.Func{Nest.CloseIndexDescriptor,Nest.CloseIndexDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.CloseIndexAsync(Nest.ICloseIndexRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.Refresh(System.Func{Nest.RefreshDescriptor,Nest.RefreshDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.Refresh(Nest.IRefreshRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.RefreshAsync(System.Func{Nest.RefreshDescriptor,Nest.RefreshDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.RefreshAsync(Nest.IRefreshRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.Count``1(System.Func{Nest.CountDescriptor{``0},Nest.CountDescriptor{``0}})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.Count``1(Nest.ICountRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.CountAsync``1(System.Func{Nest.CountDescriptor{``0},Nest.CountDescriptor{``0}})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.CountAsync``1(Nest.ICountRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.Delete``1(System.Func{Nest.DeleteDescriptor{``0},Nest.DeleteDescriptor{``0}})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.Delete(Nest.IDeleteRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.DeleteAsync``1(System.Func{Nest.DeleteDescriptor{``0},Nest.DeleteDescriptor{``0}})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.DeleteAsync(Nest.IDeleteRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.Map``1(System.Func{Nest.PutMappingDescriptor{``0},Nest.PutMappingDescriptor{``0}})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.Map(Nest.IPutMappingRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.MapAsync``1(System.Func{Nest.PutMappingDescriptor{``0},Nest.PutMappingDescriptor{``0}})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.MapAsync(Nest.IPutMappingRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.Source``1(System.Func{Nest.SourceDescriptor{``0},Nest.SourceDescriptor{``0}})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.Source``1(Nest.ISourceRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.SourceAsync``1(System.Func{Nest.SourceDescriptor{``0},Nest.SourceDescriptor{``0}})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.SourceAsync``1(Nest.ISourceRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.Index``1(``0,System.Func{Nest.IndexDescriptor{``0},Nest.IndexDescriptor{``0}})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.Index``1(Nest.IIndexRequest{``0})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.IndexAsync``1(``0,System.Func{Nest.IndexDescriptor{``0},Nest.IndexDescriptor{``0}})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.IndexAsync``1(Nest.IIndexRequest{``0})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.#ctor(Nest.IConnectionSettingsValues,Elasticsearch.Net.Connection.IConnection,Nest.INestSerializer,Elasticsearch.Net.Connection.ITransport)">
            <summary>
            Instantiate a new strongly typed connection to elasticsearch
            </summary>
            <param name="settings">An optional settings object telling the client how and where to connect to.
            <para>Defaults to a static single node connection pool to http://localhost:9200</para>
            <para>It's recommended to pass an explicit 'new ConnectionSettings()' instance</para>
            </param>
            <param name="connection">Optionally provide a different connection handler, defaults to http using HttpWebRequest</param>
            <param name="serializer">Optionally provide a custom serializer responsible for taking a stream and turning into T</param>
            <param name="transport">The transport coordinates requests between the client and the connection pool and the connection</param>
        </member>
        <member name="M:Nest.ElasticClient.Search``1(System.Func{Nest.SearchDescriptor{``0},Nest.SearchDescriptor{``0}})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.Search``2(System.Func{Nest.SearchDescriptor{``0},Nest.SearchDescriptor{``0}})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.SearchAsync``1(System.Func{Nest.SearchDescriptor{``0},Nest.SearchDescriptor{``0}})">
            <inheritdoc />
        </member>
        <member name="M:Nest.ElasticClient.SearchAsync``2(System.Func{Nest.SearchDescriptor{``0},Nest.SearchDescriptor{``0}})">
            <inheritdoc />
        </member>
        <member name="M:Nest.NestSerializer.Deserialize``1(System.IO.Stream)">
            <summary>
            Deserialize an object 
            </summary>
            <typeparam name="T">The type you want to deserialize too</typeparam>
            <param name="stream">The stream to deserialize off</param>
        </member>
        <member name="M:Nest.NestSerializer.DeserializeInternal``1(System.IO.Stream,Newtonsoft.Json.JsonConverter)">
            <summary>
            Deserialize to type T bypassing checks for custom deserialization state and or BaseResponse return types.
            </summary>
        </member>
        <member name="M:Nest.NestSerializer.SerializeMultiSearch(Nest.IMultiSearchRequest)">
            <summary>
            _msearch needs a specialized json format in the body
            </summary>
        </member>
        <member name="T:Nest.GetSnapshotDescriptor">
            <summary>descriptor for SnapshotGet
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html
            </pre>
            </summary>
        </member>
        <member name="M:Nest.GetSnapshotDescriptor.MasterTimeout(System.String)">
            <summary>Explicit operation timeout for connection to master node</summary>
        </member>
        <member name="T:Nest.DocumentOptionalPathDescriptor`3">
            <summary>
            Provides a base for descriptors that need to describe a path in the form of 
            <pre>
            /{index}/{type}/{id}
            </pre>
            if one of the parameters is not explicitly specified this will fall back to the defaults for type 
            this version won't throw if any of the parts are inferred to be empty<para>T</para>
            </summary>
        </member>
        <member name="T:Nest.MultiTermVectorsDescriptor`1">
            <summary>descriptor for MtermvectorsGet
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-termvectors.html
            </pre>
            </summary>
        </member>
        <member name="T:Nest.IndexTypePathDescriptor`3">
            <summary>
            Provides a base for descriptors that need to describe a path in the form of 
            <pre>
            /{index}/{type}
            </pre>
            Where neither parameter is optional
            </summary>
        </member>
        <member name="M:Nest.MultiTermVectorsDescriptor`1.TermStatistics(System.Boolean)">
            <summary>Specifies if total term frequency and document frequency should be returned. Applies to all returned documents unless otherwise specified in body &quot;params&quot; or &quot;docs&quot;.</summary>
        </member>
        <member name="M:Nest.MultiTermVectorsDescriptor`1.FieldStatistics(System.Boolean)">
            <summary>Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned. Applies to all returned documents unless otherwise specified in body &quot;params&quot; or &quot;docs&quot;.</summary>
        </member>
        <member name="M:Nest.MultiTermVectorsDescriptor`1.Fields(System.String[])">
            <summary>A comma-separated list of fields to return. Applies to all returned documents unless otherwise specified in body &quot;params&quot; or &quot;docs&quot;.</summary>
        </member>
        <member name="M:Nest.MultiTermVectorsDescriptor`1.Fields(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>A comma-separated list of fields to return. Applies to all returned documents unless otherwise specified in body &quot;params&quot; or &quot;docs&quot;.</summary>
        </member>
        <member name="M:Nest.MultiTermVectorsDescriptor`1.Offsets(System.Boolean)">
            <summary>Specifies if term offsets should be returned. Applies to all returned documents unless otherwise specified in body &quot;params&quot; or &quot;docs&quot;.</summary>
        </member>
        <member name="M:Nest.MultiTermVectorsDescriptor`1.Positions(System.Boolean)">
            <summary>Specifies if term positions should be returned. Applies to all returned documents unless otherwise specified in body &quot;params&quot; or &quot;docs&quot;.</summary>
        </member>
        <member name="M:Nest.MultiTermVectorsDescriptor`1.Payloads(System.Boolean)">
            <summary>Specifies if term payloads should be returned. Applies to all returned documents unless otherwise specified in body &quot;params&quot; or &quot;docs&quot;.</summary>
        </member>
        <member name="M:Nest.MultiTermVectorsDescriptor`1.Preference(System.String)">
            <summary>Specify the node or shard the operation should be performed on (default: random) .Applies to all returned documents unless otherwise specified in body &quot;params&quot; or &quot;docs&quot;.</summary>
        </member>
        <member name="M:Nest.MultiTermVectorsDescriptor`1.Routing(System.String)">
            <summary>Specific routing value. Applies to all returned documents unless otherwise specified in body &quot;params&quot; or &quot;docs&quot;.</summary>
        </member>
        <member name="M:Nest.MultiTermVectorsDescriptor`1.Parent(System.String)">
            <summary>Parent id of documents. Applies to all returned documents unless otherwise specified in body &quot;params&quot; or &quot;docs&quot;.</summary>
        </member>
        <member name="T:Nest.RestoreDescriptor">
            <summary>descriptor for SnapshotRestore
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html
            </pre>
            </summary>
        </member>
        <member name="M:Nest.RestoreDescriptor.MasterTimeout(System.String)">
            <summary>Explicit operation timeout for connection to master node</summary>
        </member>
        <member name="M:Nest.RestoreDescriptor.WaitForCompletion(System.Boolean)">
            <summary>Should this request wait until the operation has completed before returning</summary>
        </member>
        <member name="T:Nest.SnapshotDescriptor">
            <summary>descriptor for SnapshotCreate
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html
            </pre>
            </summary>
        </member>
        <member name="M:Nest.SnapshotDescriptor.MasterTimeout(System.String)">
            <summary>Explicit operation timeout for connection to master node</summary>
        </member>
        <member name="M:Nest.SnapshotDescriptor.WaitForCompletion(System.Boolean)">
            <summary>Should this request wait until the operation has completed before returning</summary>
        </member>
        <member name="T:Nest.DeleteRepositoryDescriptor">
            <summary>descriptor for SnapshotDeleteRepository
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html
            </pre>
            </summary>
        </member>
        <member name="T:Nest.RepositoryPathDescriptor`2">
            <summary>
            Provides a base for descriptors that need to describe a path that contains a
            <pre>
            {repository}
            </pre>
            routing value
            </summary>
        </member>
        <member name="M:Nest.RepositoryPathDescriptor`2.Repository(System.String)">
            <summary>
            Specify the name of the repository we are targeting
            </summary>
        </member>
        <member name="M:Nest.DeleteRepositoryDescriptor.MasterTimeout(System.String)">
            <summary>Explicit operation timeout for connection to master node</summary>
        </member>
        <member name="M:Nest.DeleteRepositoryDescriptor.Timeout(System.String)">
            <summary>Explicit operation timeout</summary>
        </member>
        <member name="M:Nest.HdfsRepositoryDescriptor.Uri(System.String)">
            <summary>
            optional - Hadoop file-system URI
            </summary>
        </member>
        <member name="M:Nest.HdfsRepositoryDescriptor.Path(System.String)">
             <summary>
            required - path with the file-system where data is stored/loaded
             </summary>
        </member>
        <member name="M:Nest.HdfsRepositoryDescriptor.LoadDefaults(System.Boolean)">
            <summary>
            whether to load the default Hadoop configuration (default) or not
            </summary>
            <param name="loadDefaults"></param>
        </member>
        <member name="M:Nest.HdfsRepositoryDescriptor.ConfigurationLocation(System.String)">
            <summary>
            Hadoop configuration XML to be loaded (use commas for multi values)
            </summary>
            <param name="configurationLocation"></param>
        </member>
        <member name="M:Nest.HdfsRepositoryDescriptor.InlinedHadoopConfiguration(System.String,System.Object)">
            <summary>
            'inlined' key=value added to the Hadoop configuration
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nest.HdfsRepositoryDescriptor.Compress(System.Boolean)">
            <summary>
            When set to true metadata files are stored in compressed format. This setting doesn't 
            affect index files that are already compressed by default. Defaults to false.
            </summary>
            <param name="compress"></param>
        </member>
        <member name="M:Nest.HdfsRepositoryDescriptor.ConcurrentStreams(System.Int32)">
            <summary>
            Throttles the number of streams (per node) preforming snapshot operation. Defaults to 5
            </summary>
            <param name="concurrentStreams"></param>
        </member>
        <member name="M:Nest.HdfsRepositoryDescriptor.ChunkSize(System.String)">
            <summary>
             Big files can be broken down into chunks during snapshotting if needed.
             The chunk size can be specified in bytes or by using size value notation,
             i.e. 1g, 10m, 5k. Disabled by default
            </summary>
            <param name="chunkSize"></param>
        </member>
        <member name="M:Nest.AzureRepositoryDescriptor.Container(System.String)">
            <summary>
            Container name. Defaults to elasticsearch-snapshots
            </summary>
            <param name="bucket"></param>
        </member>
        <member name="M:Nest.AzureRepositoryDescriptor.BasePath(System.String)">
             <summary>
            Specifies the path within container to repository data. Defaults to empty (root directory).
             </summary>
             <param name="basePath"></param>
             <returns></returns>
        </member>
        <member name="M:Nest.AzureRepositoryDescriptor.Compress(System.Boolean)">
            <summary>
            When set to true metadata files are stored in compressed format. This setting doesn't 
            affect index files that are already compressed by default. Defaults to false.
            </summary>
            <param name="compress"></param>
        </member>
        <member name="M:Nest.AzureRepositoryDescriptor.ConcurrentStreams(System.Int32)">
            <summary>
            Throttles the number of streams (per node) preforming snapshot operation. Defaults to 5
            </summary>
            <param name="concurrentStreams"></param>
        </member>
        <member name="M:Nest.AzureRepositoryDescriptor.ChunkSize(System.String)">
            <summary>
             Big files can be broken down into chunks during snapshotting if needed.
             The chunk size can be specified in bytes or by using size value notation,
             i.e. 1g, 10m, 5k. Defaults to 64m (64m max)
            </summary>
            <param name="chunkSize"></param>
        </member>
        <member name="M:Nest.S3RepositoryDescriptor.Bucket(System.String)">
            <summary>
            The name of the bucket to be used for snapshots. (Mandatory)
            </summary>
            <param name="bucket"></param>
        </member>
        <member name="M:Nest.S3RepositoryDescriptor.Region(System.String)">
            <summary>
            The region where bucket is located. Defaults to US Standard
            </summary>
            <param name="region"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.S3RepositoryDescriptor.BasePath(System.String)">
            <summary>
            Specifies the path within bucket to repository data. Defaults to root directory.
            </summary>
            <param name="basePath"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.S3RepositoryDescriptor.AccessKey(System.String)">
            <summary>
            The access key to use for authentication. Defaults to value of cloud.aws.access_key.
            </summary>
            <param name="accessKey"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.S3RepositoryDescriptor.SecretKey(System.String)">
            <summary>
            The secret key to use for authentication. Defaults to value of cloud.aws.secret_key.
            </summary>
            <param name="secretKey"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.S3RepositoryDescriptor.Compress(System.Boolean)">
            <summary>
            When set to true metadata files are stored in compressed format. This setting doesn't 
            affect index files that are already compressed by default. Defaults to false.
            </summary>
            <param name="compress"></param>
        </member>
        <member name="M:Nest.S3RepositoryDescriptor.ConcurrentStreams(System.Int32)">
            <summary>
            Throttles the number of streams (per node) preforming snapshot operation. Defaults to 5
            </summary>
            <param name="concurrentStreams"></param>
        </member>
        <member name="M:Nest.S3RepositoryDescriptor.ChunkSize(System.String)">
            <summary>
             Big files can be broken down into chunks during snapshotting if needed. 
            The chunk size can be specified in bytes or by using size value notation, 
            i.e. 1g, 10m, 5k. Defaults to 100m.
            </summary>
            <param name="chunkSize"></param>
        </member>
        <member name="M:Nest.FileSystemRepositoryDescriptor.Location(System.String)">
            <summary>
            Location of the snapshots. Mandatory.
            </summary>
            <param name="location"></param>
        </member>
        <member name="M:Nest.FileSystemRepositoryDescriptor.Compress(System.Boolean)">
            <summary>
            Turns on compression of the snapshot files. Defaults to true.
            </summary>
            <param name="compress"></param>
        </member>
        <member name="M:Nest.FileSystemRepositoryDescriptor.ConcurrentStreams(System.Int32)">
            <summary>
            Throttles the number of streams (per node) preforming snapshot operation. Defaults to 5
            </summary>
            <param name="concurrentStreams"></param>
        </member>
        <member name="M:Nest.FileSystemRepositoryDescriptor.ChunkSize(System.String)">
            <summary>
            Big files can be broken down into chunks during snapshotting if needed. 
            The chunk size can be specified in bytes or by using size value notation, i.e. 1g, 10m, 5k. 
            Defaults to null (unlimited chunk size).
            </summary>
            <param name="chunkSize"></param>
        </member>
        <member name="M:Nest.FileSystemRepositoryDescriptor.RestoreBytesPerSecondMaximum(System.String)">
            <summary>
            Throttles per node restore rate. Defaults to 20mb per second.
            </summary>
            <param name="maximumBytesPerSecond"></param>
        </member>
        <member name="M:Nest.FileSystemRepositoryDescriptor.SnapshortBytesPerSecondMaximum(System.String)">
            <summary>
            Throttles per node snapshot rate. Defaults to 20mb per second. 
            </summary>
            <param name="maximumBytesPerSecond"></param>
        </member>
        <member name="M:Nest.ReadOnlyUrlRepositoryDescriptor.Location(System.String)">
            <summary>
            Location of the snapshots. Mandatory.
            </summary>
            <param name="location"></param>
        </member>
        <member name="M:Nest.ReadOnlyUrlRepositoryDescriptor.ConcurrentStreams(System.Int32)">
            <summary>
            Throttles the number of streams (per node) preforming snapshot operation. Defaults to 5
            </summary>
            <param name="concurrentStreams"></param>
        </member>
        <member name="M:Nest.RequestPameterExtensions._Fields``1(Elasticsearch.Net.CatFielddataRequestParameters,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}})">
            <summary>A comma-separated list of fields to return the fielddata size</summary>
        </member>
        <member name="M:Nest.RequestPameterExtensions._Fields``1(Elasticsearch.Net.ExplainRequestParameters,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}})">
            <summary>A comma-separated list of fields to return in the response</summary>
        </member>
        <member name="M:Nest.RequestPameterExtensions._SourceExclude``1(Elasticsearch.Net.ExplainRequestParameters,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}})">
            <summary>A list of fields to exclude from the returned _source field</summary>
        </member>
        <member name="M:Nest.RequestPameterExtensions._SourceInclude``1(Elasticsearch.Net.ExplainRequestParameters,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}})">
            <summary>A list of fields to extract and return from the _source field</summary>
        </member>
        <member name="M:Nest.RequestPameterExtensions._Fields``1(Elasticsearch.Net.GetRequestParameters,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}})">
            <summary>A comma-separated list of fields to return in the response</summary>
        </member>
        <member name="M:Nest.RequestPameterExtensions._SourceExclude``1(Elasticsearch.Net.GetRequestParameters,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}})">
            <summary>A list of fields to exclude from the returned _source field</summary>
        </member>
        <member name="M:Nest.RequestPameterExtensions._SourceInclude``1(Elasticsearch.Net.GetRequestParameters,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}})">
            <summary>A list of fields to extract and return from the _source field</summary>
        </member>
        <member name="M:Nest.RequestPameterExtensions._SourceExclude``1(Elasticsearch.Net.SourceRequestParameters,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}})">
            <summary>A list of fields to exclude from the returned _source field</summary>
        </member>
        <member name="M:Nest.RequestPameterExtensions._SourceInclude``1(Elasticsearch.Net.SourceRequestParameters,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}})">
            <summary>A list of fields to extract and return from the _source field</summary>
        </member>
        <member name="M:Nest.RequestPameterExtensions._Field``1(Elasticsearch.Net.AnalyzeRequestParameters,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>Use the analyzer configured for this field (instead of passing the analyzer name)</summary>
        </member>
        <member name="M:Nest.RequestPameterExtensions._Fields``1(Elasticsearch.Net.ClearCacheRequestParameters,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}})">
            <summary>A comma-separated list of fields to clear when using the `field_data` parameter (default: all)</summary>
        </member>
        <member name="M:Nest.RequestPameterExtensions._CompletionFields``1(Elasticsearch.Net.IndicesStatsRequestParameters,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}})">
            <summary>A comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards)</summary>
        </member>
        <member name="M:Nest.RequestPameterExtensions._FielddataFields``1(Elasticsearch.Net.IndicesStatsRequestParameters,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}})">
            <summary>A comma-separated list of fields for `fielddata` index metric (supports wildcards)</summary>
        </member>
        <member name="M:Nest.RequestPameterExtensions._Fields``1(Elasticsearch.Net.IndicesStatsRequestParameters,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}})">
            <summary>A comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards)</summary>
        </member>
        <member name="M:Nest.RequestPameterExtensions._Fields``1(Elasticsearch.Net.MultiGetRequestParameters,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}})">
            <summary>A comma-separated list of fields to return in the response</summary>
        </member>
        <member name="M:Nest.RequestPameterExtensions._SourceExclude``1(Elasticsearch.Net.MultiGetRequestParameters,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}})">
            <summary>A list of fields to exclude from the returned _source field</summary>
        </member>
        <member name="M:Nest.RequestPameterExtensions._SourceInclude``1(Elasticsearch.Net.MultiGetRequestParameters,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}})">
            <summary>A list of fields to extract and return from the _source field</summary>
        </member>
        <member name="M:Nest.RequestPameterExtensions._MltFields``1(Elasticsearch.Net.MoreLikeThisRequestParameters,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}})">
            <summary>Specific fields to perform the query against</summary>
        </member>
        <member name="M:Nest.RequestPameterExtensions._Fields``1(Elasticsearch.Net.MultiTermVectorsRequestParameters,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}})">
            <summary>A comma-separated list of fields to return. Applies to all returned documents unless otherwise specified in body &quot;params&quot; or &quot;docs&quot;.</summary>
        </member>
        <member name="M:Nest.RequestPameterExtensions._CompletionFields``1(Elasticsearch.Net.NodesStatsRequestParameters,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}})">
            <summary>A comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards)</summary>
        </member>
        <member name="M:Nest.RequestPameterExtensions._FielddataFields``1(Elasticsearch.Net.NodesStatsRequestParameters,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}})">
            <summary>A comma-separated list of fields for `fielddata` index metric (supports wildcards)</summary>
        </member>
        <member name="M:Nest.RequestPameterExtensions._Fields``1(Elasticsearch.Net.NodesStatsRequestParameters,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}})">
            <summary>A comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards)</summary>
        </member>
        <member name="M:Nest.RequestPameterExtensions._SuggestField``1(Elasticsearch.Net.SearchRequestParameters,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>Specify which field to use for suggestions</summary>
        </member>
        <member name="M:Nest.RequestPameterExtensions._Fields``1(Elasticsearch.Net.TermvectorRequestParameters,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}})">
            <summary>A comma-separated list of fields to return.</summary>
        </member>
        <member name="T:Nest.ClearScrollDescriptor">
            <summary>descriptor for ClearScroll
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-request-scroll.html
            </pre>
            </summary>
        </member>
        <member name="M:Nest.ClearScrollDescriptor.ScrollId(System.String)">
            <summary>
            Specify the {name} part of the operation
            </summary>
        </member>
        <member name="T:Nest.CreateRepositoryDescriptor">
            <summary>descriptor for SnapshotCreateRepository
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html
            </pre>
            </summary>
        </member>
        <member name="M:Nest.CreateRepositoryDescriptor.FileSystem(System.String,System.Action{Nest.FileSystemRepositoryDescriptor})">
            <summary>
            The shared file system repository ("type": "fs") is using shared file system to store snapshot. 
            The path specified in the location parameter should point to the same location in the shared 
            filesystem and be accessible on all data and master nodes. 
            </summary>
            <param name="location"></param>
            <param name="options"></param>
        </member>
        <member name="M:Nest.CreateRepositoryDescriptor.ReadOnlyUrl(System.String,System.Action{Nest.ReadOnlyUrlRepositoryDescriptor})">
            <summary>
            The URL repository ("type": "url") can be used as an alternative read-only way to access data 
            created by shared file system repository is using shared file system to store snapshot. 
            </summary>
            <param name="location"></param>
            <param name="options"></param>
        </member>
        <member name="M:Nest.CreateRepositoryDescriptor.Azure(System.Action{Nest.AzureRepositoryDescriptor})">
            <summary>
            Specify an azure storage container to snapshot and restore to. (defaults to a container named elasticsearch-snapshots)
            </summary>
        </member>
        <member name="M:Nest.CreateRepositoryDescriptor.Hdfs(System.String,System.Action{Nest.HdfsRepositoryDescriptor})">
            <summary>
            Create an snapshot/restore repository that points to an HDFS filesystem
            </summary>
            <param name="path"></param>
            <param name="options"></param>
        </member>
        <member name="M:Nest.CreateRepositoryDescriptor.Custom(Nest.IRepository)">
            <summary>
            Register a custom repository
            </summary>
        </member>
        <member name="M:Nest.CreateRepositoryDescriptor.MasterTimeout(System.String)">
            <summary>Explicit operation timeout for connection to master node</summary>
        </member>
        <member name="M:Nest.CreateRepositoryDescriptor.Timeout(System.String)">
            <summary>Explicit operation timeout</summary>
        </member>
        <member name="T:Nest.IndexDescriptor`1">
            <summary>descriptor for Index
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-index_.html
            </pre>
            </summary>
        </member>
        <member name="M:Nest.IndexDescriptor`1.Consistency(Elasticsearch.Net.Consistency)">
            <summary>Explicit write consistency setting for the operation</summary>
        </member>
        <member name="M:Nest.IndexDescriptor`1.OpType(Elasticsearch.Net.OpType)">
            <summary>Explicit operation type</summary>
        </member>
        <member name="M:Nest.IndexDescriptor`1.Parent(System.String)">
            <summary>ID of the parent document</summary>
        </member>
        <member name="M:Nest.IndexDescriptor`1.Refresh(System.Boolean)">
            <summary>Refresh the index after performing the operation</summary>
        </member>
        <member name="M:Nest.IndexDescriptor`1.Replication(Elasticsearch.Net.Replication)">
            <summary>Specific replication type</summary>
        </member>
        <member name="M:Nest.IndexDescriptor`1.Routing(System.String)">
            <summary>Specific routing value</summary>
        </member>
        <member name="M:Nest.IndexDescriptor`1.Timeout(System.String)">
            <summary>Explicit operation timeout</summary>
        </member>
        <member name="M:Nest.IndexDescriptor`1.Timestamp(System.String)">
            <summary>Explicit timestamp for the document</summary>
        </member>
        <member name="M:Nest.IndexDescriptor`1.Ttl(System.String)">
            <summary>Expiration time for the document</summary>
        </member>
        <member name="M:Nest.IndexDescriptor`1.Version(System.Int64)">
            <summary>Explicit version number for concurrency control</summary>
        </member>
        <member name="M:Nest.IndexDescriptor`1.VersionType(Elasticsearch.Net.VersionType)">
            <summary>Specific version type</summary>
        </member>
        <member name="T:Nest.PercolateCountDescriptor`1">
            <summary>descriptor for CountPercolateGet
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html
            </pre>
            </summary>
        </member>
        <member name="M:Nest.PercolateCountDescriptor`1.Object(`0)">
            <summary>
            The object to perculate
            </summary>
        </member>
        <member name="M:Nest.PercolateCountDescriptor`1.Query(System.Func{Nest.QueryDescriptor{`0},Nest.QueryContainer})">
            <summary>
            Optionally specify more search options such as facets, from/to etcetera.
            </summary>
        </member>
        <member name="M:Nest.PercolateCountDescriptor`1.Routing(System.String[])">
            <summary>A comma-separated list of specific routing values</summary>
        </member>
        <member name="M:Nest.PercolateCountDescriptor`1.Preference(System.String)">
            <summary>Specify the node or shard the operation should be performed on (default: random)</summary>
        </member>
        <member name="M:Nest.PercolateCountDescriptor`1.IgnoreUnavailable(System.Boolean)">
            <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
        </member>
        <member name="M:Nest.PercolateCountDescriptor`1.AllowNoIndices(System.Boolean)">
            <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
        </member>
        <member name="M:Nest.PercolateCountDescriptor`1.ExpandWildcards(Elasticsearch.Net.ExpandWildcards)">
            <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        </member>
        <member name="M:Nest.PercolateCountDescriptor`1.PercolateIndex(System.String)">
            <summary>The index to count percolate the document into. Defaults to index.</summary>
        </member>
        <member name="M:Nest.PercolateCountDescriptor`1.PercolateType(System.String)">
            <summary>The type to count percolate document into. Defaults to type.</summary>
        </member>
        <member name="M:Nest.PercolateCountDescriptor`1.Version(System.Int64)">
            <summary>Explicit version number for concurrency control</summary>
        </member>
        <member name="M:Nest.PercolateCountDescriptor`1.VersionType(Elasticsearch.Net.VersionType)">
            <summary>Specific version type</summary>
        </member>
        <member name="T:Nest.SuggestDescriptor`1">
            <summary>descriptor for Suggest
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-search.html
            </pre>
            </summary>
        </member>
        <member name="T:Nest.IndicesOptionalExplicitAllPathDescriptor`2">
            <summary>
            Provides a base for descriptors that need to describe a path in the form of 
            <pre>
            /{indices}
            </pre>
            {indices} is optional but AllIndices() needs to be explicitly called.
            </summary>
        </member>
        <member name="M:Nest.SuggestDescriptor`1.GlobalText(System.String)">
            <summary>
            To avoid repetition of the suggest text, it is possible to define a global text.
            </summary>
        </member>
        <member name="M:Nest.SuggestDescriptor`1.Term(System.String,System.Func{Nest.TermSuggestDescriptor{`0},Nest.TermSuggestDescriptor{`0}})">
            <summary>
            The term suggester suggests terms based on edit distance. The provided suggest text is analyzed before terms are suggested. 
            The suggested terms are provided per analyzed suggest text token. The term suggester doesn’t take the query into account that is part of request.
            </summary>
        </member>
        <member name="M:Nest.SuggestDescriptor`1.Phrase(System.String,System.Func{Nest.PhraseSuggestDescriptor{`0},Nest.PhraseSuggestDescriptor{`0}})">
            <summary>
            The phrase suggester adds additional logic on top of the term suggester to select entire corrected phrases 
            instead of individual tokens weighted based on ngram-langugage models. 
            </summary>
        </member>
        <member name="M:Nest.SuggestDescriptor`1.Completion(System.String,System.Func{Nest.CompletionSuggestDescriptor{`0},Nest.CompletionSuggestDescriptor{`0}})">
            <summary>
            The completion suggester is a so-called prefix suggester. 
            It does not do spell correction like the term or phrase suggesters but allows basic auto-complete functionality.
            </summary>
        </member>
        <member name="M:Nest.SuggestDescriptor`1.IgnoreUnavailable(System.Boolean)">
            <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
        </member>
        <member name="M:Nest.SuggestDescriptor`1.AllowNoIndices(System.Boolean)">
            <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
        </member>
        <member name="M:Nest.SuggestDescriptor`1.ExpandWildcards(Elasticsearch.Net.ExpandWildcards)">
            <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        </member>
        <member name="M:Nest.SuggestDescriptor`1.Preference(System.String)">
            <summary>Specify the node or shard the operation should be performed on (default: random)</summary>
        </member>
        <member name="M:Nest.SuggestDescriptor`1.Routing(System.String)">
            <summary>Specific routing value</summary>
        </member>
        <member name="M:Nest.SuggestDescriptor`1.Source(System.String)">
            <summary>The URL-encoded request definition (instead of using request body)</summary>
        </member>
        <member name="T:Nest.CloseIndexDescriptor">
            <summary>descriptor for IndicesClose
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-open-close.html
            </pre>
            </summary>
        </member>
        <member name="T:Nest.IndexPathDescriptorBase`2">
            <summary>
            Provides a base for descriptors that need to describe a path in the form of 
            <pre>
            /{index}
            </pre>
            index is not optional 
            </summary>
        </member>
        <member name="M:Nest.CloseIndexDescriptor.Timeout(System.String)">
            <summary>Explicit operation timeout</summary>
        </member>
        <member name="M:Nest.CloseIndexDescriptor.MasterTimeout(System.String)">
            <summary>Specify timeout for connection to master</summary>
        </member>
        <member name="M:Nest.CloseIndexDescriptor.IgnoreUnavailable(System.Boolean)">
            <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
        </member>
        <member name="M:Nest.CloseIndexDescriptor.AllowNoIndices(System.Boolean)">
            <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
        </member>
        <member name="M:Nest.CloseIndexDescriptor.ExpandWildcards(Elasticsearch.Net.ExpandWildcards)">
            <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        </member>
        <member name="T:Nest.ClusterStateDescriptor">
            <summary>descriptor for ClusterState
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-state.html
            </pre>
            </summary>
        </member>
        <member name="M:Nest.ClusterStateDescriptor.Local(System.Boolean)">
            <summary>Return local information, do not retrieve the state from master node (default: false)</summary>
        </member>
        <member name="M:Nest.ClusterStateDescriptor.MasterTimeout(System.String)">
            <summary>Specify timeout for connection to master</summary>
        </member>
        <member name="M:Nest.ClusterStateDescriptor.FlatSettings(System.Boolean)">
            <summary>Return settings in flat format (default: false)</summary>
        </member>
        <member name="T:Nest.ClearCacheDescriptor">
            <summary>descriptor for IndicesClearCacheForAll
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-clearcache.html
            </pre>
            </summary>
        </member>
        <member name="M:Nest.ClearCacheDescriptor.FieldData(System.Boolean)">
            <summary>Clear field data</summary>
        </member>
        <member name="M:Nest.ClearCacheDescriptor.Fields(System.String[])">
            <summary>A comma-separated list of fields to clear when using the `field_data` parameter (default: all)</summary>
        </member>
        <member name="M:Nest.ClearCacheDescriptor.Fields``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>A comma-separated list of fields to clear when using the `field_data` parameter (default: all)</summary>
        </member>
        <member name="M:Nest.ClearCacheDescriptor.Filter(System.Boolean)">
            <summary>Clear filter caches</summary>
        </member>
        <member name="M:Nest.ClearCacheDescriptor.FilterCache(System.Boolean)">
            <summary>Clear filter caches</summary>
        </member>
        <member name="M:Nest.ClearCacheDescriptor.FilterKeys(System.Boolean)">
            <summary>A comma-separated list of keys to clear when using the `filter_cache` parameter (default: all)</summary>
        </member>
        <member name="M:Nest.ClearCacheDescriptor.Id(System.Boolean)">
            <summary>Clear ID caches for parent/child</summary>
        </member>
        <member name="M:Nest.ClearCacheDescriptor.IdCache(System.Boolean)">
            <summary>Clear ID caches for parent/child</summary>
        </member>
        <member name="M:Nest.ClearCacheDescriptor.IgnoreUnavailable(System.Boolean)">
            <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
        </member>
        <member name="M:Nest.ClearCacheDescriptor.AllowNoIndices(System.Boolean)">
            <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
        </member>
        <member name="M:Nest.ClearCacheDescriptor.ExpandWildcards(Elasticsearch.Net.ExpandWildcards)">
            <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        </member>
        <member name="M:Nest.ClearCacheDescriptor.IndexQueryString(System.String[])">
            <summary>A comma-separated list of index name to limit the operation</summary>
        </member>
        <member name="M:Nest.ClearCacheDescriptor.Recycler(System.Boolean)">
            <summary>Clear the recycler cache</summary>
        </member>
        <member name="T:Nest.SourceDescriptor`1">
            <summary>descriptor for GetSource
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-get.html
            </pre>
            </summary>
        </member>
        <member name="T:Nest.DocumentPathDescriptor`3">
            <summary>
            Provides a base for descriptors that need to describe a path in the form of 
            <pre>
            /{index}/{type}/{id}
            </pre>
            if one of the parameters is not explicitly specified this will fall back to the defaults for type <para>T</para>
            </summary>
        </member>
        <member name="M:Nest.SourceDescriptor`1.Parent(System.String)">
            <summary>The ID of the parent document</summary>
        </member>
        <member name="M:Nest.SourceDescriptor`1.Preference(System.String)">
            <summary>Specify the node or shard the operation should be performed on (default: random)</summary>
        </member>
        <member name="M:Nest.SourceDescriptor`1.Realtime(System.Boolean)">
            <summary>Specify whether to perform the operation in realtime or search mode</summary>
        </member>
        <member name="M:Nest.SourceDescriptor`1.Refresh(System.Boolean)">
            <summary>Refresh the shard containing the document before performing the operation</summary>
        </member>
        <member name="M:Nest.SourceDescriptor`1.Routing(System.String)">
            <summary>Specific routing value</summary>
        </member>
        <member name="M:Nest.SourceDescriptor`1.SourceEnabled(System.String[])">
            <summary>True or false to return the _source field or not, or a list of fields to return</summary>
        </member>
        <member name="M:Nest.SourceDescriptor`1.SourceExclude(System.String[])">
            <summary>A list of fields to exclude from the returned _source field</summary>
        </member>
        <member name="M:Nest.SourceDescriptor`1.SourceExclude(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>A list of fields to exclude from the returned _source field</summary>
        </member>
        <member name="M:Nest.SourceDescriptor`1.SourceInclude(System.String[])">
            <summary>A list of fields to extract and return from the _source field</summary>
        </member>
        <member name="M:Nest.SourceDescriptor`1.SourceInclude(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>A list of fields to extract and return from the _source field</summary>
        </member>
        <member name="M:Nest.SourceDescriptor`1.Version(System.Int64)">
            <summary>Explicit version number for concurrency control</summary>
        </member>
        <member name="M:Nest.SourceDescriptor`1.VersionType(Elasticsearch.Net.VersionType)">
            <summary>Specific version type</summary>
        </member>
        <member name="T:Nest.NodesStatsDescriptor">
            <summary>descriptor for NodesStatsForAll
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-stats.html
            </pre>
            </summary>
        </member>
        <member name="T:Nest.NodeIdOptionalDescriptor`2">
            <summary>
            Provides a base for descriptors that need to describe a path in the form of 
            <pre>
            /{nodeid}
            </pre>
            node id is optional
            </summary>
        </member>
        <member name="M:Nest.NodeIdOptionalDescriptor`2.NodeId(System.String)">
            <summary>
            Specify the {name} part of the operation
            </summary>
        </member>
        <member name="M:Nest.NodesStatsDescriptor.CompletionFields(System.String[])">
            <summary>A comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards)</summary>
        </member>
        <member name="M:Nest.NodesStatsDescriptor.CompletionFields``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>A comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards)</summary>
        </member>
        <member name="M:Nest.NodesStatsDescriptor.FielddataFields(System.String[])">
            <summary>A comma-separated list of fields for `fielddata` index metric (supports wildcards)</summary>
        </member>
        <member name="M:Nest.NodesStatsDescriptor.FielddataFields``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>A comma-separated list of fields for `fielddata` index metric (supports wildcards)</summary>
        </member>
        <member name="M:Nest.NodesStatsDescriptor.Fields(System.String[])">
            <summary>A comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards)</summary>
        </member>
        <member name="M:Nest.NodesStatsDescriptor.Fields``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>A comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards)</summary>
        </member>
        <member name="M:Nest.NodesStatsDescriptor.Groups(System.Boolean)">
            <summary>A comma-separated list of search groups for `search` index metric</summary>
        </member>
        <member name="M:Nest.NodesStatsDescriptor.Human(System.Boolean)">
            <summary>Whether to return time and byte values in human-readable format.</summary>
        </member>
        <member name="M:Nest.NodesStatsDescriptor.Level(Elasticsearch.Net.Level)">
            <summary>Return indices stats aggregated at node, index or shard level</summary>
        </member>
        <member name="M:Nest.NodesStatsDescriptor.Types(System.String[])">
            <summary>A comma-separated list of document types for the `indexing` index metric</summary>
        </member>
        <member name="T:Nest.NodesInfoDescriptor">
            <summary>descriptor for NodesInfoForAll
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-info.html
            </pre>
            </summary>
        </member>
        <member name="M:Nest.NodesInfoDescriptor.FlatSettings(System.Boolean)">
            <summary>Return settings in flat format (default: false)</summary>
        </member>
        <member name="M:Nest.NodesInfoDescriptor.Human(System.Boolean)">
            <summary>Whether to return time and byte values in human-readable format.</summary>
        </member>
        <member name="T:Nest.ClusterHealthDescriptor">
            <summary>descriptor for ClusterHealth
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-health.html
            </pre>
            </summary>
        </member>
        <member name="M:Nest.ClusterHealthDescriptor.Level(Elasticsearch.Net.Level)">
            <summary>Specify the level of detail for returned information</summary>
        </member>
        <member name="M:Nest.ClusterHealthDescriptor.Local(System.Boolean)">
            <summary>Return local information, do not retrieve the state from master node (default: false)</summary>
        </member>
        <member name="M:Nest.ClusterHealthDescriptor.MasterTimeout(System.String)">
            <summary>Explicit operation timeout for connection to master node</summary>
        </member>
        <member name="M:Nest.ClusterHealthDescriptor.Timeout(System.String)">
            <summary>Explicit operation timeout</summary>
        </member>
        <member name="M:Nest.ClusterHealthDescriptor.WaitForActiveShards(System.Int64)">
            <summary>Wait until the specified number of shards is active</summary>
        </member>
        <member name="M:Nest.ClusterHealthDescriptor.WaitForNodes(System.String)">
            <summary>Wait until the specified number of nodes is available</summary>
        </member>
        <member name="M:Nest.ClusterHealthDescriptor.WaitForRelocatingShards(System.Int64)">
            <summary>Wait until the specified number of relocating shards is finished</summary>
        </member>
        <member name="M:Nest.ClusterHealthDescriptor.WaitForStatus(Elasticsearch.Net.WaitForStatus)">
            <summary>Wait until cluster is in a specific state</summary>
        </member>
        <member name="T:Nest.AnalyzeDescriptor">
            <summary>descriptor for IndicesAnalyzeGetForAll
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-analyze.html
            </pre>
            </summary>
        </member>
        <member name="M:Nest.AnalyzeDescriptor.Analyzer(System.String)">
            <summary>The name of the analyzer to use</summary>
        </member>
        <member name="M:Nest.AnalyzeDescriptor.CharFilters(System.String[])">
            <summary>A comma-separated list of character filters to use for the analysis</summary>
        </member>
        <member name="M:Nest.AnalyzeDescriptor.Field(System.String)">
            <summary>Use the analyzer configured for this field (instead of passing the analyzer name)</summary>
        </member>
        <member name="M:Nest.AnalyzeDescriptor.Field``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>Use the analyzer configured for this field (instead of passing the analyzer name)</summary>
        </member>
        <member name="M:Nest.AnalyzeDescriptor.Filters(System.String[])">
            <summary>A comma-separated list of filters to use for the analysis</summary>
        </member>
        <member name="M:Nest.AnalyzeDescriptor.IndexQueryString(System.String)">
            <summary>The name of the index to scope the operation</summary>
        </member>
        <member name="M:Nest.AnalyzeDescriptor.PreferLocal(System.Boolean)">
            <summary>With `true`, specify that a local shard should be used if available, with `false`, use a random shard (default: true)</summary>
        </member>
        <member name="M:Nest.AnalyzeDescriptor.Text(System.String)">
            <summary>The text on which the analysis should be performed (when request body is not used)</summary>
        </member>
        <member name="M:Nest.AnalyzeDescriptor.Tokenizer(System.String)">
            <summary>The name of the tokenizer to use for the analysis</summary>
        </member>
        <member name="M:Nest.AnalyzeDescriptor.Format(Elasticsearch.Net.Format)">
            <summary>Format of the output</summary>
        </member>
        <member name="T:Nest.AliasDescriptor">
            <summary>descriptor for IndicesUpdateAliasesForAll
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html
            </pre>
            </summary>
        </member>
        <member name="M:Nest.AliasDescriptor.Timeout(System.String)">
            <summary>Request timeout</summary>
        </member>
        <member name="M:Nest.AliasDescriptor.MasterTimeout(System.String)">
            <summary>Specify timeout for connection to master</summary>
        </member>
        <member name="T:Nest.IndicesStatusDescriptor">
            <summary>descriptor for IndicesStatusForAll
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-status.html
            </pre>
            </summary>
        </member>
        <member name="M:Nest.IndicesStatusDescriptor.IgnoreUnavailable(System.Boolean)">
            <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
        </member>
        <member name="M:Nest.IndicesStatusDescriptor.AllowNoIndices(System.Boolean)">
            <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
        </member>
        <member name="M:Nest.IndicesStatusDescriptor.ExpandWildcards(Elasticsearch.Net.ExpandWildcards)">
            <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        </member>
        <member name="M:Nest.IndicesStatusDescriptor.Human(System.Boolean)">
            <summary>Whether to return time and byte values in human-readable format.</summary>
        </member>
        <member name="M:Nest.IndicesStatusDescriptor.OperationThreading(System.String)">
            <summary>TODO: ?</summary>
        </member>
        <member name="M:Nest.IndicesStatusDescriptor.Recovery(System.Boolean)">
            <summary>Return information about shard recovery</summary>
        </member>
        <member name="M:Nest.IndicesStatusDescriptor.Snapshot(System.Boolean)">
            <summary>TODO: ?</summary>
        </member>
        <member name="T:Nest.GetAliasesDescriptor">
            <summary>descriptor for IndicesGetAliasesForAll
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html
            </pre>
            </summary>
        </member>
        <member name="M:Nest.GetAliasesDescriptor.Timeout(System.String)">
            <summary>Explicit operation timeout</summary>
        </member>
        <member name="M:Nest.GetAliasesDescriptor.Local(System.Boolean)">
            <summary>Return local information, do not retrieve the state from master node (default: false)</summary>
        </member>
        <member name="T:Nest.DeleteDescriptor`1">
            <summary>descriptor for Delete
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-delete.html
            </pre>
            </summary>
        </member>
        <member name="M:Nest.DeleteDescriptor`1.Consistency(Elasticsearch.Net.Consistency)">
            <summary>Specific write consistency setting for the operation</summary>
        </member>
        <member name="M:Nest.DeleteDescriptor`1.Parent(System.String)">
            <summary>ID of parent document</summary>
        </member>
        <member name="M:Nest.DeleteDescriptor`1.Refresh(System.Boolean)">
            <summary>Refresh the index after performing the operation</summary>
        </member>
        <member name="M:Nest.DeleteDescriptor`1.Replication(Elasticsearch.Net.Replication)">
            <summary>Specific replication type</summary>
        </member>
        <member name="M:Nest.DeleteDescriptor`1.Routing(System.String)">
            <summary>Specific routing value</summary>
        </member>
        <member name="M:Nest.DeleteDescriptor`1.Timeout(System.String)">
            <summary>Explicit operation timeout</summary>
        </member>
        <member name="M:Nest.DeleteDescriptor`1.Version(System.Int64)">
            <summary>Explicit version number for concurrency control</summary>
        </member>
        <member name="M:Nest.DeleteDescriptor`1.VersionType(Elasticsearch.Net.VersionType)">
            <summary>Specific version type</summary>
        </member>
        <member name="T:Nest.DocumentExistsDescriptor`1">
            <summary>descriptor for Exists
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-get.html
            </pre>
            </summary>
        </member>
        <member name="M:Nest.DocumentExistsDescriptor`1.Parent(System.String)">
            <summary>The ID of the parent document</summary>
        </member>
        <member name="M:Nest.DocumentExistsDescriptor`1.Preference(System.String)">
            <summary>Specify the node or shard the operation should be performed on (default: random)</summary>
        </member>
        <member name="M:Nest.DocumentExistsDescriptor`1.Realtime(System.Boolean)">
            <summary>Specify whether to perform the operation in realtime or search mode</summary>
        </member>
        <member name="M:Nest.DocumentExistsDescriptor`1.Refresh(System.Boolean)">
            <summary>Refresh the shard containing the document before performing the operation</summary>
        </member>
        <member name="M:Nest.DocumentExistsDescriptor`1.Routing(System.String)">
            <summary>Specific routing value</summary>
        </member>
        <member name="T:Nest.CountDescriptor`1">
            <summary>descriptor for Count
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-count.html
            </pre>
            </summary>
        </member>
        <member name="T:Nest.QueryPathDescriptorBase`3">
            <summary>
            Provides a base for descriptors that need to describe a path in the form of 
            <pre>
            /{indices}/{types}
            </pre>
            all parameters are optional and will default to the defaults for <para>T</para>
            </summary>
        </member>
        <member name="M:Nest.QueryPathDescriptorBase`3.Indices(System.Type[])">
            <summary>
            The indices to execute the search on. Defaults to the default index
            </summary>
        </member>
        <member name="M:Nest.QueryPathDescriptorBase`3.Indices(Nest.IndexNameMarker[])">
            <summary>
            The indices to execute the search on. Defaults to the default index
            </summary>
        </member>
        <member name="M:Nest.QueryPathDescriptorBase`3.Indices(System.String[])">
            <summary>
            The indices to execute the search on. Defaults to the default index
            </summary>
        </member>
        <member name="M:Nest.QueryPathDescriptorBase`3.Indices(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            The indices to execute the search on. Defaults to the default index
            </summary>
        </member>
        <member name="M:Nest.QueryPathDescriptorBase`3.Indices(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            The indices to execute the search on. Defaults to the default index
            </summary>
        </member>
        <member name="M:Nest.QueryPathDescriptorBase`3.Index``1">
            <summary>
            The index to execute the search on, using the default index for typeof TAlternative. Defaults to the default index
            </summary>
        </member>
        <member name="M:Nest.QueryPathDescriptorBase`3.Index(System.Type)">
            <summary>
            The index to execute the search on. Defaults to the default index
            </summary>
        </member>
        <member name="M:Nest.QueryPathDescriptorBase`3.Index(Nest.IndexNameMarker)">
            <summary>
            The index to execute the search on. Defaults to the default index
            </summary>
        </member>
        <member name="M:Nest.QueryPathDescriptorBase`3.Index(System.String)">
            <summary>
            The index to execute the search on. Defaults to the default index
            </summary>
        </member>
        <member name="M:Nest.QueryPathDescriptorBase`3.Types(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            The types to execute the search on. Defaults to the inferred typename of T 
            unless T is dynamic then a type (or AllTypes()) MUST be specified.
            </summary>
        </member>
        <member name="M:Nest.QueryPathDescriptorBase`3.Types(System.String[])">
            <summary>
            The types to execute the search on. Defaults to the inferred typename of T 
            unless T is dynamic then a type (or AllTypes()) MUST be specified.
            </summary>
        </member>
        <member name="M:Nest.QueryPathDescriptorBase`3.Types(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            The types to execute the search on. Defaults to the inferred typename of T 
            unless T is dynamic then a type (or AllTypes()) MUST be specified.
            </summary>
        </member>
        <member name="M:Nest.QueryPathDescriptorBase`3.Types(Nest.TypeNameMarker[])">
            <summary>
            The types to execute the search on. Defaults to the inferred typename of T 
            unless T is dynamic then a type (or AllTypes()) MUST be specified.
            </summary>
        </member>
        <member name="M:Nest.QueryPathDescriptorBase`3.Types(System.Type[])">
            <summary>
            The types to execute the search on. Defaults to the inferred typename of T 
            unless T is dynamic then a type (or AllTypes()) MUST be specified.
            </summary>
        </member>
        <member name="M:Nest.QueryPathDescriptorBase`3.Type(Nest.TypeNameMarker)">
            <summary>
            The type to execute the search on. Defaults to the inferred typename of T 
            unless T is dynamic then a type (or AllTypes()) MUST be specified.
            </summary>
        </member>
        <member name="M:Nest.QueryPathDescriptorBase`3.Type(System.String)">
            <summary>
            The type to execute the search on. Defaults to the inferred typename of T 
            unless T is dynamic then a type (or AllTypes()) MUST be specified.
            </summary>
        </member>
        <member name="M:Nest.QueryPathDescriptorBase`3.Type(System.Type)">
            <summary>
            The type to execute the search on. Defaults to the inferred typename of T 
            unless T is dynamic then a type (or AllTypes()) MUST be specified.
            </summary>
        </member>
        <member name="M:Nest.QueryPathDescriptorBase`3.Type``1">
            <summary>
            An alternative type to infer the typename from
            </summary>
        </member>
        <member name="M:Nest.QueryPathDescriptorBase`3.AllIndices">
            <summary>
            Execute search over all indices
            </summary>
        </member>
        <member name="M:Nest.QueryPathDescriptorBase`3.AllTypes">
            <summary>
            Execute search over all types
            </summary>
        </member>
        <member name="M:Nest.CountDescriptor`1.IgnoreUnavailable(System.Boolean)">
            <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
        </member>
        <member name="M:Nest.CountDescriptor`1.AllowNoIndices(System.Boolean)">
            <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
        </member>
        <member name="M:Nest.CountDescriptor`1.ExpandWildcards(Elasticsearch.Net.ExpandWildcards)">
            <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        </member>
        <member name="M:Nest.CountDescriptor`1.MinScore(System.Double)">
            <summary>Include only documents with a specific `_score` value in the result</summary>
        </member>
        <member name="M:Nest.CountDescriptor`1.Preference(System.String)">
            <summary>Specify the node or shard the operation should be performed on (default: random)</summary>
        </member>
        <member name="M:Nest.CountDescriptor`1.Routing(System.String)">
            <summary>Specific routing value</summary>
        </member>
        <member name="M:Nest.CountDescriptor`1.Source(System.String)">
            <summary>The URL-encoded query definition (instead of using the request body)</summary>
        </member>
        <member name="T:Nest.IndexExistsDescriptor">
            <summary>descriptor for IndicesExists
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-settings.html
            </pre>
            </summary>
        </member>
        <member name="M:Nest.IndexExistsDescriptor.IgnoreUnavailable(System.Boolean)">
            <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
        </member>
        <member name="M:Nest.IndexExistsDescriptor.AllowNoIndices(System.Boolean)">
            <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
        </member>
        <member name="M:Nest.IndexExistsDescriptor.ExpandWildcards(Elasticsearch.Net.ExpandWildcards)">
            <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        </member>
        <member name="M:Nest.IndexExistsDescriptor.Local(System.Boolean)">
            <summary>Return local information, do not retrieve the state from master node (default: false)</summary>
        </member>
        <member name="T:Nest.IndicesStatsDescriptor">
            <summary>descriptor for IndicesStatsForAll
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-stats.html
            </pre>
            </summary>
        </member>
        <member name="M:Nest.IndicesStatsDescriptor.CompletionFields(System.String[])">
            <summary>A comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards)</summary>
        </member>
        <member name="M:Nest.IndicesStatsDescriptor.CompletionFields``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>A comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards)</summary>
        </member>
        <member name="M:Nest.IndicesStatsDescriptor.FielddataFields(System.String[])">
            <summary>A comma-separated list of fields for `fielddata` index metric (supports wildcards)</summary>
        </member>
        <member name="M:Nest.IndicesStatsDescriptor.FielddataFields``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>A comma-separated list of fields for `fielddata` index metric (supports wildcards)</summary>
        </member>
        <member name="M:Nest.IndicesStatsDescriptor.Fields(System.String[])">
            <summary>A comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards)</summary>
        </member>
        <member name="M:Nest.IndicesStatsDescriptor.Fields``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>A comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards)</summary>
        </member>
        <member name="M:Nest.IndicesStatsDescriptor.Groups(System.Boolean)">
            <summary>A comma-separated list of search groups for `search` index metric</summary>
        </member>
        <member name="M:Nest.IndicesStatsDescriptor.Human(System.Boolean)">
            <summary>Whether to return time and byte values in human-readable format.</summary>
        </member>
        <member name="M:Nest.IndicesStatsDescriptor.Level(Elasticsearch.Net.Level)">
            <summary>Return stats aggregated at cluster, index or shard level</summary>
        </member>
        <member name="T:Nest.InfoDescriptor">
            <summary>descriptor for Info
            <pre>
            http://www.elasticsearch.org/guide/
            </pre>
            </summary>
        </member>
        <member name="T:Nest.GetIndexSettingsDescriptor">
            <summary>descriptor for IndicesGetSettingsForAll
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-mapping.html
            </pre>
            </summary>
        </member>
        <member name="M:Nest.GetIndexSettingsDescriptor.IgnoreUnavailable(System.Boolean)">
            <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
        </member>
        <member name="M:Nest.GetIndexSettingsDescriptor.AllowNoIndices(System.Boolean)">
            <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
        </member>
        <member name="M:Nest.GetIndexSettingsDescriptor.ExpandWildcards(Elasticsearch.Net.ExpandWildcards)">
            <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        </member>
        <member name="M:Nest.GetIndexSettingsDescriptor.FlatSettings(System.Boolean)">
            <summary>Return settings in flat format (default: false)</summary>
        </member>
        <member name="M:Nest.GetIndexSettingsDescriptor.Local(System.Boolean)">
            <summary>Return local information, do not retrieve the state from master node (default: false)</summary>
        </member>
        <member name="T:Nest.DeleteIndexDescriptor">
            <summary>descriptor for IndicesDelete
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-delete-index.html
            </pre>
            </summary>
        </member>
        <member name="M:Nest.DeleteIndexDescriptor.Timeout(System.String)">
            <summary>Explicit operation timeout</summary>
        </member>
        <member name="M:Nest.DeleteIndexDescriptor.MasterTimeout(System.String)">
            <summary>Specify timeout for connection to master</summary>
        </member>
        <member name="T:Nest.FlushDescriptor">
            <summary>descriptor for IndicesFlushForAll
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-flush.html
            </pre>
            </summary>
        </member>
        <member name="M:Nest.FlushDescriptor.Force(System.Boolean)">
            <summary>Whether a flush should be forced even if it is not necessarily needed ie. if no changes will be committed to the index. This is useful if transaction log IDs should be incremented even if no uncommitted changes are present. (This setting can be considered as internal)</summary>
        </member>
        <member name="M:Nest.FlushDescriptor.Full(System.Boolean)">
            <summary>If set to true a new index writer is created and settings that have been changed related to the index writer will be refreshed. Note: if a full flush is required for a setting to take effect this will be part of the settings update process and it not required to be executed by the user. (This setting can be considered as internal)</summary>
        </member>
        <member name="M:Nest.FlushDescriptor.IgnoreUnavailable(System.Boolean)">
            <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
        </member>
        <member name="M:Nest.FlushDescriptor.AllowNoIndices(System.Boolean)">
            <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
        </member>
        <member name="M:Nest.FlushDescriptor.ExpandWildcards(Elasticsearch.Net.ExpandWildcards)">
            <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        </member>
        <member name="T:Nest.DeleteMappingDescriptor`1">
            <summary>descriptor for IndicesDeleteMapping
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-delete-mapping.html
            </pre>
            </summary>
        </member>
        <member name="M:Nest.DeleteMappingDescriptor`1.MasterTimeout(System.String)">
            <summary>Specify timeout for connection to master</summary>
        </member>
        <member name="T:Nest.GetMappingDescriptor`1">
            <summary>descriptor for IndicesGetMappingForAll
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-mapping.html
            </pre>
            </summary>
        </member>
        <member name="M:Nest.GetMappingDescriptor`1.IgnoreUnavailable(System.Boolean)">
            <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
        </member>
        <member name="M:Nest.GetMappingDescriptor`1.AllowNoIndices(System.Boolean)">
            <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
        </member>
        <member name="M:Nest.GetMappingDescriptor`1.ExpandWildcards(Elasticsearch.Net.ExpandWildcards)">
            <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        </member>
        <member name="M:Nest.GetMappingDescriptor`1.Local(System.Boolean)">
            <summary>Return local information, do not retrieve the state from master node (default: false)</summary>
        </member>
        <member name="T:Nest.FixedIndexTypePathDescriptor`2">
            <summary>
            Provides a base for descriptors that need to describe a path in the form of 
            <pre>
            /{index}/{type}
            </pre>
            {index} is optional and so is {type} and will NOT fallback to the defaults of <para>T</para>
            type can only be specified in conjuction with index.
            </summary>
        </member>
        <member name="T:Nest.IndicesTypePathDescriptor`3">
            <summary>
            Provides a base for descriptors that need to describe a path in the form of 
            <pre>
            /{indices}/{type}
            </pre>
            {indices} is optional and so is {type} and will fallback to default of <para>T</para>
            </summary>
        </member>
        <member name="T:Nest.TermvectorDescriptor`1">
            <summary>descriptor for TermvectorGet
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-termvectors.html
            </pre>
            </summary>
        </member>
        <member name="M:Nest.TermvectorDescriptor`1.TermStatistics(System.Boolean)">
            <summary>Specifies if total term frequency and document frequency should be returned.</summary>
        </member>
        <member name="M:Nest.TermvectorDescriptor`1.FieldStatistics(System.Boolean)">
            <summary>Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned.</summary>
        </member>
        <member name="M:Nest.TermvectorDescriptor`1.Fields(System.String[])">
            <summary>A comma-separated list of fields to return.</summary>
        </member>
        <member name="M:Nest.TermvectorDescriptor`1.Fields(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>A comma-separated list of fields to return.</summary>
        </member>
        <member name="M:Nest.TermvectorDescriptor`1.Offsets(System.Boolean)">
            <summary>Specifies if term offsets should be returned.</summary>
        </member>
        <member name="M:Nest.TermvectorDescriptor`1.Positions(System.Boolean)">
            <summary>Specifies if term positions should be returned.</summary>
        </member>
        <member name="M:Nest.TermvectorDescriptor`1.Payloads(System.Boolean)">
            <summary>Specifies if term payloads should be returned.</summary>
        </member>
        <member name="M:Nest.TermvectorDescriptor`1.Preference(System.String)">
            <summary>Specify the node or shard the operation should be performed on (default: random).</summary>
        </member>
        <member name="M:Nest.TermvectorDescriptor`1.Routing(System.String)">
            <summary>Specific routing value.</summary>
        </member>
        <member name="M:Nest.TermvectorDescriptor`1.Parent(System.String)">
            <summary>Parent id of documents.</summary>
        </member>
        <member name="T:Nest.IndexNamePathDescriptor`3">
            <summary>
            Provides a base for descriptors that need to describe a path in the form of 
            <pre>
            /{index}/{name}
            </pre>
            neither parameter is optional 
            </summary>
        </member>
        <member name="T:Nest.DeleteTemplateDescriptor">
            <summary>descriptor for IndicesDeleteTemplateForAll
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-templates.html
            </pre>
            </summary>
        </member>
        <member name="T:Nest.NamePathDescriptor`2">
            <summary>
            Provides a base for descriptors that need to describe a path in the form of 
            <pre>
            /{name}
            </pre>
            name is mandatory.
            </summary>
        </member>
        <member name="M:Nest.NamePathDescriptor`2.Name(System.String)">
            <summary>
            Specify the {name} part of the operation
            </summary>
        </member>
        <member name="M:Nest.DeleteTemplateDescriptor.Timeout(System.String)">
            <summary>Explicit operation timeout</summary>
        </member>
        <member name="M:Nest.DeleteTemplateDescriptor.MasterTimeout(System.String)">
            <summary>Specify timeout for connection to master</summary>
        </member>
        <member name="T:Nest.GetTemplateDescriptor">
            <summary>descriptor for IndicesGetTemplateForAll
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-templates.html
            </pre>
            </summary>
        </member>
        <member name="M:Nest.GetTemplateDescriptor.FlatSettings(System.Boolean)">
            <summary>Return settings in flat format (default: false)</summary>
        </member>
        <member name="M:Nest.GetTemplateDescriptor.Local(System.Boolean)">
            <summary>Return local information, do not retrieve the state from master node (default: false)</summary>
        </member>
        <member name="T:Nest.DeleteWarmerDescriptor">
            <summary>descriptor for IndicesDeleteWarmer
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html
            </pre>
            </summary>
        </member>
        <member name="T:Nest.IndicesOptionalTypesNamePathDescriptor`2">
            <summary>
            Provides a base for descriptors that need to describe a path in the form of 
            <pre>
            /{indices}/{types/{name}
            </pre>
            {types} is optional, {indices} is too but needs an explicit AllIndices().
            </summary>
        </member>
        <member name="M:Nest.IndicesOptionalTypesNamePathDescriptor`2.Indices(System.String[])">
            <summary>
            Specify multiple indices by string 
            </summary>
        </member>
        <member name="M:Nest.IndicesOptionalTypesNamePathDescriptor`2.Indices(System.Type[])">
            <summary>
            Specify multiple indices by stating the types you are searching on. 
            Each type will be asked for their default index and dedupped. 
            </summary>
        </member>
        <member name="M:Nest.IndicesOptionalTypesNamePathDescriptor`2.Index``1">
            <summary>
            Use the default index of T
            </summary>
        </member>
        <member name="M:Nest.IndicesOptionalTypesNamePathDescriptor`2.Index(System.Type)">
            <summary>
            Use the default index of T
            </summary>
        </member>
        <member name="M:Nest.IndicesOptionalTypesNamePathDescriptor`2.Index(System.String)">
            <summary>
            Use the default index of T
            </summary>
        </member>
        <member name="M:Nest.IndicesOptionalTypesNamePathDescriptor`2.Types(System.String[])">
            <summary>
            limit the types to operate on by specifiying them by string
            </summary>
        </member>
        <member name="M:Nest.IndicesOptionalTypesNamePathDescriptor`2.Types(System.Type[])">
            <summary>
            limit the types to operate on by specifying the CLR types, the type names will be inferred.
            </summary>
        </member>
        <member name="M:Nest.IndicesOptionalTypesNamePathDescriptor`2.Type``1">
            <summary>
            Limit the operation on type T
            </summary>
        </member>
        <member name="M:Nest.IndicesOptionalTypesNamePathDescriptor`2.Name(System.String)">
            <summary>
            Specify the {name} part of the operation
            </summary>
        </member>
        <member name="M:Nest.DeleteWarmerDescriptor.MasterTimeout(System.String)">
            <summary>Specify timeout for connection to master</summary>
        </member>
        <member name="T:Nest.SegmentsDescriptor">
            <summary>descriptor for IndicesSegmentsForAll
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-segments.html
            </pre>
            </summary>
        </member>
        <member name="M:Nest.SegmentsDescriptor.IgnoreUnavailable(System.Boolean)">
            <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
        </member>
        <member name="M:Nest.SegmentsDescriptor.AllowNoIndices(System.Boolean)">
            <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
        </member>
        <member name="M:Nest.SegmentsDescriptor.ExpandWildcards(Elasticsearch.Net.ExpandWildcards)">
            <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        </member>
        <member name="M:Nest.SegmentsDescriptor.Human(System.Boolean)">
            <summary>Whether to return time and byte values in human-readable format.</summary>
        </member>
        <member name="M:Nest.SegmentsDescriptor.OperationThreading(System.String)">
            <summary>TODO: ?</summary>
        </member>
        <member name="T:Nest.RefreshDescriptor">
            <summary>descriptor for IndicesRefreshForAll
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-refresh.html
            </pre>
            </summary>
        </member>
        <member name="M:Nest.RefreshDescriptor.IgnoreUnavailable(System.Boolean)">
            <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
        </member>
        <member name="M:Nest.RefreshDescriptor.AllowNoIndices(System.Boolean)">
            <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
        </member>
        <member name="M:Nest.RefreshDescriptor.ExpandWildcards(Elasticsearch.Net.ExpandWildcards)">
            <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        </member>
        <member name="M:Nest.RefreshDescriptor.Force(System.Boolean)">
            <summary>Force a refresh even if not required</summary>
        </member>
        <member name="M:Nest.RefreshDescriptor.OperationThreading(System.String)">
            <summary>TODO: ?</summary>
        </member>
        <member name="T:Nest.OptimizeDescriptor">
            <summary>descriptor for IndicesOptimizeForAll
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-optimize.html
            </pre>
            </summary>
        </member>
        <member name="M:Nest.OptimizeDescriptor.Flush(System.Boolean)">
            <summary>Specify whether the index should be flushed after performing the operation (default: true)</summary>
        </member>
        <member name="M:Nest.OptimizeDescriptor.IgnoreUnavailable(System.Boolean)">
            <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
        </member>
        <member name="M:Nest.OptimizeDescriptor.AllowNoIndices(System.Boolean)">
            <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
        </member>
        <member name="M:Nest.OptimizeDescriptor.ExpandWildcards(Elasticsearch.Net.ExpandWildcards)">
            <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        </member>
        <member name="M:Nest.OptimizeDescriptor.MaxNumSegments(System.Int64)">
            <summary>The number of segments the index should be merged into (default: dynamic)</summary>
        </member>
        <member name="M:Nest.OptimizeDescriptor.OnlyExpungeDeletes(System.Boolean)">
            <summary>Specify whether the operation should only expunge deleted documents</summary>
        </member>
        <member name="M:Nest.OptimizeDescriptor.OperationThreading(System.String)">
            <summary>TODO: ?</summary>
        </member>
        <member name="M:Nest.OptimizeDescriptor.WaitForMerge(System.Boolean)">
            <summary>Specify whether the request should block until the merge process is finished (default: true)</summary>
        </member>
        <member name="M:Nest.OptimizeDescriptor.Force(System.Boolean)">
            <summary>Force a merge operation to run, even if there is a single segment in the index (default: false)</summary>
        </member>
        <member name="T:Nest.OpenIndexDescriptor">
            <summary>descriptor for IndicesOpen
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-open-close.html
            </pre>
            </summary>
        </member>
        <member name="M:Nest.OpenIndexDescriptor.Timeout(System.String)">
            <summary>Explicit operation timeout</summary>
        </member>
        <member name="M:Nest.OpenIndexDescriptor.MasterTimeout(System.String)">
            <summary>Specify timeout for connection to master</summary>
        </member>
        <member name="M:Nest.OpenIndexDescriptor.IgnoreUnavailable(System.Boolean)">
            <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
        </member>
        <member name="M:Nest.OpenIndexDescriptor.AllowNoIndices(System.Boolean)">
            <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
        </member>
        <member name="M:Nest.OpenIndexDescriptor.ExpandWildcards(Elasticsearch.Net.ExpandWildcards)">
            <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        </member>
        <member name="T:Nest.ScrollDescriptor`1">
            <summary>descriptor for ScrollGet
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-request-scroll.html
            </pre>
            </summary>
        </member>
        <member name="M:Nest.ScrollDescriptor`1.Scroll(System.String)">
            <summary>Specify how long a consistent view of the index should be maintained for scrolled search</summary>
        </member>
        <member name="M:Nest.ScrollDescriptor`1.ScrollId(System.String)">
            <summary>The scroll id used to continue/start the scrolled pagination</summary>
        </member>
        <member name="T:Nest.UpdateSettingsDescriptor">
            <summary>descriptor for IndicesPutSettingsForAll
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-update-settings.html
            </pre>
            </summary>
        </member>
        <member name="T:Nest.IndexOptionalPathDescriptorBase`2">
            <summary>
            Provides a base for descriptors that need to describe a path in the form of 
            <pre>
            /{index}
            </pre>
            index is optional but AllIndices() needs to be explicitly specified for it to be optional
            </summary>
        </member>
        <member name="M:Nest.UpdateSettingsDescriptor.NumberOfReplicas(System.Int32)">
            <summary>
            The number of replicas each shard has.
            </summary>
        </member>
        <member name="M:Nest.UpdateSettingsDescriptor.AutoExpandReplicas(System.Boolean)">
            <summary>
            Set to an actual value (like 0-all) or false to disable it.
            </summary>
        </member>
        <member name="M:Nest.UpdateSettingsDescriptor.BlockReadonly(System.Boolean)">
            <summary>
             Set to true to have the index read only, false to allow writes and metadta changes.
             </summary>
        </member>
        <member name="M:Nest.UpdateSettingsDescriptor.BlocksRead(System.Boolean)">
            <summary>
             Set to true to disable read operations againstthe index.
             </summary>
        </member>
        <member name="M:Nest.UpdateSettingsDescriptor.BlocksWrite(System.Boolean)">
             <summary>
            Set to true to disable write operations against the index. 
             </summary>
        </member>
        <member name="M:Nest.UpdateSettingsDescriptor.BlocksMetadata(System.Boolean)">
            <summary>
             Set to true to disable metadata operations against the index.
             </summary>
        </member>
        <member name="M:Nest.UpdateSettingsDescriptor.RefreshInterval(System.String)">
             <summary>
            The async refresh interval of a shard. 
             </summary>
        </member>
        <member name="M:Nest.UpdateSettingsDescriptor.IndexConcurrency(System.Int32)">
             <summary>
            Defaults to 8. 
             </summary>
        </member>
        <member name="M:Nest.UpdateSettingsDescriptor.Codec(System.String)">
             <summary>
            Codec. Default to default. 
             </summary>
        </member>
        <member name="M:Nest.UpdateSettingsDescriptor.CodeBloomLoad(System.Boolean)">
            <summary>
            Whether to load the bloom filter. Defaults to true. 
            [coming in 0.90.9] Coming in 0.90.9.. See the section called “Bloom filter posting format”.
            </summary>
        </member>
        <member name="M:Nest.UpdateSettingsDescriptor.FailOnMergeFailure(System.Boolean)">
            <summary>
            Default to true.
            </summary>
        </member>
        <member name="M:Nest.UpdateSettingsDescriptor.TranslogFlushThresholdOps(System.String)">
            <summary>
             When to flush based on operations.
            </summary>
        </member>
        <member name="M:Nest.UpdateSettingsDescriptor.TranslogFlushThresholdSize(System.String)">
            <summary>
            When to flush based on translog (bytes) size.
            </summary>
        </member>
        <member name="M:Nest.UpdateSettingsDescriptor.TranslogFlushThresholdPeriod(System.String)">
            <summary>
            When to flush based on a period of not flushing.
            </summary>
        </member>
        <member name="M:Nest.UpdateSettingsDescriptor.TranslogDisableFlush(System.Boolean)">
            <summary>
            Disables flushing. Note, should be set for a short interval and then enabled. 
            </summary>
        </member>
        <member name="M:Nest.UpdateSettingsDescriptor.CacheFilterMaxSize(System.String)">
            <summary>
            The maximum size of filter cache (per segment in shard). Set to -1 to disable.
             </summary>
        </member>
        <member name="M:Nest.UpdateSettingsDescriptor.CacheFilterExpire(System.String)">
            <summary>
            The expire after access time for filter cache. Set to -1 to disable.
            </summary>
        </member>
        <member name="M:Nest.UpdateSettingsDescriptor.GatewaySnapshotInterval(System.String)">
            <summary>
            The gateway snapshot interval (only applies to shared gateways). Defaults to 10s.
            </summary>
        </member>
        <member name="M:Nest.UpdateSettingsDescriptor.RoutingAllocationInclude(System.Func{Nest.FluentDictionary{System.String,System.Object},Nest.FluentDictionary{System.String,System.Object}})">
            <summary>
            A node matching any rule will be allowed to host shards from the index.
            </summary>
        </member>
        <member name="M:Nest.UpdateSettingsDescriptor.RoutingAllocationExclude(System.Func{Nest.FluentDictionary{System.String,System.Object},Nest.FluentDictionary{System.String,System.Object}})">
            <summary>
            A node matching any rule will NOT be allowed to host shards from the index.
            </summary>
        </member>
        <member name="M:Nest.UpdateSettingsDescriptor.RoutingAllocationRequire(System.Func{Nest.FluentDictionary{System.String,System.Object},Nest.FluentDictionary{System.String,System.Object}})">
            <summary> 
            Only nodes matching all rules will be allowed to host shards from the index.
            </summary>
        </member>
        <member name="M:Nest.UpdateSettingsDescriptor.RoutingAllocationEnable(Nest.RoutingAllocationEnableOption)">
            <summary>
            Enables shard allocation for a specific index.
            </summary>
        </member>
        <member name="M:Nest.UpdateSettingsDescriptor.RoutingAllocationDisableAllocation(System.Boolean)">
            <summary>
            Disable allocation. Defaults to false.
            </summary>
        </member>
        <member name="M:Nest.UpdateSettingsDescriptor.RoutingAllocationDisableNewAllocation(System.Boolean)">
            <summary>
            Disable new allocation. Defaults to false.
            </summary>
        </member>
        <member name="M:Nest.UpdateSettingsDescriptor.RoutingAllocationDisableReplicateAllocation(System.Boolean)">
            <summary> 
            Disable replica allocation. Defaults to false.
            </summary>
        </member>
        <member name="M:Nest.UpdateSettingsDescriptor.RoutingAllocationTotalShardsPerNode(System.Int32)">
            <summary>
            Controls the total number of shards allowed to be allocated on a single node. Defaults to unbounded (-1).
            </summary>
        </member>
        <member name="M:Nest.UpdateSettingsDescriptor.RecoveryInitialShards(System.String)">
            <summary>
             When using local gateway a particular shard is recovered only if there can be allocated quorum shards in the cluster. 
            It can be set to:
            quorum (default)
            quorum-1 (or half)
            full
            full-1.
            Number values are also supported, e.g. 1.
            </summary>
        </member>
        <member name="M:Nest.UpdateSettingsDescriptor.GcDeletes(System.Boolean)">
            <summary>
            Disables temporarily the purge of expired docs.
            </summary>
        </member>
        <member name="M:Nest.UpdateSettingsDescriptor.TtlDisablePurge(System.Boolean)">
            <summary>
            Disables temporarily the purge of expired docs.
            </summary>
        </member>
        <member name="M:Nest.UpdateSettingsDescriptor.TranslogFsType(System.String)">
            <summary>
            Either simple or buffered (default).
            </summary>
        </member>
        <member name="M:Nest.UpdateSettingsDescriptor.CompoundFormat(System.Boolean)">
            <summary>
             See index.compound_format in the section called “Index Settings”. 
             </summary>
        </member>
        <member name="M:Nest.UpdateSettingsDescriptor.CompoundOnFlush(System.Boolean)">
            <summary>
             See `index.compound_on_flush in the section called “Index Settings”.
             </summary>
        </member>
        <member name="M:Nest.UpdateSettingsDescriptor.WarmersEnabled(System.Boolean)">
            <summary>
             See Warmers. Defaults to true. 
             </summary>
        </member>
        <member name="M:Nest.UpdateSettingsDescriptor.Analysis(System.Func{Nest.AnalysisDescriptor,Nest.AnalysisDescriptor})">
            <summary>
            When updating analysis settings you need to close and open the index prior and afterwards
            </summary>
        </member>
        <member name="M:Nest.UpdateSettingsDescriptor.MasterTimeout(System.String)">
            <summary>Specify timeout for connection to master</summary>
        </member>
        <member name="M:Nest.UpdateSettingsDescriptor.IgnoreUnavailable(System.Boolean)">
            <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
        </member>
        <member name="M:Nest.UpdateSettingsDescriptor.AllowNoIndices(System.Boolean)">
            <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
        </member>
        <member name="M:Nest.UpdateSettingsDescriptor.ExpandWildcards(Elasticsearch.Net.ExpandWildcards)">
            <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        </member>
        <member name="M:Nest.UpdateSettingsDescriptor.FlatSettings(System.Boolean)">
            <summary>Return settings in flat format (default: false)</summary>
        </member>
        <member name="T:Nest.DeleteByQueryDescriptor`1">
            <summary>descriptor for DeleteByQuery
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-delete-by-query.html
            </pre>
            </summary>
        </member>
        <member name="M:Nest.DeleteByQueryDescriptor`1.Analyzer(System.String)">
            <summary>The analyzer to use for the query string</summary>
        </member>
        <member name="M:Nest.DeleteByQueryDescriptor`1.Consistency(Elasticsearch.Net.Consistency)">
            <summary>Specific write consistency setting for the operation</summary>
        </member>
        <member name="M:Nest.DeleteByQueryDescriptor`1.DefaultOperator(Elasticsearch.Net.DefaultOperator)">
            <summary>The default operator for query string query (AND or OR)</summary>
        </member>
        <member name="M:Nest.DeleteByQueryDescriptor`1.Df(System.String)">
            <summary>The field to use as default where no field prefix is given in the query string</summary>
        </member>
        <member name="M:Nest.DeleteByQueryDescriptor`1.IgnoreUnavailable(System.Boolean)">
            <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
        </member>
        <member name="M:Nest.DeleteByQueryDescriptor`1.AllowNoIndices(System.Boolean)">
            <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
        </member>
        <member name="M:Nest.DeleteByQueryDescriptor`1.ExpandWildcards(Elasticsearch.Net.ExpandWildcards)">
            <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        </member>
        <member name="M:Nest.DeleteByQueryDescriptor`1.Replication(Elasticsearch.Net.Replication)">
            <summary>Specific replication type</summary>
        </member>
        <member name="M:Nest.DeleteByQueryDescriptor`1.Q(System.String)">
            <summary>Query in the Lucene query string syntax</summary>
        </member>
        <member name="M:Nest.DeleteByQueryDescriptor`1.Routing(System.String)">
            <summary>Specific routing value</summary>
        </member>
        <member name="M:Nest.DeleteByQueryDescriptor`1.Source(System.String)">
            <summary>The URL-encoded query definition (instead of using the request body)</summary>
        </member>
        <member name="M:Nest.DeleteByQueryDescriptor`1.Timeout(System.String)">
            <summary>Explicit operation timeout</summary>
        </member>
        <member name="M:Nest.MultiGetOperationDescriptor`1.Index(System.String)">
            <summary>
            Manually set the index, default to the default index or the index set for the type on the connectionsettings.
            </summary>
        </member>
        <member name="M:Nest.MultiGetOperationDescriptor`1.Type(System.String)">
            <summary>
            Manualy set the type to get the object from, default to whatever
            T will be inferred to if not passed.
            </summary>
        </member>
        <member name="M:Nest.MultiGetOperationDescriptor`1.Type(System.Type)">
            <summary>
            Manually set the type of which a typename will be inferred
            </summary>
        </member>
        <member name="M:Nest.MultiGetOperationDescriptor`1.Routing(System.String)">
            <summary>
            Set the routing for the get operation
            </summary>
        </member>
        <member name="M:Nest.MultiGetOperationDescriptor`1.Fields(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Allows to selectively load specific fields for each document 
            represented by a search hit. Defaults to load the internal _source field.
            </summary>
        </member>
        <member name="M:Nest.MultiGetOperationDescriptor`1.Fields(System.String[])">
            <summary>
            Allows to selectively load specific fields for each document 
            represented by a search hit. Defaults to load the internal _source field.
            </summary>
        </member>
        <member name="T:Nest.AbortBenchmarkDescriptor">
            <summary>descriptor for AbortBenchmark
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-benchmark.html
            </pre>
            </summary>
        </member>
        <member name="T:Nest.BulkDescriptor">
            <summary>descriptor for Bulk
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-bulk.html
            </pre>
            </summary>
        </member>
        <member name="M:Nest.BulkDescriptor.Consistency(Elasticsearch.Net.Consistency)">
            <summary>Explicit write consistency setting for the operation</summary>
        </member>
        <member name="M:Nest.BulkDescriptor.Refresh(System.Boolean)">
            <summary>Refresh the index after performing the operation</summary>
        </member>
        <member name="M:Nest.BulkDescriptor.Replication(Elasticsearch.Net.Replication)">
            <summary>Explicitely set the replication type</summary>
        </member>
        <member name="M:Nest.BulkDescriptor.Routing(System.String)">
            <summary>Specific routing value</summary>
        </member>
        <member name="M:Nest.BulkDescriptor.Timeout(System.String)">
            <summary>Explicit operation timeout</summary>
        </member>
        <member name="M:Nest.BulkDescriptor.TypeQueryString(System.String)">
            <summary>Default document type for items which don&#39;t provide one</summary>
        </member>
        <member name="M:Nest.BulkDescriptor.CreateMany``1(System.Collections.Generic.IEnumerable{``0},System.Func{Nest.BulkCreateDescriptor{``0},``0,Nest.BulkCreateDescriptor{``0}})">
            <summary>
            CreateMany, convenience method to create many documents at once.
            </summary>
            <param name="objects">the objects to create</param>
            <param name="bulkCreateSelector">A func called on each object to describe the individual create operation</param>
        </member>
        <member name="M:Nest.BulkDescriptor.IndexMany``1(System.Collections.Generic.IEnumerable{``0},System.Func{Nest.BulkIndexDescriptor{``0},``0,Nest.BulkIndexDescriptor{``0}})">
            <summary>
            IndexMany, convenience method to pass many objects at once.
            </summary>
            <param name="objects">the objects to index</param>
            <param name="bulkIndexSelector">A func called on each object to describe the individual index operation</param>
        </member>
        <member name="M:Nest.BulkDescriptor.DeleteMany``1(System.Collections.Generic.IEnumerable{``0},System.Func{Nest.BulkDeleteDescriptor{``0},``0,Nest.BulkDeleteDescriptor{``0}})">
            <summary>
            DeleteMany, convenience method to delete many objects at once.
            </summary>
            <param name="objects">the objects to delete</param>
            <param name="bulkDeleteSelector">A func called on each object to describe the individual delete operation</param>
        </member>
        <member name="M:Nest.BulkDescriptor.DeleteMany``1(System.Collections.Generic.IEnumerable{System.String},System.Func{Nest.BulkDeleteDescriptor{``0},System.String,Nest.BulkDeleteDescriptor{``0}})">
            <summary>
            DeleteMany, convenience method to delete many objects at once.
            </summary>
            <param name="ids">Enumerable of string ids to delete</param>
            <param name="bulkDeleteSelector">A func called on each ids to describe the individual delete operation</param>
        </member>
        <member name="M:Nest.BulkDescriptor.DeleteMany``1(System.Collections.Generic.IEnumerable{System.Int64},System.Func{Nest.BulkDeleteDescriptor{``0},System.String,Nest.BulkDeleteDescriptor{``0}})">
            <summary>
            DeleteMany, convenience method to delete many objects at once.
            </summary>
            <param name="ids">Enumerable of int ids to delete</param>
            <param name="bulkDeleteSelector">A func called on each ids to describe the individual delete operation</param>
        </member>
        <member name="T:Nest.CatAliasesDescriptor">
            <summary>descriptor for CatAliases
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-aliases.html
            </pre>
            </summary>
        </member>
        <member name="M:Nest.CatAliasesDescriptor.Local(System.Boolean)">
            <summary>Return local information, do not retrieve the state from master node (default: false)</summary>
        </member>
        <member name="M:Nest.CatAliasesDescriptor.MasterTimeout(System.String)">
            <summary>Explicit operation timeout for connection to master node</summary>
        </member>
        <member name="M:Nest.CatAliasesDescriptor.H(System.String[])">
            <summary>Comma-separated list of column names to display</summary>
        </member>
        <member name="M:Nest.CatAliasesDescriptor.Help(System.Boolean)">
            <summary>Return help information</summary>
        </member>
        <member name="M:Nest.CatAliasesDescriptor.V(System.Boolean)">
            <summary>Verbose mode. Display column headers</summary>
        </member>
        <member name="T:Nest.CatAllocationDescriptor">
            <summary>descriptor for CatAllocation
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-allocation.html
            </pre>
            </summary>
        </member>
        <member name="M:Nest.CatAllocationDescriptor.Bytes(Elasticsearch.Net.Bytes)">
            <summary>The unit in which to display byte values</summary>
        </member>
        <member name="M:Nest.CatAllocationDescriptor.Local(System.Boolean)">
            <summary>Return local information, do not retrieve the state from master node (default: false)</summary>
        </member>
        <member name="M:Nest.CatAllocationDescriptor.MasterTimeout(System.String)">
            <summary>Explicit operation timeout for connection to master node</summary>
        </member>
        <member name="M:Nest.CatAllocationDescriptor.H(System.String[])">
            <summary>Comma-separated list of column names to display</summary>
        </member>
        <member name="M:Nest.CatAllocationDescriptor.Help(System.Boolean)">
            <summary>Return help information</summary>
        </member>
        <member name="M:Nest.CatAllocationDescriptor.V(System.Boolean)">
            <summary>Verbose mode. Display column headers</summary>
        </member>
        <member name="T:Nest.CatCountDescriptor">
            <summary>descriptor for CatCount
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-count.html
            </pre>
            </summary>
        </member>
        <member name="M:Nest.CatCountDescriptor.Local(System.Boolean)">
            <summary>Return local information, do not retrieve the state from master node (default: false)</summary>
        </member>
        <member name="M:Nest.CatCountDescriptor.MasterTimeout(System.String)">
            <summary>Explicit operation timeout for connection to master node</summary>
        </member>
        <member name="M:Nest.CatCountDescriptor.H(System.String[])">
            <summary>Comma-separated list of column names to display</summary>
        </member>
        <member name="M:Nest.CatCountDescriptor.Help(System.Boolean)">
            <summary>Return help information</summary>
        </member>
        <member name="M:Nest.CatCountDescriptor.V(System.Boolean)">
            <summary>Verbose mode. Display column headers</summary>
        </member>
        <member name="T:Nest.CatFielddataDescriptor">
            <summary>descriptor for CatFielddata
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/cat-fielddata.html
            </pre>
            </summary>
        </member>
        <member name="M:Nest.CatFielddataDescriptor.Bytes(Elasticsearch.Net.Bytes)">
            <summary>The unit in which to display byte values</summary>
        </member>
        <member name="M:Nest.CatFielddataDescriptor.Local(System.Boolean)">
            <summary>Return local information, do not retrieve the state from master node (default: false)</summary>
        </member>
        <member name="M:Nest.CatFielddataDescriptor.MasterTimeout(System.String)">
            <summary>Explicit operation timeout for connection to master node</summary>
        </member>
        <member name="M:Nest.CatFielddataDescriptor.H(System.String[])">
            <summary>Comma-separated list of column names to display</summary>
        </member>
        <member name="M:Nest.CatFielddataDescriptor.Help(System.Boolean)">
            <summary>Return help information</summary>
        </member>
        <member name="M:Nest.CatFielddataDescriptor.V(System.Boolean)">
            <summary>Verbose mode. Display column headers</summary>
        </member>
        <member name="M:Nest.CatFielddataDescriptor.Fields(System.String[])">
            <summary>A comma-separated list of fields to return the fielddata size</summary>
        </member>
        <member name="M:Nest.CatFielddataDescriptor.Fields``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>A comma-separated list of fields to return the fielddata size</summary>
        </member>
        <member name="T:Nest.CatHealthDescriptor">
            <summary>descriptor for CatHealth
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-health.html
            </pre>
            </summary>
        </member>
        <member name="M:Nest.CatHealthDescriptor.Local(System.Boolean)">
            <summary>Return local information, do not retrieve the state from master node (default: false)</summary>
        </member>
        <member name="M:Nest.CatHealthDescriptor.MasterTimeout(System.String)">
            <summary>Explicit operation timeout for connection to master node</summary>
        </member>
        <member name="M:Nest.CatHealthDescriptor.H(System.String[])">
            <summary>Comma-separated list of column names to display</summary>
        </member>
        <member name="M:Nest.CatHealthDescriptor.Help(System.Boolean)">
            <summary>Return help information</summary>
        </member>
        <member name="M:Nest.CatHealthDescriptor.Ts(System.Boolean)">
            <summary>Set to false to disable timestamping</summary>
        </member>
        <member name="M:Nest.CatHealthDescriptor.V(System.Boolean)">
            <summary>Verbose mode. Display column headers</summary>
        </member>
        <member name="T:Nest.CatHelpDescriptor">
            <summary>descriptor for CatHelp
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat.html
            </pre>
            </summary>
        </member>
        <member name="M:Nest.CatHelpDescriptor.Help(System.Boolean)">
            <summary>Return help information</summary>
        </member>
        <member name="T:Nest.CatIndicesDescriptor">
            <summary>descriptor for CatIndices
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-indices.html
            </pre>
            </summary>
        </member>
        <member name="M:Nest.CatIndicesDescriptor.Bytes(Elasticsearch.Net.Bytes)">
            <summary>The unit in which to display byte values</summary>
        </member>
        <member name="M:Nest.CatIndicesDescriptor.Local(System.Boolean)">
            <summary>Return local information, do not retrieve the state from master node (default: false)</summary>
        </member>
        <member name="M:Nest.CatIndicesDescriptor.MasterTimeout(System.String)">
            <summary>Explicit operation timeout for connection to master node</summary>
        </member>
        <member name="M:Nest.CatIndicesDescriptor.H(System.String[])">
            <summary>Comma-separated list of column names to display</summary>
        </member>
        <member name="M:Nest.CatIndicesDescriptor.Help(System.Boolean)">
            <summary>Return help information</summary>
        </member>
        <member name="M:Nest.CatIndicesDescriptor.Pri(System.Boolean)">
            <summary>Set to true to return stats only for primary shards</summary>
        </member>
        <member name="M:Nest.CatIndicesDescriptor.V(System.Boolean)">
            <summary>Verbose mode. Display column headers</summary>
        </member>
        <member name="T:Nest.CatMasterDescriptor">
            <summary>descriptor for CatMaster
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-master.html
            </pre>
            </summary>
        </member>
        <member name="M:Nest.CatMasterDescriptor.Local(System.Boolean)">
            <summary>Return local information, do not retrieve the state from master node (default: false)</summary>
        </member>
        <member name="M:Nest.CatMasterDescriptor.MasterTimeout(System.String)">
            <summary>Explicit operation timeout for connection to master node</summary>
        </member>
        <member name="M:Nest.CatMasterDescriptor.H(System.String[])">
            <summary>Comma-separated list of column names to display</summary>
        </member>
        <member name="M:Nest.CatMasterDescriptor.Help(System.Boolean)">
            <summary>Return help information</summary>
        </member>
        <member name="M:Nest.CatMasterDescriptor.V(System.Boolean)">
            <summary>Verbose mode. Display column headers</summary>
        </member>
        <member name="T:Nest.CatNodesDescriptor">
            <summary>descriptor for CatNodes
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-nodes.html
            </pre>
            </summary>
        </member>
        <member name="M:Nest.CatNodesDescriptor.Local(System.Boolean)">
            <summary>Return local information, do not retrieve the state from master node (default: false)</summary>
        </member>
        <member name="M:Nest.CatNodesDescriptor.MasterTimeout(System.String)">
            <summary>Explicit operation timeout for connection to master node</summary>
        </member>
        <member name="M:Nest.CatNodesDescriptor.H(System.String[])">
            <summary>Comma-separated list of column names to display</summary>
        </member>
        <member name="M:Nest.CatNodesDescriptor.Help(System.Boolean)">
            <summary>Return help information</summary>
        </member>
        <member name="M:Nest.CatNodesDescriptor.V(System.Boolean)">
            <summary>Verbose mode. Display column headers</summary>
        </member>
        <member name="T:Nest.CatPendingTasksDescriptor">
            <summary>descriptor for CatPendingTasks
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-pending-tasks.html
            </pre>
            </summary>
        </member>
        <member name="M:Nest.CatPendingTasksDescriptor.Local(System.Boolean)">
            <summary>Return local information, do not retrieve the state from master node (default: false)</summary>
        </member>
        <member name="M:Nest.CatPendingTasksDescriptor.MasterTimeout(System.String)">
            <summary>Explicit operation timeout for connection to master node</summary>
        </member>
        <member name="M:Nest.CatPendingTasksDescriptor.H(System.String[])">
            <summary>Comma-separated list of column names to display</summary>
        </member>
        <member name="M:Nest.CatPendingTasksDescriptor.Help(System.Boolean)">
            <summary>Return help information</summary>
        </member>
        <member name="M:Nest.CatPendingTasksDescriptor.V(System.Boolean)">
            <summary>Verbose mode. Display column headers</summary>
        </member>
        <member name="T:Nest.CatPluginsDescriptor">
            <summary>descriptor for CatPlugins
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/cat-plugins.html
            </pre>
            </summary>
        </member>
        <member name="M:Nest.CatPluginsDescriptor.Local(System.Boolean)">
            <summary>Return local information, do not retrieve the state from master node (default: false)</summary>
        </member>
        <member name="M:Nest.CatPluginsDescriptor.MasterTimeout(System.String)">
            <summary>Explicit operation timeout for connection to master node</summary>
        </member>
        <member name="M:Nest.CatPluginsDescriptor.H(System.String[])">
            <summary>Comma-separated list of column names to display</summary>
        </member>
        <member name="M:Nest.CatPluginsDescriptor.Help(System.Boolean)">
            <summary>Return help information</summary>
        </member>
        <member name="M:Nest.CatPluginsDescriptor.V(System.Boolean)">
            <summary>Verbose mode. Display column headers</summary>
        </member>
        <member name="T:Nest.CatRecoveryDescriptor">
            <summary>descriptor for CatRecovery
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-recovery.html
            </pre>
            </summary>
        </member>
        <member name="M:Nest.CatRecoveryDescriptor.Bytes(Elasticsearch.Net.Bytes)">
            <summary>The unit in which to display byte values</summary>
        </member>
        <member name="M:Nest.CatRecoveryDescriptor.MasterTimeout(System.String)">
            <summary>Explicit operation timeout for connection to master node</summary>
        </member>
        <member name="M:Nest.CatRecoveryDescriptor.H(System.String[])">
            <summary>Comma-separated list of column names to display</summary>
        </member>
        <member name="M:Nest.CatRecoveryDescriptor.Help(System.Boolean)">
            <summary>Return help information</summary>
        </member>
        <member name="M:Nest.CatRecoveryDescriptor.V(System.Boolean)">
            <summary>Verbose mode. Display column headers</summary>
        </member>
        <member name="T:Nest.CatShardsDescriptor">
            <summary>descriptor for CatShards
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-shards.html
            </pre>
            </summary>
        </member>
        <member name="M:Nest.CatShardsDescriptor.Local(System.Boolean)">
            <summary>Return local information, do not retrieve the state from master node (default: false)</summary>
        </member>
        <member name="M:Nest.CatShardsDescriptor.MasterTimeout(System.String)">
            <summary>Explicit operation timeout for connection to master node</summary>
        </member>
        <member name="M:Nest.CatShardsDescriptor.H(System.String[])">
            <summary>Comma-separated list of column names to display</summary>
        </member>
        <member name="M:Nest.CatShardsDescriptor.Help(System.Boolean)">
            <summary>Return help information</summary>
        </member>
        <member name="M:Nest.CatShardsDescriptor.V(System.Boolean)">
            <summary>Verbose mode. Display column headers</summary>
        </member>
        <member name="T:Nest.CatThreadPoolDescriptor">
            <summary>descriptor for CatThreadPool
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/cat-thread-pool.html
            </pre>
            </summary>
        </member>
        <member name="M:Nest.CatThreadPoolDescriptor.Local(System.Boolean)">
            <summary>Return local information, do not retrieve the state from master node (default: false)</summary>
        </member>
        <member name="M:Nest.CatThreadPoolDescriptor.MasterTimeout(System.String)">
            <summary>Explicit operation timeout for connection to master node</summary>
        </member>
        <member name="M:Nest.CatThreadPoolDescriptor.H(System.String[])">
            <summary>Comma-separated list of column names to display</summary>
        </member>
        <member name="M:Nest.CatThreadPoolDescriptor.Help(System.Boolean)">
            <summary>Return help information</summary>
        </member>
        <member name="M:Nest.CatThreadPoolDescriptor.V(System.Boolean)">
            <summary>Verbose mode. Display column headers</summary>
        </member>
        <member name="M:Nest.CatThreadPoolDescriptor.FullId(System.Boolean)">
            <summary>Enables displaying the complete node ids</summary>
        </member>
        <member name="T:Nest.ClusterPendingTasksDescriptor">
            <summary>descriptor for ClusterPendingTasks
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-pending.html
            </pre>
            </summary>
        </member>
        <member name="M:Nest.ClusterPendingTasksDescriptor.Local(System.Boolean)">
            <summary>Return local information, do not retrieve the state from master node (default: false)</summary>
        </member>
        <member name="M:Nest.ClusterPendingTasksDescriptor.MasterTimeout(System.String)">
            <summary>Specify timeout for connection to master</summary>
        </member>
        <member name="T:Nest.ClusterRerouteDescriptor">
            <summary>descriptor for ClusterReroute
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-reroute.html
            </pre>
            </summary>
        </member>
        <member name="M:Nest.ClusterRerouteDescriptor.DryRun(System.Boolean)">
            <summary>Simulate the operation only and return the resulting state</summary>
        </member>
        <member name="M:Nest.ClusterRerouteDescriptor.Explain(System.Boolean)">
            <summary>Return an explanation of why the commands can or cannot be executed</summary>
        </member>
        <member name="M:Nest.ClusterRerouteDescriptor.FilterMetadata(System.Boolean)">
            <summary>Don&#39;t return cluster state metadata (default: false)</summary>
        </member>
        <member name="M:Nest.ClusterRerouteDescriptor.MasterTimeout(System.String)">
            <summary>Explicit operation timeout for connection to master node</summary>
        </member>
        <member name="M:Nest.ClusterRerouteDescriptor.Timeout(System.String)">
            <summary>Explicit operation timeout</summary>
        </member>
        <member name="T:Nest.ClusterStatsDescriptor">
            <summary>descriptor for ClusterStats
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-stats.html
            </pre>
            </summary>
        </member>
        <member name="M:Nest.ClusterStatsDescriptor.FlatSettings(System.Boolean)">
            <summary>Return settings in flat format (default: false)</summary>
        </member>
        <member name="M:Nest.ClusterStatsDescriptor.Human(System.Boolean)">
            <summary>Whether to return time and byte values in human-readable format.</summary>
        </member>
        <member name="T:Nest.ExplainDescriptor">
            <summary>descriptor for ExplainGet
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-explain.html
            </pre>
            </summary>
        </member>
        <member name="M:Nest.ExplainDescriptor.AnalyzeWildcard(System.Boolean)">
            <summary>Specify whether wildcards and prefix queries in the query string query should be analyzed (default: false)</summary>
        </member>
        <member name="M:Nest.ExplainDescriptor.Analyzer(System.String)">
            <summary>The analyzer for the query string query</summary>
        </member>
        <member name="M:Nest.ExplainDescriptor.DefaultOperator(Elasticsearch.Net.DefaultOperator)">
            <summary>The default operator for query string query (AND or OR)</summary>
        </member>
        <member name="M:Nest.ExplainDescriptor.Df(System.String)">
            <summary>The default field for query string query (default: _all)</summary>
        </member>
        <member name="M:Nest.ExplainDescriptor.Fields(System.String[])">
            <summary>A comma-separated list of fields to return in the response</summary>
        </member>
        <member name="M:Nest.ExplainDescriptor.Fields``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>A comma-separated list of fields to return in the response</summary>
        </member>
        <member name="M:Nest.ExplainDescriptor.Lenient(System.Boolean)">
            <summary>Specify whether format-based query failures (such as providing text to a numeric field) should be ignored</summary>
        </member>
        <member name="M:Nest.ExplainDescriptor.LowercaseExpandedTerms(System.Boolean)">
            <summary>Specify whether query terms should be lowercased</summary>
        </member>
        <member name="M:Nest.ExplainDescriptor.Parent(System.String)">
            <summary>The ID of the parent document</summary>
        </member>
        <member name="M:Nest.ExplainDescriptor.Preference(System.String)">
            <summary>Specify the node or shard the operation should be performed on (default: random)</summary>
        </member>
        <member name="M:Nest.ExplainDescriptor.Q(System.String)">
            <summary>Query in the Lucene query string syntax</summary>
        </member>
        <member name="M:Nest.ExplainDescriptor.Routing(System.String)">
            <summary>Specific routing value</summary>
        </member>
        <member name="M:Nest.ExplainDescriptor.Source(System.String)">
            <summary>The URL-encoded query definition (instead of using the request body)</summary>
        </member>
        <member name="M:Nest.ExplainDescriptor.SourceEnabled(System.String[])">
            <summary>True or false to return the _source field or not, or a list of fields to return</summary>
        </member>
        <member name="M:Nest.ExplainDescriptor.SourceExclude(System.String[])">
            <summary>A list of fields to exclude from the returned _source field</summary>
        </member>
        <member name="M:Nest.ExplainDescriptor.SourceExclude``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>A list of fields to exclude from the returned _source field</summary>
        </member>
        <member name="M:Nest.ExplainDescriptor.SourceInclude(System.String[])">
            <summary>A list of fields to extract and return from the _source field</summary>
        </member>
        <member name="M:Nest.ExplainDescriptor.SourceInclude``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>A list of fields to extract and return from the _source field</summary>
        </member>
        <member name="T:Nest.GetDescriptor`1">
            <summary>descriptor for Get
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-get.html
            </pre>
            </summary>
        </member>
        <member name="M:Nest.GetDescriptor`1.Fields(System.String[])">
            <summary>A comma-separated list of fields to return in the response</summary>
        </member>
        <member name="M:Nest.GetDescriptor`1.Fields(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>A comma-separated list of fields to return in the response</summary>
        </member>
        <member name="M:Nest.GetDescriptor`1.Parent(System.String)">
            <summary>The ID of the parent document</summary>
        </member>
        <member name="M:Nest.GetDescriptor`1.Preference(System.String)">
            <summary>Specify the node or shard the operation should be performed on (default: random)</summary>
        </member>
        <member name="M:Nest.GetDescriptor`1.Realtime(System.Boolean)">
            <summary>Specify whether to perform the operation in realtime or search mode</summary>
        </member>
        <member name="M:Nest.GetDescriptor`1.Refresh(System.Boolean)">
            <summary>Refresh the shard containing the document before performing the operation</summary>
        </member>
        <member name="M:Nest.GetDescriptor`1.Routing(System.String)">
            <summary>Specific routing value</summary>
        </member>
        <member name="M:Nest.GetDescriptor`1.SourceEnabled(System.String[])">
            <summary>True or false to return the _source field or not, or a list of fields to return</summary>
        </member>
        <member name="M:Nest.GetDescriptor`1.SourceExclude(System.String[])">
            <summary>A list of fields to exclude from the returned _source field</summary>
        </member>
        <member name="M:Nest.GetDescriptor`1.SourceExclude(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>A list of fields to exclude from the returned _source field</summary>
        </member>
        <member name="M:Nest.GetDescriptor`1.SourceInclude(System.String[])">
            <summary>A list of fields to extract and return from the _source field</summary>
        </member>
        <member name="M:Nest.GetDescriptor`1.SourceInclude(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>A list of fields to extract and return from the _source field</summary>
        </member>
        <member name="M:Nest.GetDescriptor`1.Version(System.Int64)">
            <summary>Explicit version number for concurrency control</summary>
        </member>
        <member name="M:Nest.GetDescriptor`1.VersionType(Elasticsearch.Net.VersionType)">
            <summary>Specific version type</summary>
        </member>
        <member name="T:Nest.CreateIndexDescriptor">
            <summary>descriptor for IndicesCreate
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-create-index.html
            </pre>
            </summary>
        </member>
        <member name="M:Nest.CreateIndexDescriptor.Timeout(System.String)">
            <summary>Explicit operation timeout</summary>
        </member>
        <member name="M:Nest.CreateIndexDescriptor.MasterTimeout(System.String)">
            <summary>Specify timeout for connection to master</summary>
        </member>
        <member name="M:Nest.CreateIndexDescriptor.InitializeUsing(Nest.IndexSettings)">
            <summary>
            Initialize the descriptor using the values from for instance a previous Get Index Settings call.
            </summary>
        </member>
        <member name="M:Nest.CreateIndexDescriptor.NumberOfShards(System.Int32)">
            <summary>
            Set the number of shards (if possible) for the new index.
            </summary>
            <param name="shards"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.CreateIndexDescriptor.NumberOfReplicas(System.Int32)">
            <summary>
            Set the number of replicas (if possible) for the new index.
            </summary>
            <param name="replicas"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.CreateIndexDescriptor.Settings(System.Action{Nest.FluentDictionary{System.String,System.Object}})">
            <summary>
            Set/Update settings, the index.* prefix is not needed for the keys.
            </summary>
        </member>
        <member name="M:Nest.CreateIndexDescriptor.RemoveMapping(System.String)">
            <summary>
            Remove an existing mapping by name
            </summary>
        </member>
        <member name="M:Nest.CreateIndexDescriptor.RemoveMapping``1">
            <summary>
            Remove an exisiting mapping by inferred type name
            </summary>
        </member>
        <member name="M:Nest.CreateIndexDescriptor.AddAlias(System.String,System.Func{Nest.CreateAliasDescriptor,Nest.CreateAliasDescriptor})">
            <summary>
            Add an alias for this index upon index creation
            </summary>
        </member>
        <member name="M:Nest.CreateIndexDescriptor.AddMapping``1(System.Func{Nest.PutMappingDescriptor{``0},Nest.PutMappingDescriptor{``0}})">
            <summary>
            Add a new mapping for T
            </summary>
        </member>
        <member name="M:Nest.CreateIndexDescriptor.AddMapping``1(Nest.RootObjectMapping,System.Func{Nest.PutMappingDescriptor{``0},Nest.PutMappingDescriptor{``0}})">
            <summary>
            Add a new mapping using the first rootObjectMapping parameter as the base to construct the new mapping.
            Handy if you wish to reuse a mapping.
            </summary>
        </member>
        <member name="M:Nest.CreateIndexDescriptor.Analysis(System.Func{Nest.AnalysisDescriptor,Nest.AnalysisDescriptor})">
            <summary>
            Set up analysis tokenizers, filters, analyzers
            </summary>
        </member>
        <member name="T:Nest.IndicesDeleteAliasDescriptor">
            <summary>descriptor for IndicesDeleteAlias
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html
            </pre>
            </summary>
        </member>
        <member name="M:Nest.IndicesDeleteAliasDescriptor.Timeout(System.String)">
            <summary>Explicit timestamp for the document</summary>
        </member>
        <member name="M:Nest.IndicesDeleteAliasDescriptor.MasterTimeout(System.String)">
            <summary>Specify timeout for connection to master</summary>
        </member>
        <member name="T:Nest.IndicesExistsAliasDescriptor">
            <summary>descriptor for IndicesExistsAliasForAll
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html
            </pre>
            </summary>
        </member>
        <member name="M:Nest.IndicesExistsAliasDescriptor.IgnoreUnavailable(System.Boolean)">
            <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
        </member>
        <member name="M:Nest.IndicesExistsAliasDescriptor.AllowNoIndices(System.Boolean)">
            <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
        </member>
        <member name="M:Nest.IndicesExistsAliasDescriptor.ExpandWildcards(Elasticsearch.Net.ExpandWildcards)">
            <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        </member>
        <member name="M:Nest.IndicesExistsAliasDescriptor.Local(System.Boolean)">
            <summary>Return local information, do not retrieve the state from master node (default: false)</summary>
        </member>
        <member name="T:Nest.IndicesExistsTemplateDescriptor">
            <summary>descriptor for IndicesExistsTemplateForAll
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-templates.html
            </pre>
            </summary>
        </member>
        <member name="M:Nest.IndicesExistsTemplateDescriptor.Local(System.Boolean)">
            <summary>Return local information, do not retrieve the state from master node (default: false)</summary>
        </member>
        <member name="T:Nest.IndicesExistsTypeDescriptor">
            <summary>descriptor for IndicesExistsType
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-types-exists.html
            </pre>
            </summary>
        </member>
        <member name="M:Nest.IndicesExistsTypeDescriptor.IgnoreUnavailable(System.Boolean)">
            <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
        </member>
        <member name="M:Nest.IndicesExistsTypeDescriptor.AllowNoIndices(System.Boolean)">
            <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
        </member>
        <member name="M:Nest.IndicesExistsTypeDescriptor.ExpandWildcards(Elasticsearch.Net.ExpandWildcards)">
            <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        </member>
        <member name="M:Nest.IndicesExistsTypeDescriptor.Local(System.Boolean)">
            <summary>Return local information, do not retrieve the state from master node (default: false)</summary>
        </member>
        <member name="T:Nest.IndicesGetFieldMappingDescriptor">
            <summary>descriptor for IndicesGetFieldMappingForAll
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-field-mapping.html
            </pre>
            </summary>
        </member>
        <member name="M:Nest.IndicesGetFieldMappingDescriptor.IncludeDefaults(System.Boolean)">
            <summary>Whether the default mapping values should be returned as well</summary>
        </member>
        <member name="M:Nest.IndicesGetFieldMappingDescriptor.IgnoreUnavailable(System.Boolean)">
            <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
        </member>
        <member name="M:Nest.IndicesGetFieldMappingDescriptor.AllowNoIndices(System.Boolean)">
            <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
        </member>
        <member name="M:Nest.IndicesGetFieldMappingDescriptor.ExpandWildcards(Elasticsearch.Net.ExpandWildcards)">
            <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        </member>
        <member name="M:Nest.IndicesGetFieldMappingDescriptor.Local(System.Boolean)">
            <summary>Return local information, do not retrieve the state from master node (default: false)</summary>
        </member>
        <member name="T:Nest.GetWarmerDescriptor">
            <summary>descriptor for IndicesGetWarmerForAll
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html
            </pre>
            </summary>
        </member>
        <member name="M:Nest.GetWarmerDescriptor.IgnoreUnavailable(System.Boolean)">
            <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
        </member>
        <member name="M:Nest.GetWarmerDescriptor.AllowNoIndices(System.Boolean)">
            <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
        </member>
        <member name="M:Nest.GetWarmerDescriptor.ExpandWildcards(Elasticsearch.Net.ExpandWildcards)">
            <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        </member>
        <member name="M:Nest.GetWarmerDescriptor.Local(System.Boolean)">
            <summary>Return local information, do not retrieve the state from master node (default: false)</summary>
        </member>
        <member name="T:Nest.IndicesPutAliasDescriptor">
            <summary>descriptor for IndicesPutAlias
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html
            </pre>
            </summary>
        </member>
        <member name="M:Nest.IndicesPutAliasDescriptor.Timeout(System.String)">
            <summary>Explicit timestamp for the document</summary>
        </member>
        <member name="M:Nest.IndicesPutAliasDescriptor.MasterTimeout(System.String)">
            <summary>Specify timeout for connection to master</summary>
        </member>
        <member name="T:Nest.PutMappingDescriptor`1">
            <summary>descriptor for IndicesPutMapping
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-put-mapping.html
            </pre>
            </summary>
        </member>
        <member name="M:Nest.PutMappingDescriptor`1.IgnoreConflicts(System.Boolean)">
            <summary>Specify whether to ignore conflicts while updating the mapping (default: false)</summary>
        </member>
        <member name="M:Nest.PutMappingDescriptor`1.Timeout(System.String)">
            <summary>Explicit operation timeout</summary>
        </member>
        <member name="M:Nest.PutMappingDescriptor`1.MasterTimeout(System.String)">
            <summary>Specify timeout for connection to master</summary>
        </member>
        <member name="M:Nest.PutMappingDescriptor`1.IgnoreUnavailable(System.Boolean)">
            <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
        </member>
        <member name="M:Nest.PutMappingDescriptor`1.AllowNoIndices(System.Boolean)">
            <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
        </member>
        <member name="M:Nest.PutMappingDescriptor`1.ExpandWildcards(Elasticsearch.Net.ExpandWildcards)">
            <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        </member>
        <member name="M:Nest.PutMappingDescriptor`1.MapFromAttributes(System.Int32)">
            <summary>
            Convenience method to map from most of the object from the attributes/properties.
            Later calls can override whatever is set is by this call. 
            This helps mapping all the ints as ints, floats as floats etcetera withouth having to be overly verbose in your fluent mapping
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nest.PutTemplateDescriptor">
            <summary>descriptor for IndicesPutTemplateForAll
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-templates.html
            </pre>
            </summary>
        </member>
        <member name="M:Nest.PutTemplateDescriptor.Timeout(System.String)">
            <summary>Explicit operation timeout</summary>
        </member>
        <member name="M:Nest.PutTemplateDescriptor.MasterTimeout(System.String)">
            <summary>Specify timeout for connection to master</summary>
        </member>
        <member name="M:Nest.PutTemplateDescriptor.FlatSettings(System.Boolean)">
            <summary>Return settings in flat format (default: false)</summary>
        </member>
        <member name="M:Nest.PutTemplateDescriptor.InitializeUsing(Nest.TemplateMapping)">
            <summary>
            Initialize the descriptor using the values from for instance a previous Get Template Mapping call.
            </summary>
        </member>
        <member name="T:Nest.PutWarmerDescriptor">
            <summary>descriptor for IndicesPutWarmerForAll
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html
            </pre>
            </summary>
        </member>
        <member name="M:Nest.PutWarmerDescriptor.MasterTimeout(System.String)">
            <summary>Specify timeout for connection to master</summary>
        </member>
        <member name="M:Nest.PutWarmerDescriptor.IgnoreUnavailable(System.Boolean)">
            <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed) in the search request to warm</summary>
        </member>
        <member name="M:Nest.PutWarmerDescriptor.AllowNoIndices(System.Boolean)">
            <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices in the search request to warm. (This includes `_all` string or when no indices have been specified)</summary>
        </member>
        <member name="M:Nest.PutWarmerDescriptor.ExpandWildcards(Elasticsearch.Net.ExpandWildcards)">
            <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both, in the search request to warm.</summary>
        </member>
        <member name="T:Nest.IndicesRecoveryDescriptor">
            <summary>descriptor for IndicesRecoveryForAll
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/indices-recovery.html
            </pre>
            </summary>
        </member>
        <member name="M:Nest.IndicesRecoveryDescriptor.Detailed(System.Boolean)">
            <summary>Whether to display detailed information about shard recovery</summary>
        </member>
        <member name="M:Nest.IndicesRecoveryDescriptor.ActiveOnly(System.Boolean)">
            <summary>Display only those recoveries that are currently on-going</summary>
        </member>
        <member name="M:Nest.IndicesRecoveryDescriptor.Human(System.Boolean)">
            <summary>Whether to return time and byte values in human-readable format.</summary>
        </member>
        <member name="T:Nest.ValidateQueryDescriptor`1">
            <summary>descriptor for IndicesValidateQueryGetForAll
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-validate.html
            </pre>
            </summary>
        </member>
        <member name="M:Nest.ValidateQueryDescriptor`1.Explain(System.Boolean)">
            <summary>Return detailed information about the error</summary>
        </member>
        <member name="M:Nest.ValidateQueryDescriptor`1.IgnoreUnavailable(System.Boolean)">
            <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
        </member>
        <member name="M:Nest.ValidateQueryDescriptor`1.AllowNoIndices(System.Boolean)">
            <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
        </member>
        <member name="M:Nest.ValidateQueryDescriptor`1.ExpandWildcards(Elasticsearch.Net.ExpandWildcards)">
            <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        </member>
        <member name="M:Nest.ValidateQueryDescriptor`1.OperationThreading(System.String)">
            <summary>TODO: ?</summary>
        </member>
        <member name="M:Nest.ValidateQueryDescriptor`1.Source(System.String)">
            <summary>The URL-encoded query definition (instead of using the request body)</summary>
        </member>
        <member name="M:Nest.ValidateQueryDescriptor`1.Q(System.String)">
            <summary>Query in the Lucene query string syntax</summary>
        </member>
        <member name="T:Nest.ListBenchmarksDescriptor">
            <summary>descriptor for ListBenchmarks
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-benchmark.html
            </pre>
            </summary>
        </member>
        <member name="T:Nest.MultiGetDescriptor">
            <summary>descriptor for MgetGet
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-get.html
            </pre>
            </summary>
        </member>
        <member name="M:Nest.MultiGetDescriptor.Fields(System.String[])">
            <summary>A comma-separated list of fields to return in the response</summary>
        </member>
        <member name="M:Nest.MultiGetDescriptor.Fields``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>A comma-separated list of fields to return in the response</summary>
        </member>
        <member name="M:Nest.MultiGetDescriptor.Preference(System.String)">
            <summary>Specify the node or shard the operation should be performed on (default: random)</summary>
        </member>
        <member name="M:Nest.MultiGetDescriptor.Realtime(System.Boolean)">
            <summary>Specify whether to perform the operation in realtime or search mode</summary>
        </member>
        <member name="M:Nest.MultiGetDescriptor.Refresh(System.Boolean)">
            <summary>Refresh the shard containing the document before performing the operation</summary>
        </member>
        <member name="M:Nest.MultiGetDescriptor.SourceEnabled(System.String[])">
            <summary>True or false to return the _source field or not, or a list of fields to return</summary>
        </member>
        <member name="M:Nest.MultiGetDescriptor.SourceExclude(System.String[])">
            <summary>A list of fields to exclude from the returned _source field</summary>
        </member>
        <member name="M:Nest.MultiGetDescriptor.SourceExclude``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>A list of fields to exclude from the returned _source field</summary>
        </member>
        <member name="M:Nest.MultiGetDescriptor.SourceInclude(System.String[])">
            <summary>A list of fields to extract and return from the _source field</summary>
        </member>
        <member name="M:Nest.MultiGetDescriptor.SourceInclude``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>A list of fields to extract and return from the _source field</summary>
        </member>
        <member name="T:Nest.MoreLikeThisDescriptor`1">
            <summary>descriptor for MltGet
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-more-like-this.html
            </pre>
            </summary>
        </member>
        <member name="M:Nest.MoreLikeThisDescriptor`1.BoostTerms(System.Double)">
            <summary>The boost factor</summary>
        </member>
        <member name="M:Nest.MoreLikeThisDescriptor`1.MaxDocFreq(System.Int64)">
            <summary>The word occurrence frequency as count: words with higher occurrence in the corpus will be ignored</summary>
        </member>
        <member name="M:Nest.MoreLikeThisDescriptor`1.MaxQueryTerms(System.Int64)">
            <summary>The maximum query terms to be included in the generated query</summary>
        </member>
        <member name="M:Nest.MoreLikeThisDescriptor`1.MaxWordLength(System.Int64)">
            <summary>The minimum length of the word: longer words will be ignored</summary>
        </member>
        <member name="M:Nest.MoreLikeThisDescriptor`1.MinDocFreq(System.Int64)">
            <summary>The word occurrence frequency as count: words with lower occurrence in the corpus will be ignored</summary>
        </member>
        <member name="M:Nest.MoreLikeThisDescriptor`1.MinTermFreq(System.Int64)">
            <summary>The term frequency as percent: terms with lower occurence in the source document will be ignored</summary>
        </member>
        <member name="M:Nest.MoreLikeThisDescriptor`1.MinWordLength(System.Int64)">
            <summary>The minimum length of the word: shorter words will be ignored</summary>
        </member>
        <member name="M:Nest.MoreLikeThisDescriptor`1.MltFields(System.String[])">
            <summary>Specific fields to perform the query against</summary>
        </member>
        <member name="M:Nest.MoreLikeThisDescriptor`1.MltFields(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>Specific fields to perform the query against</summary>
        </member>
        <member name="M:Nest.MoreLikeThisDescriptor`1.PercentTermsToMatch(System.Double)">
            <summary>How many terms have to match in order to consider the document a match (default: 0.3)</summary>
        </member>
        <member name="M:Nest.MoreLikeThisDescriptor`1.Routing(System.String)">
            <summary>Specific routing value</summary>
        </member>
        <member name="M:Nest.MoreLikeThisDescriptor`1.SearchFrom(System.Int64)">
            <summary>The offset from which to return results</summary>
        </member>
        <member name="M:Nest.MoreLikeThisDescriptor`1.SearchIndices(System.String[])">
            <summary>A comma-separated list of indices to perform the query against (default: the index containing the document)</summary>
        </member>
        <member name="M:Nest.MoreLikeThisDescriptor`1.SearchQueryHint(System.String)">
            <summary>The search query hint</summary>
        </member>
        <member name="M:Nest.MoreLikeThisDescriptor`1.SearchScroll(System.String)">
            <summary>A scroll search request definition</summary>
        </member>
        <member name="M:Nest.MoreLikeThisDescriptor`1.SearchSize(System.Int64)">
            <summary>The number of documents to return (default: 10)</summary>
        </member>
        <member name="M:Nest.MoreLikeThisDescriptor`1.SearchSource(System.String)">
            <summary>A specific search request definition (instead of using the request body)</summary>
        </member>
        <member name="M:Nest.MoreLikeThisDescriptor`1.SearchType(System.String)">
            <summary>Specific search type (eg. `dfs_then_fetch`, `count`, etc)</summary>
        </member>
        <member name="M:Nest.MoreLikeThisDescriptor`1.SearchTypes(System.String[])">
            <summary>A comma-separated list of types to perform the query against (default: the same type as the document)</summary>
        </member>
        <member name="M:Nest.MoreLikeThisDescriptor`1.StopWords(System.String[])">
            <summary>A list of stop words to be ignored</summary>
        </member>
        <member name="M:Nest.MoreLikeThisDescriptor`1.Search(System.Func{Nest.SearchDescriptor{`0},Nest.SearchDescriptor{`0}})">
            <summary>
            Optionally specify more search options such as facets, from/to etcetera.
            </summary>
        </member>
        <member name="T:Nest.MpercolateDescriptor">
            <summary>descriptor for MpercolateGet
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html
            </pre>
            </summary>
        </member>
        <member name="M:Nest.MpercolateDescriptor.IgnoreUnavailable(System.Boolean)">
            <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
        </member>
        <member name="M:Nest.MpercolateDescriptor.AllowNoIndices(System.Boolean)">
            <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
        </member>
        <member name="M:Nest.MpercolateDescriptor.ExpandWildcards(Elasticsearch.Net.ExpandWildcards)">
            <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        </member>
        <member name="T:Nest.MultiSearchDescriptor">
            <summary>descriptor for MsearchGet
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-multi-search.html
            </pre>
            </summary>
        </member>
        <member name="M:Nest.MultiSearchDescriptor.SearchType(Elasticsearch.Net.SearchType)">
            <summary>Search operation type</summary>
        </member>
        <member name="T:Nest.NodesHotThreadsDescriptor">
            <summary>descriptor for NodesHotThreadsForAll
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-hot-threads.html
            </pre>
            </summary>
        </member>
        <member name="M:Nest.NodesHotThreadsDescriptor.Interval(System.String)">
            <summary>The interval for the second sampling of threads</summary>
        </member>
        <member name="M:Nest.NodesHotThreadsDescriptor.Snapshots(System.Int64)">
            <summary>Number of samples of thread stacktrace (default: 10)</summary>
        </member>
        <member name="M:Nest.NodesHotThreadsDescriptor.Threads(System.Int64)">
            <summary>Specify the number of threads to provide information for (default: 3)</summary>
        </member>
        <member name="M:Nest.NodesHotThreadsDescriptor.ThreadType(Elasticsearch.Net.ThreadType)">
            <summary>The type to sample (default: cpu)</summary>
        </member>
        <member name="T:Nest.NodesShutdownDescriptor">
            <summary>descriptor for NodesShutdownForAll
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-shutdown.html
            </pre>
            </summary>
        </member>
        <member name="M:Nest.NodesShutdownDescriptor.Delay(System.String)">
            <summary>Set the delay for the operation (default: 1s)</summary>
        </member>
        <member name="M:Nest.NodesShutdownDescriptor.Exit(System.Boolean)">
            <summary>Exit the JVM as well (default: true)</summary>
        </member>
        <member name="T:Nest.PercolateDescriptor`1">
            <summary>descriptor for PercolateGet
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html
            </pre>
            </summary>
        </member>
        <member name="M:Nest.PercolateDescriptor`1.Routing(System.String[])">
            <summary>A comma-separated list of specific routing values</summary>
        </member>
        <member name="M:Nest.PercolateDescriptor`1.Preference(System.String)">
            <summary>Specify the node or shard the operation should be performed on (default: random)</summary>
        </member>
        <member name="M:Nest.PercolateDescriptor`1.IgnoreUnavailable(System.Boolean)">
            <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
        </member>
        <member name="M:Nest.PercolateDescriptor`1.AllowNoIndices(System.Boolean)">
            <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
        </member>
        <member name="M:Nest.PercolateDescriptor`1.ExpandWildcards(Elasticsearch.Net.ExpandWildcards)">
            <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        </member>
        <member name="M:Nest.PercolateDescriptor`1.PercolateIndex(System.String)">
            <summary>The index to percolate the document into. Defaults to index.</summary>
        </member>
        <member name="M:Nest.PercolateDescriptor`1.PercolateType(System.String)">
            <summary>The type to percolate document into. Defaults to type.</summary>
        </member>
        <member name="M:Nest.PercolateDescriptor`1.Version(System.Int64)">
            <summary>Explicit version number for concurrency control</summary>
        </member>
        <member name="M:Nest.PercolateDescriptor`1.VersionType(Elasticsearch.Net.VersionType)">
            <summary>Specific version type</summary>
        </member>
        <member name="M:Nest.PercolateDescriptor`1.Document(`0)">
            <summary>
            The object to perculate
            </summary>
        </member>
        <member name="M:Nest.PercolateDescriptor`1.Id(System.String)">
            <summary>
            The object to perculate
            </summary>
        </member>
        <member name="M:Nest.PercolateDescriptor`1.Id(System.Int64)">
            <summary>
            The object to perculate
            </summary>
        </member>
        <member name="M:Nest.PercolateDescriptor`1.TrackScores(System.Boolean)">
            <summary>
            Make sure we keep calculating score even if we are sorting on a field.
            </summary>
        </member>
        <member name="M:Nest.PercolateDescriptor`1.SortAscending(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            <para>Allows to add one or more sort on specific fields. Each sort can be reversed as well.
            The sort is defined on a per field level, with special field name for _score to sort by score.
            </para>
            <para>
            Sort ascending.
            </para>
            </summary>
        </member>
        <member name="M:Nest.PercolateDescriptor`1.SortDescending(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            <para>Allows to add one or more sort on specific fields. Each sort can be reversed as well.
            The sort is defined on a per field level, with special field name for _score to sort by score.
            </para>
            <para>
            Sort descending.
            </para>
            </summary>
        </member>
        <member name="M:Nest.PercolateDescriptor`1.SortAscending(System.String)">
            <summary>
            <para>Allows to add one or more sort on specific fields. Each sort can be reversed as well.
            The sort is defined on a per field level, with special field name for _score to sort by score.
            </para>
            <para>
            Sort ascending.
            </para>
            </summary>
        </member>
        <member name="M:Nest.PercolateDescriptor`1.SortDescending(System.String)">
            <summary>
            <para>Allows to add one or more sort on specific fields. Each sort can be reversed as well.
            The sort is defined on a per field level, with special field name for _score to sort by score.
            </para>
            <para>
            Sort descending.
            </para>
            </summary>
        </member>
        <member name="M:Nest.PercolateDescriptor`1.Sort(System.Func{Nest.SortFieldDescriptor{`0},Nest.IFieldSort})">
            <summary>
            <para>Sort() allows you to fully describe your sort unlike the SortAscending and SortDescending aliases.
            </para>
            </summary>
        </member>
        <member name="M:Nest.PercolateDescriptor`1.SortGeoDistance(System.Func{Nest.SortGeoDistanceDescriptor{`0},Nest.IGeoDistanceSort})">
            <summary>
            <para>SortGeoDistance() allows you to sort by a distance from a geo point.
            </para>
            </summary>
        </member>
        <member name="M:Nest.PercolateDescriptor`1.SortScript(System.Func{Nest.DSL.Descriptors.SortScriptDescriptor{`0},Nest.DSL.Descriptors.IScriptSort})">
            <summary>
            <para>SortScript() allows you to sort by a distance from a geo point.
            </para>
            </summary>
        </member>
        <member name="M:Nest.PercolateDescriptor`1.Query(System.Func{Nest.QueryDescriptor{`0},Nest.QueryContainer})">
            <summary>
            Describe the query to perform using a query descriptor lambda
            </summary>
        </member>
        <member name="M:Nest.PercolateDescriptor`1.QueryString(System.String)">
            <summary>
            Shortcut to .Query(q=>q.QueryString(qs=>qs.Query("string"))
            Does a match_all if the userInput string is null or empty;
            </summary>
        </member>
        <member name="M:Nest.PercolateDescriptor`1.Filter(System.Func{Nest.FilterDescriptor{`0},Nest.FilterContainer})">
            <summary>
            Filter search using a filter descriptor lambda
            </summary>
        </member>
        <member name="M:Nest.PercolateDescriptor`1.Filter(Nest.FilterContainer)">
            <summary>
            Filter search
            </summary>
        </member>
        <member name="T:Nest.PingDescriptor">
            <summary>descriptor for Ping
            <pre>
            http://www.elasticsearch.org/guide/
            </pre>
            </summary>
        </member>
        <member name="T:Nest.SearchDescriptor`1">
            <summary>descriptor for SearchGet
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-search.html
            </pre>
            </summary>
            <summary>
            A descriptor wich describes a search operation for _search and _msearch
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.Analyzer(System.String)">
            <summary>The analyzer to use for the query string</summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.AnalyzeWildcard(System.Boolean)">
            <summary>Specify whether wildcard and prefix queries should be analyzed (default: false)</summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.DefaultOperator(Elasticsearch.Net.DefaultOperator)">
            <summary>The default operator for query string query (AND or OR)</summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.Df(System.String)">
            <summary>The field to use as default where no field prefix is given in the query string</summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.IgnoreUnavailable(System.Boolean)">
            <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.AllowNoIndices(System.Boolean)">
            <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.ExpandWildcards(Elasticsearch.Net.ExpandWildcards)">
            <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.Lenient(System.Boolean)">
            <summary>Specify whether format-based query failures (such as providing text to a numeric field) should be ignored</summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.LowercaseExpandedTerms(System.Boolean)">
            <summary>Specify whether query terms should be lowercased</summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.Preference(System.String)">
            <summary>Specify the node or shard the operation should be performed on (default: random)</summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.Routing(System.String[])">
            <summary>A comma-separated list of specific routing values</summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.Scroll(System.String)">
            <summary>Specify how long a consistent view of the index should be maintained for scrolled search</summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.SearchType(Elasticsearch.Net.SearchType)">
            <summary>Search operation type</summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.Stats(System.String[])">
            <summary>Specific &#39;tag&#39; of the request for logging and statistical purposes</summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.SuggestField(System.String)">
            <summary>Specify which field to use for suggestions</summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.SuggestField(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>Specify which field to use for suggestions</summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.SuggestMode(Elasticsearch.Net.SuggestMode)">
            <summary>Specify suggest mode</summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.SuggestSize(System.Int64)">
            <summary>How many suggestions to return in response</summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.SuggestText(System.String)">
            <summary>The source text for which the suggestions should be returned</summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.Strict(System.Boolean)">
            <summary>
            When strict is set, conditionless queries are treated as an exception. 
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.Size(System.Int32)">
            <summary>
            The number of hits to return. Defaults to 10. When using scroll search type 
            size is actually multiplied by the number of shards!
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.Take(System.Int32)">
            <summary>
            The number of hits to return. Defaults to 10.
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.From(System.Int32)">
            <summary>
            The starting from index of the hits to return. Defaults to 0.
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.Skip(System.Int32)">
            <summary>
            The starting from index of the hits to return. Defaults to 0.
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.Timeout(System.String)">
            <summary>
            A search timeout, bounding the search request to be executed within the 
            specified time value and bail with the hits accumulated up
            to that point when expired. Defaults to no timeout.
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.Explain(System.Boolean)">
            <summary>
            Enables explanation for each hit on how its score was computed. 
            (Use .DocumentsWithMetaData on the return results)
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.Version(System.Boolean)">
            <summary>
            Returns a version for each search hit. (Use .DocumentsWithMetaData on the return results)
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.TrackScores(System.Boolean)">
            <summary>
            Make sure we keep calculating score even if we are sorting on a field.
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.MinScore(System.Double)">
            <summary>
            Allows to filter out documents based on a minimum score:
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.ExecuteOnPrimary">
            <summary>
            <para>
            Controls a preference of which shard replicas to execute the search request on. 
            By default, the operation is randomized between the each shard replicas.
            </para>
            <para>
            The operation will go and be executed only on the primary shards.
            </para>
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.ExecuteOnPrimaryFirst">
            <summary>
            <para>
            Controls a preference of which shard replicas to execute the search request on. 
            By default, the operation is randomized between the each shard replicas.
            </para>
            <para>
            The operation will go and be executed on the primary shard, and if not available (failover), 
            will execute on other shards.
            </para>
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.ExecuteOnLocalShard">
            <summary>
            <para>
            Controls a preference of which shard replicas to execute the search request on. 
            By default, the operation is randomized between the each shard replicas.
            </para>
            <para>
            The operation will prefer to be executed on a local allocated shard is possible.
            </para>
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.ExecuteOnNode(System.String)">
            <summary>
            <para>
            Controls a preference of which shard replicas to execute the search request on. 
            By default, the operation is randomized between the each shard replicas.
            </para>
            <para>
            Restricts the search to execute only on a node with the provided node id
            </para>
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.ExecuteOnPreferredNode(System.String)">
            <summary>
            <para>
            Controls a preference of which shard replicas to execute the search request on. 
            By default, the operation is randomized between the each shard replicas.
            </para>
            <para>
            Prefers execution on the node with the provided node id if applicable.
            </para>
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.IndicesBoost(System.Func{Nest.FluentDictionary{Nest.IndexNameMarker,System.Double},Nest.FluentDictionary{Nest.IndexNameMarker,System.Double}})">
            <summary>
            Allows to configure different boost level per index when searching across 
            more than one indices. This is very handy when hits coming from one index
            matter more than hits coming from another index (think social graph where each user has an index).
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.Fields(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Allows to selectively load specific fields for each document 
            represented by a search hit. Defaults to load the internal _source field.
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.Fields(System.Func{Nest.FluentFieldList{`0},Nest.FluentFieldList{`0}})">
            <summary>
            Allows to selectively load specific fields for each document 
            represented by a search hit. Defaults to load the internal _source field.
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.Fields(System.String[])">
            <summary>
            Allows to selectively load specific fields for each document 
            represented by a search hit. Defaults to load the internal _source field.
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.SortAscending(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            <para>Allows to add one or more sort on specific fields. Each sort can be reversed as well.
            The sort is defined on a per field level, with special field name for _score to sort by score.
            </para>
            <para>
            Sort ascending.
            </para>
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.SortDescending(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            <para>Allows to add one or more sort on specific fields. Each sort can be reversed as well.
            The sort is defined on a per field level, with special field name for _score to sort by score.
            </para>
            <para>
            Sort descending.
            </para>
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.SortAscending(System.String)">
            <summary>
            <para>Allows to add one or more sort on specific fields. Each sort can be reversed as well.
            The sort is defined on a per field level, with special field name for _score to sort by score.
            </para>
            <para>
            Sort ascending.
            </para>
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.SortDescending(System.String)">
            <summary>
            <para>Allows to add one or more sort on specific fields. Each sort can be reversed as well.
            The sort is defined on a per field level, with special field name for _score to sort by score.
            </para>
            <para>
            Sort descending.
            </para>
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.Sort(System.Func{Nest.SortFieldDescriptor{`0},Nest.IFieldSort})">
            <summary>
            <para>Sort() allows you to fully describe your sort unlike the SortAscending and SortDescending aliases.
            </para>
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.SortGeoDistance(System.Func{Nest.SortGeoDistanceDescriptor{`0},Nest.IGeoDistanceSort})">
            <summary>
            <para>SortGeoDistance() allows you to sort by a distance from a geo point.
            </para>
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.SortScript(System.Func{Nest.DSL.Descriptors.SortScriptDescriptor{`0},Nest.DSL.Descriptors.IScriptSort})">
            <summary>
            <para>SortScript() allows you to sort by a distance from a geo point.
            </para>
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.FacetTerm(System.String,System.Func{Nest.TermFacetDescriptor{`0},Nest.TermFacetDescriptor{`0}})">
            <summary>
            Allow to specify field facets that return the N most frequent terms.
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.FacetTerm(System.Func{Nest.TermFacetDescriptor{`0},Nest.TermFacetDescriptor{`0}},System.String)">
            <summary>
            Allow to specify field facets that return the N most frequent terms.
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.FacetRange``1(System.String,System.Func{Nest.RangeFacetDescriptor{`0,``0},Nest.RangeFacetDescriptor{`0,``0}})">
            <summary>
            range facet allow to specify a set of ranges and get both the number of docs (count) 
            that fall within each range, and aggregated data either based on the field, or using another field
            </summary>
            <typeparam name="K">struct, (int, double, string, DateTime)</typeparam>
        </member>
        <member name="M:Nest.SearchDescriptor`1.FacetRange``1(System.Func{Nest.RangeFacetDescriptor{`0,``0},Nest.RangeFacetDescriptor{`0,``0}},System.String)">
            <summary>
            range facet allow to specify a set of ranges and get both the number of docs (count) 
            that fall within each range, and aggregated data either based on the field, or using another field
            </summary>
            <typeparam name="K">struct, (int, double, string, DateTime)</typeparam>
        </member>
        <member name="M:Nest.SearchDescriptor`1.FacetHistogram(System.String,System.Func{Nest.HistogramFacetDescriptor{`0},Nest.HistogramFacetDescriptor{`0}})">
            <summary>
            The histogram facet works with numeric data by building a histogram across intervals 
            of the field values. Each value is “rounded” into an interval (or placed in a bucket), 
            and statistics are provided per interval/bucket (count and total). 
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.FacetHistogram(System.Func{Nest.HistogramFacetDescriptor{`0},Nest.HistogramFacetDescriptor{`0}},System.String)">
            <summary>
            The histogram facet works with numeric data by building a histogram across intervals 
            of the field values. Each value is “rounded” into an interval (or placed in a bucket), 
            and statistics are provided per interval/bucket (count and total). 
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.FacetDateHistogram(System.String,System.Func{Nest.DateHistogramFacetDescriptor{`0},Nest.DateHistogramFacetDescriptor{`0}})">
            <summary>
            A specific histogram facet that can work with date field types enhancing it over the regular histogram facet.
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.FacetDateHistogram(System.Func{Nest.DateHistogramFacetDescriptor{`0},Nest.DateHistogramFacetDescriptor{`0}},System.String)">
            <summary>
            A specific histogram facet that can work with date field types enhancing it over the regular histogram facet.
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.FacetStatistical(System.String,System.Func{Nest.StatisticalFacetDescriptor{`0},Nest.StatisticalFacetDescriptor{`0}})">
            <summary>
            Statistical facet allows to compute statistical data on a numeric fields. 
            The statistical data include count, total, sum of squares, 
            mean (average), minimum, maximum, variance, and standard deviation. 
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.FacetStatistical(System.Func{Nest.StatisticalFacetDescriptor{`0},Nest.StatisticalFacetDescriptor{`0}},System.String)">
            <summary>
            Statistical facet allows to compute statistical data on a numeric fields. 
            The statistical data include count, total, sum of squares, 
            mean (average), minimum, maximum, variance, and standard deviation. 
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.FacetTermsStats(System.String,System.Func{Nest.TermsStatsFacetDescriptor{`0},Nest.TermsStatsFacetDescriptor{`0}})">
            <summary>
            The terms_stats facet combines both the terms and statistical allowing 
            to compute stats computed on a field, per term value driven by another field.
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.FacetTermsStats(System.Func{Nest.TermsStatsFacetDescriptor{`0},Nest.TermsStatsFacetDescriptor{`0}},System.String)">
            <summary>
            The terms_stats facet combines both the terms and statistical allowing 
            to compute stats computed on a field, per term value driven by another field.
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.FacetGeoDistance(System.String,System.Func{Nest.GeoDistanceFacetDescriptor{`0},Nest.GeoDistanceFacetDescriptor{`0}})">
            <summary>
            The geo_distance facet is a facet providing information for ranges of distances
            from a provided geo_point including count of the number of hits that fall 
            within each range, and aggregation information (like total).
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.FacetGeoDistance(System.Func{Nest.GeoDistanceFacetDescriptor{`0},Nest.GeoDistanceFacetDescriptor{`0}},System.String)">
            <summary>
            The geo_distance facet is a facet providing information for ranges of distances
            from a provided geo_point including count of the number of hits that fall 
            within each range, and aggregation information (like total).
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.FacetQuery(System.String,System.Func{Nest.QueryDescriptor{`0},Nest.QueryContainer},System.Nullable{System.Boolean})">
            <summary>
            A facet query allows to return a count of the hits matching 
            the facet query. The query itself can be expressed using the Query DSL.
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.FacetFilter(System.String,System.Func{Nest.FilterDescriptor{`0},Nest.FilterContainer})">
            <summary>
            A filter facet (not to be confused with a facet filter) allows you to return a count of the h
            its matching the filter. The filter itself can be expressed using the Query DSL.
            Note, filter facet filters are faster than query facet when using native filters (non query wrapper ones).
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.SuggestTerm(System.String,System.Func{Nest.TermSuggestDescriptor{`0},Nest.TermSuggestDescriptor{`0}})">
            <summary>
            The term suggester suggests terms based on edit distance. The provided suggest text is analyzed before terms are suggested. 
            The suggested terms are provided per analyzed suggest text token. The term suggester doesn’t take the query into account that is part of request.
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.SuggestPhrase(System.String,System.Func{Nest.PhraseSuggestDescriptor{`0},Nest.PhraseSuggestDescriptor{`0}})">
            <summary>
            The phrase suggester adds additional logic on top of the term suggester to select entire corrected phrases 
            instead of individual tokens weighted based on ngram-langugage models. 
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.SuggestCompletion(System.String,System.Func{Nest.CompletionSuggestDescriptor{`0},Nest.CompletionSuggestDescriptor{`0}})">
            <summary>
            The completion suggester is a so-called prefix suggester. 
            It does not do spell correction like the term or phrase suggesters but allows basic auto-complete functionality.
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.Query(System.Func{Nest.QueryDescriptor{`0},Nest.QueryContainer})">
            <summary>
            Describe the query to perform using a query descriptor lambda
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.Query(Nest.IQueryContainer)">
            <summary>
            Describe the query to perform using the static Query class
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.QueryString(System.String)">
            <summary>
            Shortcut to .Query(q=>q.QueryString(qs=>qs.Query("string"))
            Does a match_all if the userInput string is null or empty;
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.QueryRaw(System.String)">
            <summary>
            Describe the query to perform as a raw json string
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.Filter(System.Func{Nest.FilterDescriptor{`0},Nest.FilterContainer})">
            <summary>
            Filter search using a filter descriptor lambda
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.Filter(Nest.FilterContainer)">
            <summary>
            Filter search
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.FilterRaw(System.String)">
            <summary>
            Filter search using a raw json string
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.Highlight(System.Action{Nest.HighlightDescriptor{`0}})">
            <summary>
            Allow to highlight search results on one or more fields. The implementation uses the either lucene fast-vector-highlighter or highlighter. 
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.Rescore(System.Action{Nest.RescoreDescriptor{`0}})">
            <summary>
            Allows you to specify a rescore query
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.MatchAll">
            <summary>
            Shorthand for a match_all query without having to specify .Query(q=>q.MatchAll())
            </summary>
        </member>
        <member name="P:Nest.SearchDescriptor`1._Strict">
            <summary>
            Whether conditionless queries are allowed or not
            </summary>
        </member>
        <member name="T:Nest.SearchShardsDescriptor">
            <summary>descriptor for SearchShardsGet
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-shards.html
            </pre>
            </summary>
        </member>
        <member name="M:Nest.SearchShardsDescriptor.Preference(System.String)">
            <summary>Specify the node or shard the operation should be performed on (default: random)</summary>
        </member>
        <member name="M:Nest.SearchShardsDescriptor.Routing(System.String)">
            <summary>Specific routing value</summary>
        </member>
        <member name="M:Nest.SearchShardsDescriptor.Local(System.Boolean)">
            <summary>Return local information, do not retrieve the state from master node (default: false)</summary>
        </member>
        <member name="M:Nest.SearchShardsDescriptor.IgnoreUnavailable(System.Boolean)">
            <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
        </member>
        <member name="M:Nest.SearchShardsDescriptor.AllowNoIndices(System.Boolean)">
            <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
        </member>
        <member name="M:Nest.SearchShardsDescriptor.ExpandWildcards(Elasticsearch.Net.ExpandWildcards)">
            <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        </member>
        <member name="T:Nest.SearchTemplateDescriptor">
            <summary>descriptor for SearchTemplateGet
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-template.html
            </pre>
            </summary>
        </member>
        <member name="M:Nest.SearchTemplateDescriptor.IgnoreUnavailable(System.Boolean)">
            <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
        </member>
        <member name="M:Nest.SearchTemplateDescriptor.AllowNoIndices(System.Boolean)">
            <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
        </member>
        <member name="M:Nest.SearchTemplateDescriptor.ExpandWildcards(Elasticsearch.Net.ExpandWildcards)">
            <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        </member>
        <member name="M:Nest.SearchTemplateDescriptor.Preference(System.String)">
            <summary>Specify the node or shard the operation should be performed on (default: random)</summary>
        </member>
        <member name="M:Nest.SearchTemplateDescriptor.Routing(System.String[])">
            <summary>A comma-separated list of specific routing values</summary>
        </member>
        <member name="M:Nest.SearchTemplateDescriptor.Scroll(System.String)">
            <summary>Specify how long a consistent view of the index should be maintained for scrolled search</summary>
        </member>
        <member name="M:Nest.SearchTemplateDescriptor.SearchType(Elasticsearch.Net.SearchType)">
            <summary>Search operation type</summary>
        </member>
        <member name="T:Nest.SnapshotGetRepositoryDescriptor">
            <summary>descriptor for SnapshotGetRepository
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html
            </pre>
            </summary>
        </member>
        <member name="M:Nest.SnapshotGetRepositoryDescriptor.MasterTimeout(System.String)">
            <summary>Explicit operation timeout for connection to master node</summary>
        </member>
        <member name="M:Nest.SnapshotGetRepositoryDescriptor.Local(System.Boolean)">
            <summary>Return local information, do not retrieve the state from master node (default: false)</summary>
        </member>
        <member name="T:Nest.SnapshotStatusDescriptor">
            <summary>descriptor for SnapshotStatus
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/modules-snapshots.html
            </pre>
            </summary>
        </member>
        <member name="M:Nest.SnapshotStatusDescriptor.MasterTimeout(System.String)">
            <summary>Explicit operation timeout for connection to master node</summary>
        </member>
        <member name="T:Nest.UpdateDescriptor`2">
            <summary>descriptor for Update
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-update.html
            </pre>
            </summary>
        </member>
        <member name="M:Nest.UpdateDescriptor`2.Consistency(Elasticsearch.Net.Consistency)">
            <summary>Explicit write consistency setting for the operation</summary>
        </member>
        <member name="M:Nest.UpdateDescriptor`2.Lang(System.String)">
            <summary>The script language (default: mvel)</summary>
        </member>
        <member name="M:Nest.UpdateDescriptor`2.Parent(System.String)">
            <summary>ID of the parent document</summary>
        </member>
        <member name="M:Nest.UpdateDescriptor`2.Refresh(System.Boolean)">
            <summary>Refresh the index after performing the operation</summary>
        </member>
        <member name="M:Nest.UpdateDescriptor`2.Replication(Elasticsearch.Net.Replication)">
            <summary>Specific replication type</summary>
        </member>
        <member name="M:Nest.UpdateDescriptor`2.RetryOnConflict(System.Int64)">
            <summary>Specify how many times should the operation be retried when a conflict occurs (default: 0)</summary>
        </member>
        <member name="M:Nest.UpdateDescriptor`2.Routing(System.String)">
            <summary>Specific routing value</summary>
        </member>
        <member name="M:Nest.UpdateDescriptor`2.ScriptQueryString(System.String)">
            <summary>The URL-encoded script definition (instead of using request body)</summary>
        </member>
        <member name="M:Nest.UpdateDescriptor`2.Timeout(System.String)">
            <summary>Explicit operation timeout</summary>
        </member>
        <member name="M:Nest.UpdateDescriptor`2.Timestamp(System.String)">
            <summary>Explicit timestamp for the document</summary>
        </member>
        <member name="M:Nest.UpdateDescriptor`2.Ttl(System.String)">
            <summary>Expiration time for the document</summary>
        </member>
        <member name="M:Nest.UpdateDescriptor`2.Version(System.Int64)">
            <summary>Explicit version number for concurrency control</summary>
        </member>
        <member name="M:Nest.UpdateDescriptor`2.VersionType(Elasticsearch.Net.VersionType)">
            <summary>Specific version type</summary>
        </member>
        <member name="M:Nest.UpdateDescriptor`2.Upsert(`0)">
            <summary>
            The full document to be created if an existing document does not exist for a partial merge.
            </summary>
        </member>
        <member name="M:Nest.UpdateDescriptor`2.Doc(`1)">
            <summary>
            The partial update document to be merged on to the existing object.
            </summary>
        </member>
        <member name="M:Nest.UpdateDescriptor`2.Fields(System.String[])">
            <summary>A comma-separated list of fields to return in the response</summary>
        </member>
        <member name="M:Nest.UpdateDescriptor`2.Fields(System.Linq.Expressions.Expression{System.Func{`1,System.Object}}[])">
            <summary>A comma-separated list of fields to return in the response</summary>
        </member>
        <member name="T:Nest.TermsAggregationExecutionHint">
            <summary>
            Determines how the terms aggregation is executed
            </summary>
        </member>
        <member name="F:Nest.TermsAggregationExecutionHint.Map">
            <summary>
            Order by using field values directly in order to aggregate data per-bucket 
            </summary>
        </member>
        <member name="F:Nest.TermsAggregationExecutionHint.Ordinals">
            <summary>
            Order by using ordinals of the field values instead of the values themselves
            </summary>
        </member>
        <member name="F:Nest.GeoHashPrecision.Precision1">
            <summary>
            5,009.4km x 4,992.6km
            </summary>
        </member>
        <member name="F:Nest.GeoHashPrecision.Precision2">
            <summary>
            1,252.3km x 624.1km
            </summary>
        </member>
        <member name="F:Nest.GeoHashPrecision.Precision3">
            <summary>
            156.5km x 156km
            </summary>
        </member>
        <member name="F:Nest.GeoHashPrecision.Precision4">
            <summary>
            39.1km x 19.5km
            </summary>
        </member>
        <member name="F:Nest.GeoHashPrecision.Precision5">
            <summary>
            4.9km x 4.9km
            </summary>
        </member>
        <member name="F:Nest.GeoHashPrecision.Precision6">
            <summary>
            1.2km x 609.4m
            </summary>
        </member>
        <member name="F:Nest.GeoHashPrecision.Precision7">
            <summary>
            152.9m x 152.4m
            </summary>
        </member>
        <member name="F:Nest.GeoHashPrecision.Precision8">
            <summary>
            38.2m x 19m
            </summary>
        </member>
        <member name="F:Nest.GeoHashPrecision.Precision9">
            <summary>
            4.8m x 4.8m
            </summary>
        </member>
        <member name="F:Nest.GeoHashPrecision.Precision10">
            <summary>
            1.2m x 59.5cm
            </summary>
        </member>
        <member name="F:Nest.GeoHashPrecision.Precision11">
            <summary>
            14.9cm x 14.9cm
            </summary>
        </member>
        <member name="F:Nest.GeoHashPrecision.Precision12">
            <summary>
            3.7cm x 1.9cm
            </summary>
        </member>
        <member name="T:Nest.DispatchException">
            <summary>
            Occurs when an IElasticClient call does not have 
            enough information to dispatch into the raw client.
            </summary>
        </member>
        <member name="T:Nest.JsonConverterPiggyBackState">
            <summary>
            Registerering global jsonconverters is very costly,
            The best thing is to specify them as a contract (see ElasticContractResolver)
            This however prevents a way to give a jsonconverter state which for some calls is needed i.e:
            A multiget and multisearch need access to the descriptor that describes what types are used.
            When NEST knows it has to piggyback this it has to pass serialization state it will create a new 
            serializersettings object with a new contract resolver which holds this state. Its ugly but it does boost
            massive performance gains.
            </summary>
        </member>
        <member name="M:Nest.SuffixExtensions.Suffix(System.Object,System.String)">
            <summary>
            This extension method should only be used in expressions which are analysed by Nest.
            When analysed it will append <paramref name="suffix"/> to the path separating it with a dot.
            This is especially useful with multi fields.
            </summary>
        </member>
        <member name="T:Nest.RawDispatch">
            <summary>
            Raw operations with elasticsearch
            </summary>
        </member>
        <member name="T:Nest.IndexedGeoShape">
            <summary>
            An object to describe an indexed geoshape
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/query-dsl-geo-shape-filter.html
            </summary>
        </member>
        <member name="M:Nest.TermsLookupFilterDescriptor.Type(System.String)">
            <summary>
            If not specified will use the default typename for the type specified on Lookup&lt;T&gt;
            </summary>
        </member>
        <member name="M:Nest.TermsLookupFilterDescriptor.Index(System.String)">
            <summary>
            If not specified will use the default index for the type specified on Lookup&lt;T&gt;
            </summary>
        </member>
        <member name="M:Nest.TermsLookupFilterDescriptor.CacheLookup(System.Boolean)">
            <summary>
            Whether to cache the filter built from the retrieved document (true - default) or whether to fetch and 
            rebuild the filter on every request (false).
            </summary>
        </member>
        <member name="M:Nest.TermsLookupFilterDescriptor.Routing(System.String)">
            <summary>
            A custom routing value to be used when retrieving the external terms doc.
            </summary>
        </member>
        <member name="M:Nest.TermsLookupFilterDescriptor.Routing(Nest.TermsExecution)">
            <summary>
            The way terms filter executes is by iterating over the terms provided and 
            finding matches docs (loading into a bitset) and caching it. Sometimes, 
            we want a different execution model that can still be achieved by building more complex 
            queries in the DSL, but we can support them in the more compact model that terms filter provides.
            </summary>
        </member>
        <member name="T:Nest.DynamicMappingOption">
            <summary>
            Controls how elasticsearch handles dynamic mapping changes when a new document present new fields
            </summary>
        </member>
        <member name="F:Nest.DynamicMappingOption.Allow">
            <summary>
            Default value, allows unmapped fields to be cause a mapping update 
            </summary>
        </member>
        <member name="F:Nest.DynamicMappingOption.Ignore">
            <summary>
            New unmapped fields will be silently ignored
            </summary>
        </member>
        <member name="F:Nest.DynamicMappingOption.Strict">
            <summary>
            If new unmapped fields are passed, the whole document WON'T be added/updated
            </summary>
        </member>
        <member name="T:Nest.IReindexResponse`1">
            <summary>
            POCO representing the reindex response for a each step
            </summary>
        </member>
        <member name="P:Nest.IReindexResponse`1.BulkResponse">
            <summary>
            The bulk result indexing the search results into the new index.
            </summary>
        </member>
        <member name="P:Nest.IReindexResponse`1.SearchResponse">
            <summary>
            The scroll result
            </summary>
        </member>
        <member name="P:Nest.IReindexResponse`1.Scroll">
            <summary>
            The no of scroll this result represents
            </summary>
        </member>
        <member name="P:Nest.IReindexResponse`1.IsValid">
            <summary>
            Whether both the scroll and reindex result are valid
            </summary>
        </member>
        <member name="M:Nest.ReindexDescriptor`1.ToIndex(System.String)">
            <summary>
            The index into which we're indexing
            </summary>
        </member>
        <member name="M:Nest.ReindexDescriptor`1.FromIndex(System.String)">
            <summary>
            The index from which we're reindexing 
            </summary>
        </member>
        <member name="M:Nest.ReindexDescriptor`1.Scroll(System.String)">
            <summary>
            A search request can be scrolled by specifying the scroll parameter. The scroll parameter is a time value parameter (for example: scroll=5m), indicating for how long the nodes that participate in the search will maintain relevant resources in order to continue and support it. This is very similar in its idea to opening a cursor against a database.
            </summary>
            <param name="scrollTime">The scroll parameter is a time value parameter (for example: scroll=5m)</param>
            <returns></returns>
        </member>
        <member name="M:Nest.ReindexDescriptor`1.Query(System.Func{Nest.QueryDescriptor{`0},Nest.QueryContainer})">
            <summary>
            A query to optionally limit the documents to use for the reindex operation.  
            </summary>
        </member>
        <member name="M:Nest.ReindexDescriptor`1.NewIndexName(System.String)">
            <summary>
            The new index name to reindex too. 
            </summary>
        </member>
        <member name="M:Nest.ReindexDescriptor`1.CreateIndex(System.Func{Nest.CreateIndexDescriptor,Nest.CreateIndexDescriptor})">
            <summary>
            CreateIndex selector, will be passed the a descriptor initialized with the settings from
            the index we're reindexing from
            </summary>
        </member>
        <member name="T:Nest.ReindexResponse`1">
            <summary>
            POCO representing the reindex response for a each step
            </summary>
        </member>
        <member name="T:Nest.RawJson">
            <summary>
            Marker class that signals to the CustomJsonConverter to write the string verbatim
            </summary>
        </member>
        <member name="P:Nest.BulkOperationResponseItem.IsValid">
            <summary>
            Specifies wheter this particular bulk operation succeeded or not
            </summary>
        </member>
        <member name="M:Nest.BulkUpdateOperation`2.#ctor(`0,System.Boolean)">
            <summary>
            Create a new bulk operation
            </summary>
            <param name="idFrom">Use this document to infer the id from</param>
            <param name="useIdFromAsUpsert">Use the document to infer on as the upsert document in this update operation</param>
        </member>
        <member name="M:Nest.BulkUpdateOperation`2.#ctor(`0,`1,System.Boolean)">
            <summary>
            Create a new Bulk Operation
            </summary>
            <param name="idFrom">Use this document to infer the id from</param>
            <param name="update">The partial update document (doc) to send as update</param>
            <param name="useIdFromAsUpsert">Use the document to infer on as the upsert document in this update operation</param>
        </member>
        <member name="M:Nest.BulkOperationDescriptorBase.Nest#IBulkOperation#GetBody">
            <summary>
            Only used for bulk update operations but in the future might come in handy for other complex bulk ops.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nest.BulkUpdateDescriptor`2.Index(System.String)">
            <summary>
            Manually set the index, default to the default index or the fixed index set on the bulk operation
            </summary>
        </member>
        <member name="M:Nest.BulkUpdateDescriptor`2.Type(System.String)">
            <summary>
            Manualy set the type to get the object from, default to whatever
            T will be inferred to if not passed or the fixed type set on the parent bulk operation
            </summary>
        </member>
        <member name="M:Nest.BulkUpdateDescriptor`2.Type(System.Type)">
            <summary>
            Manually set the type of which a typename will be inferred
            </summary>
        </member>
        <member name="M:Nest.BulkUpdateDescriptor`2.Id(System.Int64)">
            <summary>
            Manually set the id for the newly created object
            </summary>
        </member>
        <member name="M:Nest.BulkUpdateDescriptor`2.Id(System.String)">
            <summary>
            Manually set the id for the newly created object
            </summary>
        </member>
        <member name="M:Nest.BulkUpdateDescriptor`2.IdFrom(`0,System.Boolean)">
            <summary>
            The object to update, if id is not manually set it will be inferred from the object.
            Used ONLY to infer the ID see Document() to apply a partial object merge.
            </summary>
        </member>
        <member name="M:Nest.BulkUpdateDescriptor`2.Upsert(`0)">
            <summary>
            A document to upsert when the specified document to be updated is not found
            </summary>
        </member>
        <member name="M:Nest.BulkUpdateDescriptor`2.Doc(`1)">
            <summary>
            The partial update document to be merged on to the existing object.
            </summary>
        </member>
        <member name="M:Nest.RegisterPercolatorDescriptor`1.AddMetadata(System.Func{Nest.FluentDictionary{System.String,System.Object},Nest.FluentDictionary{System.String,System.Object}})">
            <summary>
            Add metadata associated with this percolator query document
            </summary>
        </member>
        <member name="M:Nest.RegisterPercolatorDescriptor`1.Query(System.Func{Nest.QueryDescriptor{`0},Nest.QueryContainer})">
            <summary>
            The query to perform the percolation
            </summary>
        </member>
        <member name="P:Nest.IElasticPropertyAttribute.NumericType">
            <summary>
            Defaults to float so be sure to set this correctly!
            </summary>
        </member>
        <member name="P:Nest.IElasticPropertyAttribute.DateFormat">
            <summary>
            http://www.elasticsearch.org/guide/reference/mapping/date-format.html
            </summary>
        </member>
        <member name="M:Nest.CreateWarmerDescriptor.WarmerName(System.String)">
            <summary>
            The name of the warmer
            </summary>
        </member>
        <member name="T:Nest.MatchPhrasePrefixQueryDescriptor`1">
            <summary>
            A Query that matches documents containing a particular sequence of terms.
            It allows for prefix matches on the last term in the text.
            </summary>
            <typeparam name="T">Type of document</typeparam>
        </member>
        <member name="T:Nest.MatchPhraseQueryDescriptor`1">
            <summary>
            A Query that matches documents containing a particular sequence of terms. A PhraseQuery is built by QueryParser for input like "new york".
            </summary>
            <typeparam name="T">Type of document</typeparam>
        </member>
        <member name="P:Nest.BulkIndexResponseItem.Matches">
            <summary>
            Null if Percolation was not requested while indexing this doc, otherwise returns the percolator _ids that matched (if any)
            </summary>
        </member>
        <member name="M:Nest.BulkCreateDescriptor`1.Index(System.String)">
            <summary>
            Manually set the index, default to the default index or the fixed index set on the bulk operation
            </summary>
        </member>
        <member name="M:Nest.BulkCreateDescriptor`1.Type(System.String)">
            <summary>
            Manualy set the type to get the object from, default to whatever
            T will be inferred to if not passed or the fixed type set on the parent bulk operation
            </summary>
        </member>
        <member name="M:Nest.BulkCreateDescriptor`1.Type(System.Type)">
            <summary>
            Manually set the type of which a typename will be inferred
            </summary>
        </member>
        <member name="M:Nest.BulkCreateDescriptor`1.Id(System.Int64)">
            <summary>
            Manually set the id for the newly created object
            </summary>
        </member>
        <member name="M:Nest.BulkCreateDescriptor`1.Id(System.String)">
            <summary>
            Manually set the id for the newly created object
            </summary>
        </member>
        <member name="M:Nest.BulkCreateDescriptor`1.Document(`0)">
            <summary>
            The object to update, if id is not manually set it will be inferred from the object
            </summary>
        </member>
        <member name="M:Nest.BulkIndexDescriptor`1.Index(System.String)">
            <summary>
            Manually set the index, default to the default index or the fixed index set on the bulk operation
            </summary>
        </member>
        <member name="M:Nest.BulkIndexDescriptor`1.Type(System.String)">
            <summary>
            Manualy set the type to get the object from, default to whatever
            T will be inferred to if not passed or the fixed type set on the parent bulk operation
            </summary>
        </member>
        <member name="M:Nest.BulkIndexDescriptor`1.Type(System.Type)">
            <summary>
            Manually set the type of which a typename will be inferred
            </summary>
        </member>
        <member name="M:Nest.BulkIndexDescriptor`1.Id(System.Int64)">
            <summary>
            Manually set the id for the newly created object
            </summary>
        </member>
        <member name="M:Nest.BulkIndexDescriptor`1.Id(System.String)">
            <summary>
            Manually set the id for the newly created object
            </summary>
        </member>
        <member name="M:Nest.BulkIndexDescriptor`1.Document(`0)">
            <summary>
            The object to index, if id is not manually set it will be inferred from the object
            </summary>
        </member>
        <member name="M:Nest.BulkDeleteDescriptor`1.Index(System.String)">
            <summary>
            Manually set the index, default to the default index or the fixed index set on the bulk operation
            </summary>
        </member>
        <member name="M:Nest.BulkDeleteDescriptor`1.Type(System.String)">
            <summary>
            Manualy set the type to get the object from, default to whatever
            T will be inferred to if not passed or the fixed type set on the parent bulk operation
            </summary>
        </member>
        <member name="M:Nest.BulkDeleteDescriptor`1.Type(System.Type)">
            <summary>
            Manually set the type of which a typename will be inferred
            </summary>
        </member>
        <member name="M:Nest.BulkDeleteDescriptor`1.Id(System.Int64)">
            <summary>
            Manually set the id for the newly created object
            </summary>
        </member>
        <member name="M:Nest.BulkDeleteDescriptor`1.Id(System.String)">
            <summary>
            Manually set the id for the newly created object
            </summary>
        </member>
        <member name="M:Nest.BulkDeleteDescriptor`1.Document(`0)">
            <summary>
            The object to infer the id off, (if id is not passed using Id())
            </summary>
        </member>
        <member name="T:Nest.Language">
            <summary>
            Language types used for language analyzers
            </summary>
        </member>
        <member name="T:Nest.LanguageAnalyzer">
            <summary>
            A set of analyzers aimed at analyzing specific language text. 
            </summary>
        </member>
        <member name="P:Nest.LanguageAnalyzer.StopWords">
            <summary>
            A list of stopword to initialize the stop filter with. Defaults to the english stop words.
            </summary>
        </member>
        <member name="P:Nest.LanguageAnalyzer.StopwordsPath">
            <summary>
            A path (either relative to config location, or absolute) to a stopwords file configuration.
            </summary>
        </member>
        <member name="T:Nest.KeywordAnalyzer">
            <summary>
            An analyzer of type keyword that “tokenizes” an entire stream as a single token. This is useful for data like zip codes, ids and so on. 
            <para>Note, when using mapping definitions, it make more sense to simply mark the field as not_analyzed.</para>
            </summary>
        </member>
        <member name="T:Nest.PatternAnalyzer">
            <summary>
            An analyzer of type pattern that can flexibly separate text into terms via a regular expression. 
            </summary>
        </member>
        <member name="T:Nest.StopAnalyzer">
            <summary>
            An analyzer of type stop that is built using a Lower Case Tokenizer, with Stop Token Filter.
            </summary>
        </member>
        <member name="P:Nest.StopAnalyzer.StopWords">
            <summary>
            A list of stopword to initialize the stop filter with. Defaults to the english stop words.
            </summary>
        </member>
        <member name="P:Nest.StopAnalyzer.StopwordsPath">
            <summary>
            A path (either relative to config location, or absolute) to a stopwords file configuration.
            </summary>
        </member>
        <member name="T:Nest.WhitespaceAnalyzer">
            <summary>
            An analyzer of type whitespace that is built using a Whitespace Tokenizer.
            </summary>
        </member>
        <member name="T:Nest.SimpleAnalyzer">
            <summary>
            An analyzer of type simple that is built using a Lower Case Tokenizer.
            </summary>
        </member>
        <member name="T:Nest.HtmlStripCharFilter">
            <summary>
            A char filter of type html_strip stripping out HTML elements from an analyzed text.
            </summary>
        </member>
        <member name="T:Nest.MappingCharFilter">
            <summary>
            A char filter of type mapping replacing characters of an analyzed text with given mapping.
            </summary>
        </member>
        <member name="T:Nest.AsciiFoldingTokenFilter">
            <summary>
            A token filter of type asciifolding that converts alphabetic, numeric, and symbolic Unicode characters which are 
            <para> not in the first 127 ASCII characters (the “Basic Latin” Unicode block) into their ASCII equivalents, if one exists.</para>
            </summary>
        </member>
        <member name="T:Nest.CompoundWordTokenFilter">
            <summary>
            Token filters that allow to decompose compound words.
            </summary>
        </member>
        <member name="P:Nest.CompoundWordTokenFilter.WordList">
            <summary>
            A list of words to use.
            </summary>
        </member>
        <member name="P:Nest.CompoundWordTokenFilter.WordListPath">
            <summary>
            A path (either relative to config location, or absolute) to a list of words.
            </summary>
        </member>
        <member name="P:Nest.CompoundWordTokenFilter.MinWordSize">
            <summary>
            Minimum word size.
            </summary>
        </member>
        <member name="P:Nest.CompoundWordTokenFilter.MinSubwordSize">
            <summary>
            Minimum subword size.
            </summary>
        </member>
        <member name="P:Nest.CompoundWordTokenFilter.MaxSubwordSize">
            <summary>
            Maximum subword size.
            </summary>
        </member>
        <member name="P:Nest.CompoundWordTokenFilter.OnlyLongestMatch">
            <summary>
            Only matching the longest.
            </summary>
        </member>
        <member name="T:Nest.TrimTokenFilter">
            <summary>
            The trim token filter trims surrounding whitespaces around a token.
            </summary>
        </member>
        <member name="T:Nest.UniqueTokenFilter">
            <summary>
            The unique token filter can be used to only index unique tokens during analysis. By default it is applied on all the token stream
            </summary>
        </member>
        <member name="P:Nest.UniqueTokenFilter.OnlyOnSamePosition">
            <summary>
             If only_on_same_position is set to true, it will only remove duplicate tokens on the same position.
            </summary>
        </member>
        <member name="T:Nest.TruncateTokenFilter">
            <summary>
            The truncate token filter can be used to truncate tokens into a specific length. This can come in handy with keyword (single token) 
            <para> based mapped fields that are used for sorting in order to reduce memory usage.</para>
            </summary>
        </member>
        <member name="P:Nest.TruncateTokenFilter.Length">
            <summary>
            length parameter which control the number of characters to truncate to, defaults to 10.
            </summary>
        </member>
        <member name="T:Nest.ElisionTokenFilter">
            <summary>
            A token filter which removes elisions. For example, “l’avion” (the plane) will tokenized as “avion” (plane).
            </summary>
        </member>
        <member name="P:Nest.ElisionTokenFilter.Articles">
            <summary>
            Accepts articles setting which is a set of stop words articles
            </summary>
        </member>
        <member name="T:Nest.ReverseTokenFilter">
            <summary>
            A token filter of type reverse that simply reverses the tokens.
            </summary>
        </member>
        <member name="T:Nest.PhoneticTokenFilter">
            <summary>
            The phonetic token filter is provided as a plugin.
            </summary>
        </member>
        <member name="T:Nest.SnowballTokenFilter">
            <summary>
            A filter that stems words using a Snowball-generated stemmer.
            </summary>
        </member>
        <member name="T:Nest.KStemTokenFilter">
             <summary>
            The kstem token filter is a high performance filter for english. 
            <para> All terms must already be lowercased (use lowercase filter) for this filter to work correctly.</para>
             </summary>
        </member>
        <member name="T:Nest.KeywordMarkerTokenFilter">
            <summary>
            Protects words from being modified by stemmers. Must be placed before any stemming filters.
            </summary>
        </member>
        <member name="T:Nest.StemmerTokenFilter">
            <summary>
            A filter that stems words (similar to snowball, but with more options).
            </summary>
        </member>
        <member name="T:Nest.PorterStemTokenFilter">
            <summary>
            A token filter of type porterStem that transforms the token stream as per the Porter stemming algorithm.
            </summary>
        </member>
        <member name="T:Nest.LowercaseTokenFilter">
             <summary>
             A token filter of type lowercase that normalizes token text to lower case.
            <para> Lowercase token filter supports Greek and Turkish lowercase token filters through the language parameter.</para>
             </summary>
        </member>
        <member name="T:Nest.LengthTokenFilter">
            <summary>
            A token filter of type length that removes words that are too long or too short for the stream.
            </summary>
        </member>
        <member name="T:Nest.StandardTokenFilter">
            <summary>
            A token filter of type standard that normalizes tokens extracted with the Standard Tokenizer.
            </summary>
        </member>
        <member name="T:Nest.PathHierarchyTokenizer">
             <summary>
             The path_hierarchy tokenizer takes something like this:
            <para>/something/something/else</para>
            <para>And produces tokens:</para>
            <para></para>
            <para>/something</para>
            <para>/something/something</para>
            <para>/something/something/else</para>
             </summary>
        </member>
        <member name="P:Nest.PathHierarchyTokenizer.Delimiter">
            <summary>
            The character delimiter to use, defaults to /.
            </summary>
        </member>
        <member name="P:Nest.PathHierarchyTokenizer.Replacement">
            <summary>
            An optional replacement character to use. Defaults to the delimiter
            </summary>
        </member>
        <member name="P:Nest.PathHierarchyTokenizer.BufferSize">
            <summary>
            The buffer size to use, defaults to 1024.
            </summary>
        </member>
        <member name="P:Nest.PathHierarchyTokenizer.Reverse">
            <summary>
            Generates tokens in reverse order, defaults to false.
            </summary>
        </member>
        <member name="P:Nest.PathHierarchyTokenizer.Skip">
            <summary>
            Controls initial tokens to skip, defaults to 0.
            </summary>
        </member>
        <member name="T:Nest.UaxEmailUrlTokenizer">
            <summary>
            A tokenizer of type uax_url_email which works exactly like the standard tokenizer, but tokenizes emails and urls as single tokens
            </summary>
        </member>
        <member name="P:Nest.UaxEmailUrlTokenizer.MaximumTokenLength">
            <summary>
            The maximum token length. If a token is seen that exceeds this length then it is discarded. Defaults to 255.
            </summary>
        </member>
        <member name="T:Nest.PatternTokenizer">
            <summary>
            A tokenizer of type pattern that can flexibly separate text into terms via a regular expression. 
            </summary>
        </member>
        <member name="P:Nest.PatternTokenizer.Pattern">
            <summary>
            The regular expression pattern, defaults to \W+.
            </summary>
        </member>
        <member name="P:Nest.PatternTokenizer.Flags">
            <summary>
            The regular expression flags.
            </summary>
        </member>
        <member name="P:Nest.PatternTokenizer.Group">
            <summary>
            Which group to extract into tokens. Defaults to -1 (split).
            </summary>
        </member>
        <member name="T:Nest.WhitespaceTokenizer">
            <summary>
            A tokenizer of type whitespace that divides text at whitespace.
            </summary>
        </member>
        <member name="T:Nest.StandardTokenizer">
            <summary>
            A tokenizer of type standard providing grammar based tokenizer that is a good tokenizer for most European language documents. 
            <para>The tokenizer implements the Unicode Text Segmentation algorithm, as specified in Unicode Standard Annex #29.</para>
            </summary>
        </member>
        <member name="P:Nest.StandardTokenizer.MaximumTokenLength">
            <summary>
            The maximum token length. If a token is seen that exceeds this length then it is discarded. Defaults to 255.
            </summary>
        </member>
        <member name="T:Nest.NGramTokenizer">
            <summary>
            A tokenizer of type nGram.
            </summary>
        </member>
        <member name="T:Nest.LowercaseTokenizer">
            <summary>
            A tokenizer of type lowercase that performs the function of Letter Tokenizer and Lower Case Token Filter together. 
            <para>It divides text at non-letters and converts them to lower case. </para>
            <para>While it is functionally equivalent to the combination of Letter Tokenizer and Lower Case Token Filter, </para>
            <para>there is a performance advantage to doing the two tasks at once, hence this (redundant) implementation.</para>
            </summary>
        </member>
        <member name="T:Nest.LetterTokenizer">
            <summary>
            A tokenizer of type letter that divides text at non-letters. That’s to say, it defines tokens as maximal strings of adjacent letters. 
            <para>Note, this does a decent job for most European languages, but does a terrible job for some Asian languages, where words are not separated by spaces.</para>
            </summary>
        </member>
        <member name="T:Nest.EdgeNGramTokenizer">
            <summary>
            A tokenizer of type edgeNGram.
            </summary>
        </member>
        <member name="T:Nest.KeywordTokenizer">
            <summary>
            A tokenizer of type keyword that emits the entire input as a single input.
            </summary>
        </member>
        <member name="P:Nest.KeywordTokenizer.BufferSize">
            <summary>
            The term buffer size. Defaults to 256.
            </summary>
        </member>
        <member name="T:Nest.EdgeNGramTokenFilter">
            <summary>
            A token filter of type edgeNGram.
            </summary>
        </member>
        <member name="M:Nest.NestedObjectMappingDescriptor`2.MapFromAttributes(System.Int32)">
            <summary>
            Convenience method to map from most of the object from the attributes/properties.
            Later calls on the fluent interface can override whatever is set is by this call. 
            This helps mapping all the ints as ints, floats as floats etcetera withouth having to be overly verbose in your fluent mapping
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nest.ObjectMappingDescriptor`2.MapFromAttributes(System.Int32)">
            <summary>
            Convenience method to map from most of the object from the attributes/properties.
            Later calls on the fluent interface can override whatever is set is by this call. 
            This helps mapping all the ints as ints, floats as floats etcetera withouth having to be overly verbose in your fluent mapping
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nest.BinaryMapping.IndexName">
            <summary>
            The name of the field that will be stored in the index. Defaults to the property/field name.
            </summary>
        </member>
        <member name="P:Nest.BooleanMapping.IndexName">
            <summary>
            The name of the field that will be stored in the index. Defaults to the property/field name.
            </summary>
        </member>
        <member name="P:Nest.DateMapping.IndexName">
            <summary>
            The name of the field that will be stored in the index. Defaults to the property/field name.
            </summary>
        </member>
        <member name="P:Nest.NumberMapping.IndexName">
            <summary>
            The name of the field that will be stored in the index. Defaults to the property/field name.
            </summary>
        </member>
        <member name="P:Nest.StringMapping.IndexName">
            <summary>
            The name of the field that will be stored in the index. Defaults to the property/field name.
            </summary>
        </member>
        <member name="M:Nest.Domain.IFieldSelection`1.FieldValues``1(System.String)">
            <summary>
            As of elasticsearch fields are always returned as an array. except for internal metadata values such as routing.
            </summary>
            <typeparam name="K">The type to return the value as, remember that if your field is a string K should be string[]</typeparam>
        </member>
        <member name="M:Nest.Domain.FieldSelection`1.FieldValues``1(System.String)">
            <summary>
            As of elasticsearch fields are always returned as an array. except for internal metadata values such as routing.
            </summary>
            <typeparam name="K">The type to return the value as, remember that if your field is a string K should be string[]</typeparam>
        </member>
        <member name="M:Nest.Domain.FieldSelection`1.FieldValues``2(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            As of elasticsearch fields are always returned as an array. 
            except for internal metadata values such as routing.
            </summary>
        </member>
        <member name="M:Nest.Domain.FieldSelection`1.FieldValues``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            As of elasticsearch fields are always returned as an array. 
            except for internal metadata values such as routing.
            </summary>
        </member>
        <member name="M:Nest.Domain.FieldSelection`1.FieldArray``1(System.String)">
            <summary>
            As of elasticsearch fields are always returned as an array. except for internal metadata values such as routing.
            </summary>
            <typeparam name="K">The type to return the value as, remember that if your field is a string K should be string[]</typeparam>
        </member>
        <member name="T:Nest.NgramTokenFilter">
            <summary>
            A token filter of type nGram.
            </summary>
        </member>
        <member name="T:Nest.SynonymTokenFilter">
            <summary>
            The synonym token filter allows to easily handle synonyms during the analysis process. 
            </summary>
        </member>
        <member name="P:Nest.ValidateResponse.Explanations">
            <summary>
            Gets the explanations if Explain() was set.
            </summary>
        </member>
        <member name="M:Nest.FilterContainer.op_BitwiseAnd(Nest.FilterContainer,Nest.FilterContainer)">
            <summary>
            AND's two BaseFilters
            </summary>
            <returns>A new basefilter that represents the AND of the two</returns>
        </member>
        <member name="T:Nest.TermsQueryDescriptor`2">
            <summary>
            A query that match on any (configurable) of the provided terms. 
            This is a simpler syntax query for using a bool query with several term queries in the should clauses.
            </summary>
            <typeparam name="T">The type that represents the expected hit type</typeparam>
            <typeparam name="K">The type of the field that we want to specfify terms for</typeparam>
        </member>
        <member name="M:Nest.FilterDescriptor`1.Conditionless(System.Action{Nest.ConditionlessFilterDescriptor{`0}})">
            <summary>
            A thin wrapper allowing fined grained control what should happen if a filter is conditionless
            if you need to fallback to something other than a match_all query
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.Exists(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Filters documents where a specific field has a value in them.
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.Exists(System.String)">
            <summary>
            Filters documents where a specific field has a value in them.
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.Missing(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Action{Nest.MissingFilterDescriptor})">
            <summary>
            Filters documents where a specific field has no value in them.
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.Missing(System.String,System.Action{Nest.MissingFilterDescriptor})">
            <summary>
            Filters documents where a specific field has no value in them.
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.Ids(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Filters documents that only have the provided ids. 
            Note, this filter does not require the _id field to be indexed since it works using the _uid field.
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.Ids(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Filters documents that only have the provided ids. 
            Note, this filter does not require the _id field to be indexed since it works using the _uid field.
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.Ids(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Filters documents that only have the provided ids. 
            Note, this filter does not require the _id field to be indexed since it works using the _uid field.
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.GeoBoundingBox(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Double,System.Double,System.Double,System.Double,System.Nullable{Nest.GeoExecution})">
            <summary>
            A filter allowing to filter hits based on a point location using a bounding box
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.GeoBoundingBox(System.String,System.Double,System.Double,System.Double,System.Double,System.Nullable{Nest.GeoExecution})">
            <summary>
            A filter allowing to filter hits based on a point location using a bounding box
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.GeoBoundingBox(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String,System.String,System.Nullable{Nest.GeoExecution})">
            <summary>
            A filter allowing to filter hits based on a point location using a bounding box
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.GeoBoundingBox(System.String,System.String,System.String,System.Nullable{Nest.GeoExecution})">
            <summary>
            A filter allowing to filter hits based on a point location using a bounding box
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.GeoDistance(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Action{Nest.GeoDistanceFilterDescriptor})">
            <summary>
            Filters documents that include only hits that exists within a specific distance from a geo point. 
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.GeoDistance(System.String,System.Action{Nest.GeoDistanceFilterDescriptor})">
            <summary>
            Filters documents that include only hits that exists within a specific distance from a geo point. 
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.GeoDistanceRange(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Action{Nest.GeoDistanceRangeFilterDescriptor})">
            <summary>
            Filters documents that exists within a range from a specific point:
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.GeoDistanceRange(System.String,System.Action{Nest.GeoDistanceRangeFilterDescriptor})">
            <summary>
            Filters documents that exists within a range from a specific point:
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.GeoShapeCircle(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Action{Nest.GeoShapeCircleFilterDescriptor})">
            <summary>
            Filter documents indexed using the circle geo_shape type.
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.GeoShapeCircle(System.String,System.Action{Nest.GeoShapeCircleFilterDescriptor})">
            <summary>
            Filter documents indexed using the circle geo_shape type.
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.GeoShapeEnvelope(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Action{Nest.GeoShapeEnvelopeFilterDescriptor})">
            <summary>
            Filter documents indexed using the envelope geo_shape type.
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.GeoShapeEnvelope(System.String,System.Action{Nest.GeoShapeEnvelopeFilterDescriptor})">
            <summary>
            Filter documents indexed using the envelope geo_shape type.
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.GeoShapeLineString(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Action{Nest.GeoShapeLineStringFilterDescriptor})">
            <summary>
            Filter documents indexed using the linestring geo_shape type.
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.GeoShapeLineString(System.String,System.Action{Nest.GeoShapeLineStringFilterDescriptor})">
            <summary>
            Filter documents indexed using the linestring geo_shape type.
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.GeoShapeMultiLineString(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Action{Nest.GeoShapeMultiLineStringFilterDescriptor})">
            <summary>
            Filter documents indexed using the multilinestring geo_shape type.
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.GeoShapeMultiLineString(System.String,System.Action{Nest.GeoShapeMultiLineStringFilterDescriptor})">
            <summary>
            Filter documents indexed using the multilinestring geo_shape type.
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.GeoShapePoint(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Action{Nest.GeoShapePointFilterDescriptor})">
            <summary>
            Filter documents indexed using the point geo_shape type.
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.GeoShapePoint(System.String,System.Action{Nest.GeoShapePointFilterDescriptor})">
            <summary>
            Filter documents indexed using the point geo_shape type.
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.GeoShapeMultiPoint(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Action{Nest.GeoShapeMultiPointFilterDescriptor})">
            <summary>
            Filter documents indexed using the multipoint geo_shape type.
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.GeoShapeMultiPoint(System.String,System.Action{Nest.GeoShapeMultiPointFilterDescriptor})">
            <summary>
            Filter documents indexed using the multipoint geo_shape type.
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.GeoShapePolygon(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Action{Nest.GeoShapePolygonFilterDescriptor})">
            <summary>
            Filter documents indexed using the polygon geo_shape type.
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.GeoShapePolygon(System.String,System.Action{Nest.GeoShapePolygonFilterDescriptor})">
            <summary>
            Filter documents indexed using the polygon geo_shape type.
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.GeoShapeMultiPolygon(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Action{Nest.GeoShapeMultiPolygonFilterDescriptor})">
            <summary>
            Filter documents indexed using the multipolygon geo_shape type.
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.GeoShapeMultiPolygon(System.String,System.Action{Nest.GeoShapeMultiPolygonFilterDescriptor})">
            <summary>
            Filter documents indexed using the multipolygon geo_shape type.
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.GeoIndexedShape(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Action{Nest.GeoIndexedShapeFilterDescriptor})">
            <summary>
            Filter documents indexed using the geo_shape type.
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.GeoIndexedShape(System.String,System.Action{Nest.GeoIndexedShapeFilterDescriptor})">
            <summary>
            Filter documents indexed using the geo_shape type.
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.GeoPolygon(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Collections.Generic.IEnumerable{System.Tuple{System.Double,System.Double}})">
            <summary>
            A filter allowing to include hits that only fall within a polygon of points. 
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.GeoPolygon(System.String,System.Collections.Generic.IEnumerable{System.Tuple{System.Double,System.Double}})">
            <summary>
            A filter allowing to include hits that only fall within a polygon of points. 
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.GeoPolygon(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String[])">
            <summary>
            A filter allowing to include hits that only fall within a polygon of points. 
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.GeoPolygon(System.String,System.String[])">
            <summary>
            A filter allowing to include hits that only fall within a polygon of points. 
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.HasChild``1(System.Action{Nest.HasChildFilterDescriptor{``0}})">
            <summary>
            The has_child filter accepts a query and the child type to run against, 
            and results in parent documents that have child docs matching the query.
            </summary>
            <typeparam name="K">Type of the child</typeparam>
        </member>
        <member name="M:Nest.FilterDescriptor`1.HasParent``1(System.Action{Nest.HasParentFilterDescriptor{``0}})">
            <summary>
            The has_child filter accepts a query and the child type to run against, 
            and results in parent documents that have child docs matching the query.
            </summary>
            <typeparam name="K">Type of the child</typeparam>
        </member>
        <member name="M:Nest.FilterDescriptor`1.Limit(System.Nullable{System.Int32})">
            <summary>
            A limit filter limits the number of documents (per shard) to execute on.
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.Type(System.String)">
            <summary>
            Filters documents matching the provided document / mapping type. 
            Note, this filter can work even when the _type field is not indexed 
            (using the _uid field).
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.Type(System.Type)">
            <summary>
            Filters documents matching the provided document / mapping type. 
            Note, this filter can work even when the _type field is not indexed 
            (using the _uid field).
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.MatchAll">
            <summary>
            A filter that matches on all documents.
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.Range(System.Action{Nest.RangeFilterDescriptor{`0}})">
            <summary>
            Filters documents with fields that have terms within a certain range. 
            Similar to range query, except that it acts as a filter. 
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.Script(System.Action{Nest.ScriptFilterDescriptor})">
            <summary>
            A filter allowing to define scripts as filters. 
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.Prefix(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String)">
            <summary>
            Filters documents that have fields containing terms with a specified prefix 
            (not analyzed). Similar to phrase query, except that it acts as a filter. 
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.Prefix(System.String,System.String)">
            <summary>
            Filters documents that have fields containing terms with a specified prefix 
            (not analyzed). Similar to phrase query, except that it acts as a filter. 
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.Term``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
            Filters documents that have fields that contain a term (not analyzed). 
            Similar to term query, except that it acts as a filter
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.Term(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Object)">
            <summary>
            Filters documents that have fields that contain a term (not analyzed). 
            Similar to term query, except that it acts as a filter
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.Term(System.String,System.Object)">
            <summary>
            Filters documents that have fields that contain a term (not analyzed).
            Similar to term query, except that it acts as a filter
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.Terms``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Collections.Generic.IEnumerable{``0},System.Nullable{Nest.TermsExecution})">
            <summary>
            Filters documents that have fields that match any of the provided terms (not analyzed). 
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.Terms(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Collections.Generic.IEnumerable{System.String},System.Nullable{Nest.TermsExecution})">
            <summary>
            Filters documents that have fields that match any of the provided terms (not analyzed). 
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.Terms(System.String,System.Collections.Generic.IEnumerable{System.String},System.Nullable{Nest.TermsExecution})">
            <summary>
            Filters documents that have fields that match any of the provided terms (not analyzed). 
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.TermsLookup(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Action{Nest.TermsLookupFilterDescriptor})">
            <summary>
            Filter documents indexed using the geo_shape type.
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.TermsLookup(System.String,System.Action{Nest.TermsLookupFilterDescriptor})">
            <summary>
            Filter documents indexed using the geo_shape type.
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.And(System.Func{Nest.FilterDescriptor{`0},Nest.FilterContainer}[])">
            <summary>
            A filter that matches documents using AND boolean operator on other queries. 
            This filter is more performant then bool filter. 
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.And(Nest.FilterContainer[])">
            <summary>
            A filter that matches documents using AND boolean operator on other queries. 
            This filter is more performant then bool filter. 
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.Or(System.Func{Nest.FilterDescriptor{`0},Nest.FilterContainer}[])">
            <summary>
            A filter that matches documents using OR boolean operator on other queries. 
            This filter is more performant then bool filter
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.Or(Nest.FilterContainer[])">
            <summary>
            A filter that matches documents using OR boolean operator on other queries. 
            This filter is more performant then bool filter
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.Not(System.Func{Nest.FilterDescriptor{`0},Nest.FilterContainer})">
            <summary>
            A filter that filters out matched documents using a query. 
            This filter is more performant then bool filter. 
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.Bool(System.Action{Nest.BoolFilterDescriptor{`0}})">
            <summary>
            
            A filter that matches documents matching boolean combinations of other queries.
            Similar in concept to Boolean query, except that the clauses are other filters. 
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.Query(System.Func{Nest.QueryDescriptor{`0},Nest.QueryContainer})">
            <summary>
            Wraps any query to be used as a filter. 
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.Nested(System.Action{Nest.NestedFilterDescriptor{`0}})">
            <summary>
             A nested filter, works in a similar fashion to the nested query, except used as a filter.
             It follows exactly the same structure, but also allows to cache the results 
             (set _cache to true), and have it named (set the _name value). 
            </summary>
            <param name="selector"></param>
        </member>
        <member name="M:Nest.FilterDescriptor`1.Regexp(System.Action{Nest.RegexpFilterDescriptor{`0}})">
            <summary>
             The regexp filter allows you to use regular expression term queries. 
            </summary>
            <param name="selector"></param>
        </member>
        <member name="M:Nest.RangeFilterDescriptor`1.LowerOrEquals(System.Nullable{System.Double})">
            <summary>
            Same as setting to and include_upper to true.
            </summary>
        </member>
        <member name="M:Nest.GeoDistanceRangeFilterDescriptor.FromExclusive">
            <summary>
            Forces the 'From()' to be exclusive (which is inclusive by default).
            </summary>
        </member>
        <member name="M:Nest.GeoDistanceRangeFilterDescriptor.ToExclusive">
            <summary>
            Forces the 'To()' to be exclusive (which is inclusive by default).
            </summary>
        </member>
        <member name="M:Nest.BoolQueryDescriptor`1.MinimumShouldMatch(System.Int32)">
            <summary>
            Specifies a minimum number of the optional BooleanClauses which must be satisfied.
            </summary>
            <param name="minimumShouldMatches"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.BoolQueryDescriptor`1.MinimumShouldMatch(System.String)">
            <summary>
            Specifies a minimum number of the optional BooleanClauses which must be satisfied. String overload where you can specify percentages
            </summary>
            <param name="minimumShouldMatches"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.BoolQueryDescriptor`1.Boost(System.Double)">
            <summary>
            Boost this results matching this query.
            </summary>
            <param name="boost"></param>
        </member>
        <member name="M:Nest.BoolQueryDescriptor`1.Must(System.Func{Nest.QueryDescriptor{`0},Nest.QueryContainer}[])">
            <summary>
            The clause(s) that must appear in matching documents
            </summary>
        </member>
        <member name="M:Nest.BoolQueryDescriptor`1.Must(Nest.QueryContainer[])">
            <summary>
            The clause(s) that must appear in matching documents
            </summary>
        </member>
        <member name="M:Nest.BoolQueryDescriptor`1.MustNot(System.Func{Nest.QueryDescriptor{`0},Nest.QueryContainer}[])">
            <summary>
            The clause (query) should appear in the matching document. A boolean query with no must clauses, one or more should clauses must match a document. 
            The minimum number of should clauses to match can be set using minimum_should_match parameter.
            </summary>
            <param name="queries"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.BoolQueryDescriptor`1.MustNot(Nest.QueryContainer[])">
            <summary>
            The clause (query) should appear in the matching document. A boolean query with no must clauses, one or more should clauses must match a document.
             The minimum number of should clauses to match can be set using minimum_should_match parameter.
            </summary>
            <param name="queries"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.BoolQueryDescriptor`1.Should(System.Func{Nest.QueryDescriptor{`0},Nest.QueryContainer}[])">
            <summary>
            The clause (query) must not appear in the matching documents. Note that it is not possible to search on documents that only consists of a must_not clauses.
            </summary>
            <param name="queries"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.BoolQueryDescriptor`1.Should(Nest.QueryContainer[])">
            <summary>
            The clause (query) must not appear in the matching documents. Note that it is not possible to search on documents that only consists of a must_not clauses.
            </summary>
            <param name="queries"></param>
            <returns></returns>
        </member>
        <member name="T:Nest.TopChildrenQueryDescriptor`1">
            <summary>
            The top_children query runs the child query with an estimated hits size, and out of the hit docs, 
            aggregates it into parent docs. If there aren’t enough parent docs matching the 
            requested from/size search request, then it is run again with a wider (more hits) search.
            </summary>
            <typeparam name="T">Type used to strongly type parts of this query</typeparam>
        </member>
        <member name="M:Nest.TopChildrenQueryDescriptor`1.Query(System.Func{Nest.QueryDescriptor{`0},Nest.QueryContainer})">
            <summary>
            Provide a child query for the top_children query
            </summary>
            <param name="querySelector">Describe the child query to be executed</param>
        </member>
        <member name="M:Nest.TopChildrenQueryDescriptor`1.Factor(System.Int32)">
            <summary>
            How many hits are asked for in the first child query run is controlled using the factor parameter (defaults to 5).
            </summary>
            <param name="factor">The factor that controls how many hits are asked for</param>
        </member>
        <member name="M:Nest.TopChildrenQueryDescriptor`1.Score(Nest.TopChildrenScore)">
            <summary>
            Provide a scoring mode for the child hits
            </summary>
            <param name="score">max, sum or avg</param>
        </member>
        <member name="M:Nest.TopChildrenQueryDescriptor`1.IncrementalFactor(System.Int32)">
            <summary>
            If the initial fetch did not result in enough parent documents this factor will be used to determine
            the next pagesize
            </summary>
            <param name="factor">Multiplier for the original factor parameter</param>
        </member>
        <member name="M:Nest.TopChildrenQueryDescriptor`1.Type(System.String)">
            <summary>
            The type of the children to query, defaults to the inferred typename for the T
            that was used on the TopChildren call
            </summary>
        </member>
        <member name="M:Nest.RangeQueryDescriptor`1.Boost(System.Double)">
            <summary>
            Boosts the range query by the specified boost factor
            </summary>
            <param name="boost">Boost factor</param>
        </member>
        <member name="M:Nest.CustomScoreQueryDescriptor`1.Script(System.String)">
            <summary>
            Scripts are cached for faster execution. If the script has parameters that it needs to take into account, it is preferable to use the same script, and provide parameters to it:
            </summary>
            <param name="script"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.DSL.Descriptors.SortScriptDescriptor`1.MissingValue(System.String)">
            <summary>
            Value to sort on when the orginal value for the field is missing
            </summary>
        </member>
        <member name="F:Nest.DateRounding.Floor">
            <summary>
            (the default), rounds to the lowest whole unit of this field.
            </summary>
        </member>
        <member name="F:Nest.DateRounding.Ceiling">
            <summary>
            Rounds to the highest whole unit of this field.
            </summary>
        </member>
        <member name="F:Nest.DateRounding.HalfFloor">
            <summary>
             Round to the nearest whole unit of this field. If the given millisecond value is closer to the floor or is exactly halfway, this function behaves like floor. If the millisecond value is closer to the ceiling, this function behaves like ceiling.
            </summary>
        </member>
        <member name="F:Nest.DateRounding.HalfCeiling">
            <summary>
            Round to the nearest whole unit of this field. If the given millisecond value is closer to the floor, this function behaves like floor. If the millisecond value is closer to the ceiling or is exactly halfway, this function behaves like ceiling.
            </summary>
        </member>
        <member name="F:Nest.DateRounding.HalfEven">
            <summary>
            Round to the nearest whole unit of this field. If the given millisecond value is closer to the floor, this function behaves like floor. If the millisecond value is closer to the ceiling, this function behaves like ceiling. If the millisecond value is exactly halfway between the floor and ceiling, the ceiling is chosen over the floor only if it makes this field’s value even.
            </summary>
        </member>
        <member name="T:Nest.ScriptFilterDescriptor">
            <summary>
            A filter allowing to define scripts as filters.
            Ex: "doc['num1'].value > 1"
            </summary>
        </member>
        <member name="M:Nest.ScriptFilterDescriptor.Script(System.String)">
            <summary>
            Filter script.
            </summary>
            <param name="script">script</param>
            <returns>this</returns>
        </member>
        <member name="M:Nest.ScriptFilterDescriptor.Params(System.Func{Nest.FluentDictionary{System.String,System.Object},Nest.FluentDictionary{System.String,System.Object}})">
            <summary>
            Scripts are compiled and cached for faster execution.
            If the same script can be used, just with different parameters provider,
            it is preferable to use the ability to pass parameters to the script itself.
            Ex:
            	Script: "doc['num1'].value > param1"
            	param: "param1" = 5
            </summary>
            <param name="paramDictionary">param</param>
            <returns>this</returns>
        </member>
        <member name="M:Nest.ScriptFilterDescriptor.Lang(System.String)">
            <summary>
            Language of script.
            </summary>
            <param name="lang">language</param>
            <returns>this</returns>
        </member>
        <member name="T:Nest.FuzzyQueryJsonConverter">
            <summary>
            JSON converter for IDictionary that ignores the contract resolver (e.g. CamelCasePropertyNamesContractResolver)
            when converting dictionary keys to property names.
            </summary>
        </member>
        <member name="M:Nest.QueryDescriptor`1.Raw(System.String)">
            <summary>
            Insert raw query json at this position of the query
            <para>Be sure to start your json with '{'</para>
            </summary>
            <param name="rawJson"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.QueryDescriptor`1.QueryString(System.Action{Nest.QueryStringQueryDescriptor{`0}})">
            <summary>
            A query that uses a query parser in order to parse its content.
            </summary>
        </member>
        <member name="M:Nest.QueryDescriptor`1.SimpleQueryString(System.Action{Nest.SimpleQueryStringQueryDescriptor{`0}})">
            <summary>
            A query that uses the SimpleQueryParser to parse its context. 
            Unlike the regular query_string query, the simple_query_string query will 
            never throw an exception, and discards invalid parts of the query. 
            </summary>
        </member>
        <member name="M:Nest.QueryDescriptor`1.Terms(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            A query that match on any (configurable) of the provided terms. This is a simpler syntax query for using a bool query with several term queries in the should clauses.
            </summary>
        </member>
        <member name="M:Nest.QueryDescriptor`1.Terms``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            A query that match on any (configurable) of the provided terms. This is a simpler syntax query for using a bool query with several term queries in the should clauses.
            </summary>
        </member>
        <member name="M:Nest.QueryDescriptor`1.Terms(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            A query that match on any (configurable) of the provided terms. This is a simpler syntax query for using a bool query with several term queries in the should clauses.
            </summary>
        </member>
        <member name="M:Nest.QueryDescriptor`1.TermsDescriptor(System.Action{Nest.TermsQueryDescriptor{`0,System.Object}})">
            <summary>
            A query that match on any (configurable) of the provided terms. This is a simpler syntax query for using a bool query with several term queries in the should clauses.
            </summary>
        </member>
        <member name="M:Nest.QueryDescriptor`1.TermsDescriptor``1(System.Action{Nest.TermsQueryDescriptor{`0,``0}})">
            <summary>
            A query that match on any (configurable) of the provided terms. This is a simpler syntax query for using a bool query with several term queries in the should clauses.
            </summary>
        </member>
        <member name="M:Nest.QueryDescriptor`1.Fuzzy(System.Action{Nest.FuzzyQueryDescriptor{`0}})">
            <summary>
            A fuzzy based query that uses similarity based on Levenshtein (edit distance) algorithm.
            Warning: this query is not very scalable with its default prefix length of 0 – in this case,
            every term will be enumerated and cause an edit score calculation or max_expansions is not set.
            </summary>
        </member>
        <member name="M:Nest.QueryDescriptor`1.FuzzyNumeric(System.Action{Nest.FuzzyNumericQueryDescriptor{`0}})">
            <summary>
            fuzzy query on a numeric field will result in a range query “around” the value using the min_similarity value
            </summary>
        </member>
        <member name="M:Nest.QueryDescriptor`1.FuzzyDate(System.Action{Nest.FuzzyDateQueryDescriptor{`0}})">
            <summary>
            fuzzy query on a numeric field will result in a range query “around” the value using the min_similarity value
            </summary>
            <param name="selector"></param>
        </member>
        <member name="M:Nest.QueryDescriptor`1.Match(System.Action{Nest.MatchQueryDescriptor{`0}})">
            <summary>
            The default text query is of type boolean. It means that the text provided is analyzed and the analysis 
            process constructs a boolean query from the provided text.
            </summary>
        </member>
        <member name="M:Nest.QueryDescriptor`1.MatchPhrase(System.Action{Nest.MatchPhraseQueryDescriptor{`0}})">
            <summary>
            The text_phrase query analyzes the text and creates a phrase query out of the analyzed text. 
            </summary>
        </member>
        <member name="M:Nest.QueryDescriptor`1.MatchPhrasePrefix(System.Action{Nest.MatchPhrasePrefixQueryDescriptor{`0}})">
            <summary>
            The text_phrase_prefix is the same as text_phrase, expect it allows for prefix matches on the last term 
            in the text
            </summary>
        </member>
        <member name="M:Nest.QueryDescriptor`1.MultiMatch(System.Action{Nest.MultiMatchQueryDescriptor{`0}})">
            <summary>
            The multi_match query builds further on top of the match query by allowing multiple fields to be specified. 
            The idea here is to allow to more easily build a concise match type query over multiple fields instead of using a 
            relatively more expressive query by using multiple match queries within a bool query.
            </summary>
        </member>
        <member name="M:Nest.QueryDescriptor`1.Nested(System.Action{Nest.NestedQueryDescriptor{`0}})">
            <summary>
            Nested query allows to query nested objects / docs (see nested mapping). The query is executed against the 
            nested objects / docs as if they were indexed as separate docs (they are, internally) and resulting in the
            root parent doc (or parent nested mapping).
            </summary>
        </member>
        <member name="M:Nest.QueryDescriptor`1.Conditionless(System.Action{Nest.ConditionlessQueryDescriptor{`0}})">
            <summary>
            A thin wrapper allowing fined grained control what should happen if a query is conditionless
            if you need to fallback to something other than a match_all query
            </summary>
        </member>
        <member name="M:Nest.QueryDescriptor`1.Indices(System.Action{Nest.IndicesQueryDescriptor{`0}})">
            <summary>
            The indices query can be used when executed across multiple indices, allowing to have a query that executes
            only when executed on an index that matches a specific list of indices, and another query that executes 
            when it is executed on an index that does not match the listed indices.
            </summary>
        </member>
        <member name="M:Nest.QueryDescriptor`1.Range(System.Action{Nest.RangeQueryDescriptor{`0}})">
            <summary>
            Matches documents with fields that have terms within a certain range. The type of the Lucene query depends
            on the field type, for string fields, the TermRangeQuery, while for number/date fields, the query is
            a NumericRangeQuery
            </summary>
        </member>
        <member name="M:Nest.QueryDescriptor`1.FuzzyLikeThis(System.Action{Nest.FuzzyLikeThisQueryDescriptor{`0}})">
            <summary>
            Fuzzy like this query find documents that are “like” provided text by running it against one or more fields.
            </summary>
        </member>
        <member name="M:Nest.QueryDescriptor`1.MoreLikeThis(System.Action{Nest.MoreLikeThisQueryDescriptor{`0}})">
            <summary>
            More like this query find documents that are “like” provided text by running it against one or more fields.
            </summary>
        </member>
        <member name="M:Nest.QueryDescriptor`1.GeoShapeEnvelope(System.Action{Nest.GeoShapeEnvelopeQueryDescriptor{`0}})">
            <summary>
            The geo_shape Filter uses the same grid square representation as the geo_shape mapping to find documents 
            that have a shape that intersects with the envelope shape. 
            It will also use the same PrefixTree configuration as defined for the field mapping.
            </summary>
        </member>
        <member name="M:Nest.QueryDescriptor`1.GeoShapeCircle(System.Action{Nest.GeoShapeCircleQueryDescriptor{`0}})">
            <summary>
            The geo_shape Filter uses the same grid square representation as the geo_shape mapping to find documents 
            that have a shape that intersects with the circle shape. 
            It will also use the same PrefixTree configuration as defined for the field mapping.
            </summary>
        </member>
        <member name="M:Nest.QueryDescriptor`1.GeoShapeLineString(System.Action{Nest.GeoShapeLineStringQueryDescriptor{`0}})">
            <summary>
            The geo_shape Filter uses the same grid square representation as the geo_shape mapping to find documents 
            that have a shape that intersects with the line string shape. 
            It will also use the same PrefixTree configuration as defined for the field mapping.
            </summary>
        </member>
        <member name="M:Nest.QueryDescriptor`1.GeoShapeMultiLineString(System.Action{Nest.GeoShapeMultiLineStringQueryDescriptor{`0}})">
            <summary>
            The geo_shape circle Filter uses the same grid square representation as the geo_shape mapping to find documents 
            that have a shape that intersects with the multi line string shape. 
            It will also use the same PrefixTree configuration as defined for the field mapping.
            </summary>
        </member>
        <member name="M:Nest.QueryDescriptor`1.GeoShapePoint(System.Action{Nest.GeoShapePointQueryDescriptor{`0}})">
            <summary>
            The geo_shape circle Filter uses the same grid square representation as the geo_shape mapping to find documents 
            that have a shape that intersects with the point shape. 
            It will also use the same PrefixTree configuration as defined for the field mapping.
            </summary>
        </member>
        <member name="M:Nest.QueryDescriptor`1.GeoShapeMultiPoint(System.Action{Nest.GeoShapeMultiPointQueryDescriptor{`0}})">
            <summary>
            The geo_shape circle Filter uses the same grid square representation as the geo_shape mapping to find documents 
            that have a shape that intersects with the multi point shape. 
            It will also use the same PrefixTree configuration as defined for the field mapping.
            </summary>
        </member>
        <member name="M:Nest.QueryDescriptor`1.GeoShapePolygon(System.Action{Nest.GeoShapePolygonQueryDescriptor{`0}})">
            <summary>
            The geo_shape circle Filter uses the same grid square representation as the geo_shape mapping to find documents 
            that have a shape that intersects with the polygon shape. 
            It will also use the same PrefixTree configuration as defined for the field mapping.
            </summary>
        </member>
        <member name="M:Nest.QueryDescriptor`1.GeoShapeMultiPolygon(System.Action{Nest.GeoShapeMultiPolygonQueryDescriptor{`0}})">
            <summary>
            The geo_shape circle Filter uses the same grid square representation as the geo_shape mapping to find documents 
            that have a shape that intersects with the multi polygon shape. 
            It will also use the same PrefixTree configuration as defined for the field mapping.
            </summary>
        </member>
        <member name="M:Nest.QueryDescriptor`1.CommonTerms(System.Action{Nest.CommonTermsQueryDescriptor{`0}})">
            <summary>
            The common terms query is a modern alternative to stopwords which improves the precision and recall 
            of search results (by taking stopwords into account), without sacrificing performance.
            </summary>
        </member>
        <member name="M:Nest.QueryDescriptor`1.HasChild``1(System.Action{Nest.HasChildQueryDescriptor{``0}})">
            <summary>
            The has_child query works the same as the has_child filter, by automatically wrapping the filter with a 
            constant_score.
            </summary>
            <typeparam name="K">Type of the child</typeparam>
        </member>
        <member name="M:Nest.QueryDescriptor`1.HasParent``1(System.Action{Nest.HasParentQueryDescriptor{``0}})">
            <summary>
            The has_child query works the same as the has_child filter, by automatically wrapping the filter with a 
            constant_score.
            </summary>
            <typeparam name="K">Type of the child</typeparam>
        </member>
        <member name="M:Nest.QueryDescriptor`1.TopChildren``1(System.Action{Nest.TopChildrenQueryDescriptor{``0}})">
            <summary>
            The top_children query runs the child query with an estimated hits size, and out of the hit docs, aggregates 
            it into parent docs. If there aren’t enough parent docs matching the requested from/size search request, 
            then it is run again with a wider (more hits) search.
            </summary>
            <typeparam name="K">Type of the child</typeparam>
        </member>
        <member name="M:Nest.QueryDescriptor`1.Filtered(System.Action{Nest.FilteredQueryDescriptor{`0}})">
            <summary>
            A query that applies a filter to the results of another query. This query maps to Lucene FilteredQuery.
            </summary>
        </member>
        <member name="M:Nest.QueryDescriptor`1.Dismax(System.Action{Nest.DisMaxQueryDescriptor{`0}})">
            <summary>
            A query that generates the union of documents produced by its subqueries, and that scores each document 
            with the maximum score for that document as produced by any subquery, plus a tie breaking increment for 
            any additional matching subqueries.
            </summary>
        </member>
        <member name="M:Nest.QueryDescriptor`1.ConstantScore(System.Action{Nest.ConstantScoreQueryDescriptor{`0}})">
            <summary>
            A query that wraps a filter or another query and simply returns a constant score equal to the query boost 
            for every document in the filter. Maps to Lucene ConstantScoreQuery.
            </summary>
        </member>
        <member name="M:Nest.QueryDescriptor`1.CustomBoostFactor(System.Action{Nest.CustomBoostFactorQueryDescriptor{`0}})">
            <summary>
            custom_boost_factor query allows to wrap another query and multiply its score by the provided boost_factor.
            This can sometimes be desired since boost value set on specific queries gets normalized, while this 
            query boost factor does not.
            </summary>
        </member>
        <member name="M:Nest.QueryDescriptor`1.CustomScore(System.Action{Nest.CustomScoreQueryDescriptor{`0}})">
            <summary>
            custom_score query allows to wrap another query and customize the scoring of it optionally with a 
            computation derived from other field values in the doc (numeric ones) using script expression
            </summary>
        </member>
        <member name="M:Nest.QueryDescriptor`1.CustomFiltersScore(System.Action{Nest.CustomFiltersScoreQueryDescriptor{`0}})">
            <summary>
            custom_score query allows to wrap another query and customize the scoring of it optionally with a 
            computation derived from other field values in the doc (numeric ones) using script or boost expression
            </summary>
        </member>
        <member name="M:Nest.QueryDescriptor`1.Bool(System.Action{Nest.BoolQueryDescriptor{`0}})">
            <summary>
            A query that matches documents matching boolean combinations of other queries. The bool query maps to 
            Lucene BooleanQuery. 
            It is built using one or more boolean clauses, each clause with a typed occurrence
            </summary>
        </member>
        <member name="M:Nest.QueryDescriptor`1.Boosting(System.Action{Nest.BoostingQueryDescriptor{`0}})">
            <summary>
            the boosting query can be used to effectively demote results that match a given query. 
            Unlike the “NOT” clause in bool query, this still selects documents that contain
            undesirable terms, but reduces their overall score.
            </summary>
            <param name="boostingQuery"></param>
        </member>
        <member name="M:Nest.QueryDescriptor`1.MatchAll(System.Nullable{System.Double},System.String)">
            <summary>
            A query that matches all documents. Maps to Lucene MatchAllDocsQuery.
            </summary>
            <param name="Boost">An optional boost to associate with this match_all</param>
            <param name="NormField">
            When indexing, a boost value can either be associated on the document level, or per field. 
            The match all query does not take boosting into account by default. In order to take 
            boosting into account, the norms_field needs to be provided in order to explicitly specify which
            field the boosting will be done on (Note, this will result in slower execution time).
            </param>
        </member>
        <member name="M:Nest.QueryDescriptor`1.Term``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0,System.Nullable{System.Double})">
            <summary>
            Matches documents that have fields that contain a term (not analyzed). 
            The term query maps to Lucene TermQuery. 
            </summary>
        </member>
        <member name="M:Nest.QueryDescriptor`1.Term(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Object,System.Nullable{System.Double})">
            <summary>
            Matches documents that have fields that contain a term (not analyzed). 
            The term query maps to Lucene TermQuery. 
            </summary>
        </member>
        <member name="M:Nest.QueryDescriptor`1.Term(System.String,System.Object,System.Nullable{System.Double})">
            <summary>
            Matches documents that have fields that contain a term (not analyzed). 
            The term query maps to Lucene TermQuery. 
            </summary>
        </member>
        <member name="M:Nest.QueryDescriptor`1.Term(System.Action{Nest.TermQueryDescriptor{`0}})">
            <summary>
            Matches documents that have fields that contain a term (not analyzed). 
            The term query maps to Lucene TermQuery. 
            </summary>
        </member>
        <member name="M:Nest.QueryDescriptor`1.Wildcard(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String,System.Nullable{System.Double},System.Nullable{Nest.RewriteMultiTerm})">
            <summary>
            Matches documents that have fields matching a wildcard expression (not analyzed). 
            Supported wildcards are *, which matches any character sequence (including the empty one), and ?, 
            which matches any single character. Note this query can be slow, as it needs to iterate 
            over many terms. In order to prevent extremely slow wildcard queries, a wildcard term should 
            not start with one of the wildcards * or ?. The wildcard query maps to Lucene WildcardQuery.
            </summary>
        </member>
        <member name="M:Nest.QueryDescriptor`1.Wildcard(System.String,System.String,System.Nullable{System.Double},System.Nullable{Nest.RewriteMultiTerm})">
            <summary>
            Matches documents that have fields matching a wildcard expression (not analyzed). 
            Supported wildcards are *, which matches any character sequence (including the empty one), and ?,
            which matches any single character. Note this query can be slow, as it needs to iterate over many terms. 
            In order to prevent extremely slow wildcard queries, a wildcard term should not start with 
            one of the wildcards * or ?. The wildcard query maps to Lucene WildcardQuery.
            </summary>
        </member>
        <member name="M:Nest.QueryDescriptor`1.Wildcard(System.Action{Nest.WildcardQueryDescriptor{`0}})">
            <summary>
            Matches documents that have fields matching a wildcard expression (not analyzed). 
            Supported wildcards are *, which matches any character sequence (including the empty one), and ?,
            which matches any single character. Note this query can be slow, as it needs to iterate over many terms. 
            In order to prevent extremely slow wildcard queries, a wildcard term should not start with 
            one of the wildcards * or ?. The wildcard query maps to Lucene WildcardQuery.
            </summary>
        </member>
        <member name="M:Nest.QueryDescriptor`1.Prefix(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String,System.Nullable{System.Double},System.Nullable{Nest.RewriteMultiTerm})">
            <summary>
            Matches documents that have fields containing terms with a specified prefix (not analyzed). 
            The prefix query maps to Lucene PrefixQuery. 
            </summary>
        </member>
        <member name="M:Nest.QueryDescriptor`1.Prefix(System.String,System.String,System.Nullable{System.Double},System.Nullable{Nest.RewriteMultiTerm})">
            <summary>
            Matches documents that have fields containing terms with a specified prefix (not analyzed). 
            The prefix query maps to Lucene PrefixQuery. 
            </summary>	
        </member>
        <member name="M:Nest.QueryDescriptor`1.Prefix(System.Action{Nest.PrefixQueryDescriptor{`0}})">
            <summary>
            Matches documents that have fields containing terms with a specified prefix (not analyzed). 
            The prefix query maps to Lucene PrefixQuery. 
            </summary>	
        </member>
        <member name="M:Nest.QueryDescriptor`1.Ids(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Filters documents that only have the provided ids. Note, this filter does not require 
            the _id field to be indexed since it works using the _uid field.
            </summary>
        </member>
        <member name="M:Nest.QueryDescriptor`1.Ids(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Filters documents that only have the provided ids. 
            Note, this filter does not require the _id field to be indexed since
            it works using the _uid field.
            </summary>
        </member>
        <member name="M:Nest.QueryDescriptor`1.Ids(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Filters documents that only have the provided ids. 
            Note, this filter does not require the _id field to be indexed since 
            it works using the _uid field.
            </summary>
        </member>
        <member name="M:Nest.QueryDescriptor`1.SpanTerm(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String,System.Nullable{System.Double})">
            <summary>
            Matches spans containing a term. The span term query maps to Lucene SpanTermQuery. 
            </summary>
        </member>
        <member name="M:Nest.QueryDescriptor`1.SpanTerm(System.String,System.String,System.Nullable{System.Double})">
            <summary>
            Matches spans containing a term. The span term query maps to Lucene SpanTermQuery. 
            </summary>
        </member>
        <member name="M:Nest.QueryDescriptor`1.SpanTerm(System.Action{Nest.SpanTermQueryDescriptor{`0}})">
            <summary>
            Matches spans containing a term. The span term query maps to Lucene SpanTermQuery. 
            </summary>
        </member>
        <member name="M:Nest.QueryDescriptor`1.SpanFirst(System.Action{Nest.SpanFirstQueryDescriptor{`0}})">
            <summary>
            Matches spans near the beginning of a field. The span first query maps to Lucene SpanFirstQuery. 
            </summary>
        </member>
        <member name="M:Nest.QueryDescriptor`1.SpanNear(System.Action{Nest.SpanNearQueryDescriptor{`0}})">
            <summary>
            Matches spans which are near one another. One can specify slop, the maximum number of 
            intervening unmatched positions, as well as whether matches are required to be in-order.
            The span near query maps to Lucene SpanNearQuery.
            </summary>
        </member>
        <member name="M:Nest.QueryDescriptor`1.SpanOr(System.Action{Nest.SpanOrQueryDescriptor{`0}})">
            <summary>
            Matches the union of its span clauses. 
            The span or query maps to Lucene SpanOrQuery. 
            </summary>
        </member>
        <member name="M:Nest.QueryDescriptor`1.SpanNot(System.Action{Nest.SpanNotQuery{`0}})">
            <summary>
            Removes matches which overlap with another span query. 
            The span not query maps to Lucene SpanNotQuery.
            </summary>
        </member>
        <member name="M:Nest.QueryDescriptor`1.Regexp(System.Action{Nest.RegexpQueryDescriptor{`0}})">
            <summary>
            custom_score query allows to wrap another query and customize the scoring of it optionally with a 
            computation derived from other field values in the doc (numeric ones) using script or boost expression
            </summary>
        </member>
        <member name="M:Nest.QueryDescriptor`1.FunctionScore(System.Action{Nest.FunctionScoreQueryDescriptor{`0}})">
            <summary>
            Function score query
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nest.SearchPathInfo.CloseOverAutomagicCovariantResultSelector(Nest.ElasticInferrer,Nest.ISearchRequest)">
            <summary>
            Based on the type information present in this descriptor create method that takes
            the returned _source and hit and returns the ClrType it should deserialize too.
            This is so that Documents[A] can contain actual instances of subclasses B, C as well.
            If you specify types using .Types(typeof(B), typeof(C)) then NEST can automagically
            create a TypeSelector based on the hits _type property.
            </summary>
        </member>
        <member name="P:Nest.ElasticPropertyAttribute.NumericType">
            <summary>
            Defaults to float so be sure to set this correctly!
            </summary>
        </member>
        <member name="P:Nest.ElasticPropertyAttribute.DateFormat">
            <summary>
            http://www.elasticsearch.org/guide/reference/mapping/date-format.html
            </summary>
        </member>
        <member name="T:Nest.GenericMapping">
            <summary>
            Sometimes you need a generic type mapping, i.e when using dynamic templates 
            in order to specify "{dynamic_template}" the type, or if you have some plugin that exposes a new type.
            </summary>
        </member>
        <member name="P:Nest.GenericMapping.IndexName">
            <summary>
            The name of the field that will be stored in the index. Defaults to the property/field name.
            </summary>
        </member>
        <member name="P:Nest.ISearchResponse`1.Documents">
            <summary>
            Returns a view on the documents inside the hits that are returned. 
            <para>NOTE: if you use Fields() on the search descriptor .Documents will be empty use 
            .Fields instead or try the 'source filtering' feature introduced in Elasticsearch 1.0 
            using .Source() on the search descriptor to get Documents of type T with only certain parts selected
            </para>
            </summary>
        </member>
        <member name="P:Nest.ISearchResponse`1.FieldSelections">
            <summary>
            Will return the field selections inside the hits when the search descriptor specified .Fields.
            Otherwise this will always be an empty collection.
            </summary>
        </member>
        <member name="P:Nest.SearchResponse`1.ScrollId">
            <summary>
            Only set when search type = scan and scroll specified
            </summary>
        </member>
        <member name="P:Nest.SearchResponse`1.Documents">
            <inheritdoc />
        </member>
        <member name="P:Nest.SearchResponse`1.FieldSelections">
            <inheritdoc />
        </member>
        <member name="P:Nest.SearchResponse`1.Highlights">
            <summary>
            IDictionary of id -Highlight Collection for the document
            </summary>
        </member>
        <member name="T:Nest.CustomAnalyzer">
            <summary>
            An analyzer of type custom that allows to combine a Tokenizer with zero or more Token Filters, and zero or more Char Filters. 
            <para>The custom analyzer accepts a logical/registered name of the tokenizer to use, and a list of logical/registered names of token filters.</para>
            </summary>
        </member>
        <member name="T:Nest.IndexSettings">
            <summary>
            Writing these uses a custom converter that ignores the json props
            </summary>
        </member>
        <member name="P:Nest.IndexSettings.AsExpando">
            <summary>
            Dynamic view of the settings object, useful for reading value from the settings
            as it allows you to chain without nullrefs. Cannot be used to assign setting values though
            </summary>
        </member>
        <member name="T:Nest.SnowballAnalyzer">
            <summary>
            An analyzer of type snowball that uses the standard tokenizer, with standard filter, lowercase filter, stop filter, and snowball filter.
            <para> The Snowball Analyzer is a stemming analyzer from Lucene that is originally based on the snowball project from snowball.tartarus.org.</para>
            </summary>
        </member>
        <member name="T:Nest.FieldNameQueryConverter`1">
            <summary>
            JSON converter for IDictionary that ignores the contract resolver (e.g. CamelCasePropertyNamesContractResolver)
            when converting dictionary keys to property names.
            </summary>
        </member>
        <member name="T:Nest.DictionaryKeysAreNotPropertyNamesJsonConverter">
            <summary>
            JSON converter for IDictionary that ignores the contract resolver (e.g. CamelCasePropertyNamesContractResolver)
            when converting dictionary keys to property names.
            </summary>
        </member>
        <member name="T:Nest.UriJsonConverter">
            <summary>
            Converter for converting Uri to String and vica versa
            </summary>
            <remarks>
            Code originated from http://stackoverflow.com/a/8087049/106909
            </remarks>
        </member>
        <member name="M:Nest.UriJsonConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.UriJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader"></param>
            <param name="objectType"></param>
            <param name="existingValue"></param>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.UriJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="serializer"></param>
        </member>
        <member name="T:Nest.ShingleTokenFilter">
            <summary>
            A token filter of type shingle that constructs shingles (token n-grams) from a token stream. 
            <para>In other words, it creates combinations of tokens as a single token. </para>
            </summary>
        </member>
        <member name="P:Nest.ShingleTokenFilter.MinShingleSize">
            <summary>
            The minimum shingle size. Defaults to 2.
            </summary>
        </member>
        <member name="P:Nest.ShingleTokenFilter.MaxShingleSize">
            <summary>
            The maximum shingle size. Defaults to 2.
            </summary>
        </member>
        <member name="P:Nest.ShingleTokenFilter.OutputUnigrams">
            <summary>
            If true the output will contain the input tokens (unigrams) as well as the shingles. Defaults to true.
            </summary>
        </member>
        <member name="P:Nest.ShingleTokenFilter.OutputUnigramsIfNoShingles">
            <summary>
            If output_unigrams is false the output will contain the input tokens (unigrams) if no shingles are available. 
            <para>Note if output_unigrams is set to true this setting has no effect. Defaults to false.</para>
            </summary>
        </member>
        <member name="P:Nest.ShingleTokenFilter.TokenSeparator">
            <summary>
            The string to use when joining adjacent tokens to form a shingle. Defaults to " ".
            </summary>
        </member>
        <member name="T:Nest.Resolvers.ExpressionVisitor">
            <summary>
            This comes from Matt Warren's sample:
            http://blogs.msdn.com/mattwar/archive/2007/07/31/linq-building-an-iqueryable-provider-part-ii.aspx
            </summary>
        </member>
        <member name="T:Nest.Resolvers.Inflector">
            <summary>
            Pluralizes or singularizes words.
            </summary>
        </member>
        <member name="M:Nest.Resolvers.Inflector.#cctor">
            <summary>
            Initializes the <see cref="T:Nest.Resolvers.Inflector"/> class.
            </summary>
        </member>
        <member name="M:Nest.Resolvers.Inflector.AddIrregularRule(System.String,System.String)">
            <summary>
            Adds the irregular rule.
            </summary>
            <param name="singular">The singular.</param>
            <param name="plural">The plural.</param>
        </member>
        <member name="M:Nest.Resolvers.Inflector.AddUnknownCountRule(System.String)">
            <summary>
            Adds the unknown count rule.
            </summary>
            <param name="word">The word.</param>
        </member>
        <member name="M:Nest.Resolvers.Inflector.AddPluralRule(System.String,System.String)">
            <summary>
            Adds the plural rule.
            </summary>
            <param name="rule">The rule.</param>
            <param name="replacement">The replacement.</param>
        </member>
        <member name="M:Nest.Resolvers.Inflector.AddSingularRule(System.String,System.String)">
            <summary>
            Adds the singular rule.
            </summary>
            <param name="rule">The rule.</param>
            <param name="replacement">The replacement.</param>
        </member>
        <member name="M:Nest.Resolvers.Inflector.MakePlural(System.String)">
            <summary>
            Makes the plural.
            </summary>
            <param name="word">The word.</param>
            <returns></returns>
        </member>
        <member name="M:Nest.Resolvers.Inflector.MakeSingular(System.String)">
            <summary>
            Makes the singular.
            </summary>
            <param name="word">The word.</param>
            <returns></returns>
        </member>
        <member name="M:Nest.Resolvers.Inflector.ApplyRules(System.Collections.Generic.IList{Nest.Resolvers.Inflector.InflectorRule},System.String)">
            <summary>
            Applies the rules.
            </summary>
            <param name="rules">The rules.</param>
            <param name="word">The word.</param>
            <returns></returns>
        </member>
        <member name="T:Nest.Resolvers.Inflector.InflectorRule">
            <summary>
            Summary for the InflectorRule class
            </summary>
        </member>
        <member name="M:Nest.Resolvers.Inflector.InflectorRule.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nest.Resolvers.Inflector.InflectorRule"/> class.
            </summary>
            <param name="regexPattern">The regex pattern.</param>
            <param name="replacementText">The replacement text.</param>
        </member>
        <member name="M:Nest.Resolvers.Inflector.InflectorRule.Apply(System.String)">
            <summary>
            Applies the tule to the specified word.
            </summary>
            <param name="word">The word.</param>
            <returns></returns>
        </member>
        <member name="P:Nest.Resolvers.ElasticContractResolver.ConnectionSettings">
            <summary>
            ConnectionSettings can be requested by JsonConverter's.
            </summary>
        </member>
        <member name="T:Nest.FieldType">
            <summary>
            Define the type of field content.
            </summary>
        </member>
        <member name="F:Nest.FieldType.None">
            <summary>
            Default. Will be defined by the type of property return.
            </summary>
        </member>
        <member name="F:Nest.FieldType.GeoPoint">
            <summary>
            Geo based points.
            </summary>
        </member>
        <member name="F:Nest.FieldType.GeoShape">
            <summary>
            Geo shape type.
            </summary>
        </member>
        <member name="F:Nest.FieldType.Attachment">
            <summary>
            The attachment type allows to index different “attachment” type field (encoded as base64), for example, microsoft office formats, open document formats, ePub, HTML...
            </summary>
        </member>
        <member name="F:Nest.FieldType.Ip">
            <summary>
            An ip mapping type allows to store ipv4 addresses in a numeric form allowing to easily sort, and range query it (using ip values).
            </summary>
        </member>
        <member name="F:Nest.FieldType.Binary">
            <summary>
            The binary type is a base64 representation of binary data that can be stored in the index.
            </summary>
        </member>
        <member name="F:Nest.FieldType.String">
            <summary>
            Text based string type.
            </summary>
        </member>
        <member name="F:Nest.FieldType.Integer">
            <summary>
            Integer type.
            </summary>
        </member>
        <member name="F:Nest.FieldType.Long">
            <summary>
            Long type.
            </summary>
        </member>
        <member name="F:Nest.FieldType.Float">
            <summary>
            Float type.
            </summary>
        </member>
        <member name="F:Nest.FieldType.Double">
            <summary>
            Double type.
            </summary>
        </member>
        <member name="F:Nest.FieldType.Date">
            <summary>
            Date type.
            </summary>
        </member>
        <member name="F:Nest.FieldType.Boolean">
            <summary>
            Boolean type.
            </summary>
        </member>
        <member name="F:Nest.FieldType.Completion">
            <summary>
            Completion type.
            </summary>
        </member>
        <member name="F:Nest.FieldType.Nested">
            <summary>
            Nested type.
            </summary>
        </member>
        <member name="F:Nest.FieldType.Object">
            <summary>
            object type, no need to set this manually if its not a value type this will be set.
            Only set this if you need to force a value type to be mapped to an elasticsearch object type.
            </summary>
        </member>
        <member name="P:Nest.Resolvers.SettingsContractResolver.ConnectionSettings">
            <summary>
            ConnectionSettings can be requested by JsonConverter's.
            </summary>
        </member>
        <member name="P:Nest.Resolvers.SettingsContractResolver.PiggyBackState">
            <summary>
            Signals to custom converter that it can get serialization state from one of the converters
            Ugly but massive performance gain
            </summary>
        </member>
        <member name="M:Nest.Resolvers.Writers.TypeMappingWriter.#ctor(System.Type,System.String,Nest.IConnectionSettingsValues,System.Int32,System.Collections.Concurrent.ConcurrentDictionary{System.Type,System.Int32})">
            <summary>
            internal constructor by TypeMappingWriter itself when it recurses, passes seenTypes as safeguard agains maxRecursion
            </summary>
        </member>
        <member name="M:Nest.Resolvers.Writers.TypeMappingWriter.GetElasticSearchType(Nest.IElasticPropertyAttribute,System.Reflection.PropertyInfo)">
            <summary>
            Get the Elastic Search Field Type Related.
            </summary>
            <param name="att">ElasticPropertyAttribute</param>
            <param name="p">Property Field</param>
            <returns>String with the type name or null if can not be inferres</returns>
        </member>
        <member name="M:Nest.Resolvers.Writers.TypeMappingWriter.GetElasticSearchTypeFromFieldType(System.Nullable{Nest.FieldType})">
            <summary>
            Get the Elastic Search Field from a FieldType.
            </summary>
            <param name="fieldType">FieldType</param>
            <returns>String with the type name or null if can not be inferres</returns>
        </member>
        <member name="M:Nest.Resolvers.Writers.TypeMappingWriter.GetFieldTypeFromType(System.Type)">
            <summary>
            Inferes the FieldType from the type of the property.
            </summary>
            <param name="propertyType">Type of the property</param>
            <returns>FieldType or null if can not be inferred</returns>
        </member>
        <member name="T:Nest.StandardAnalyzer">
            <summary>
            An analyzer of type standard that is built of using Standard Tokenizer, with Standard Token Filter, Lower Case Token Filter, and Stop Token Filter.
            </summary>
        </member>
        <member name="P:Nest.StandardAnalyzer.StopWords">
            <summary>
            A list of stopword to initialize the stop filter with. Defaults to the english stop words.
            </summary>
        </member>
        <member name="P:Nest.StandardAnalyzer.MaxTokenLength">
            <summary>
            The maximum token length. If a token is seen that exceeds this length then it is discarded. Defaults to 255.
            </summary>
        </member>
        <member name="T:Nest.StopTokenFilter">
            <summary>
            A token filter of type stop that removes stop words from token streams.
            </summary>
        </member>
        <member name="T:Nest.WordDelimiterTokenFilter">
            <summary>
            Named word_delimiter, it Splits words into subwords and performs optional transformations on subword groups.
            </summary>
        </member>
    </members>
</doc>
