<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Elasticsearch.Net</name>
    </assembly>
    <members>
        <member name="P:Elasticsearch.Net.Connection.Configuration.IRequestConfiguration.RequestTimeout">
            <summary>
            The timeout for this specific request, takes precedence over the global timeout settings
            </summary>
        </member>
        <member name="P:Elasticsearch.Net.Connection.Configuration.IRequestConfiguration.ConnectTimeout">
            <summary>
            The connect timeout for this specific request
            </summary>
        </member>
        <member name="P:Elasticsearch.Net.Connection.Configuration.IRequestConfiguration.ContentType">
            <summary>
            Force a difference content type header on the request
            </summary>
        </member>
        <member name="P:Elasticsearch.Net.Connection.Configuration.IRequestConfiguration.MaxRetries">
            <summary>
            This will override whatever is set on the connection configuration or whatever default the connectionpool has.
            </summary>
        </member>
        <member name="P:Elasticsearch.Net.Connection.Configuration.IRequestConfiguration.ForceNode">
            <summary>
            This will force the operation on the specified node, this will bypass any configured connection pool and will no retry.
            </summary>
        </member>
        <member name="P:Elasticsearch.Net.Connection.Configuration.IRequestConfiguration.DisableSniff">
            <summary>
            Forces no sniffing to occur on the request no matter what configuration is in place 
            globally
            </summary>
        </member>
        <member name="P:Elasticsearch.Net.Connection.Configuration.IRequestConfiguration.DisablePing">
            <summary>
            Under no circumstance do a ping before the actual call. If a node was previously dead a small ping with 
            low connect timeout will be tried first in normal circumstances
            </summary>
        </member>
        <member name="P:Elasticsearch.Net.Connection.Configuration.IRequestConfiguration.AllowedStatusCodes">
            <summary>
            Treat the folowing statuses (on top of the 200 range) NOT as error.
            </summary>
        </member>
        <member name="P:Elasticsearch.Net.IRequestParameters.QueryString">
            <summary>
            The querystring that should be appended to the path of the request
            </summary>
        </member>
        <member name="P:Elasticsearch.Net.IRequestParameters.DeserializationState">
            <summary>
            A method that can be set on the request to take ownership of creating the response object.
            When set this will be called instead of the internal .Deserialize();
            </summary>
        </member>
        <member name="P:Elasticsearch.Net.IRequestParameters.RequestConfiguration">
            <summary>
            Configuration for this specific request, i.e disable sniffing, custom timeouts etcetera.
            </summary>
        </member>
        <member name="P:Elasticsearch.Net.IElasticsearchResponse.Success">
            <summary>
            The response status code is in the 200 range or is in the allowed list of status codes set on the request.
            </summary>
        </member>
        <member name="P:Elasticsearch.Net.IElasticsearchResponse.Settings">
            <summary>
            The request settings used by the request responsible for this response
            </summary>
        </member>
        <member name="P:Elasticsearch.Net.IElasticsearchResponse.OriginalException">
            <summary>
            If Success is false this will hold the original exception.
            Can be a CLR exception or a mapped server side exception (ElasticsearchServerException)
            </summary>
        </member>
        <member name="P:Elasticsearch.Net.IElasticsearchResponse.RequestMethod">
            <summary>
            The HTTP method used by the request
            </summary>
        </member>
        <member name="P:Elasticsearch.Net.IElasticsearchResponse.RequestUrl">
            <summary>
            The url as requested 
            </summary>
        </member>
        <member name="P:Elasticsearch.Net.IElasticsearchResponse.HttpStatusCode">
            <summary>
            The status code as returned by Elasticsearch 
            </summary>
        </member>
        <member name="P:Elasticsearch.Net.IElasticsearchResponse.NumberOfRetries">
            <summary>
            The number of times to request had to be retried before succeeding on a live node
            </summary>
        </member>
        <member name="P:Elasticsearch.Net.IElasticsearchResponse.Metrics">
            <summary>
            Returns timing and stats metric about the current API method invocation. 
            </summary>
        </member>
        <member name="P:Elasticsearch.Net.IElasticsearchResponse.ResponseRaw">
            <summary>
            The raw byte response, only set when IncludeRawResponse() is set on Connection configuration
            </summary>
        </member>
        <member name="T:Elasticsearch.Net.IHideObjectMembers">
            <summary>
            Helper interface used to hide the base <see cref="T:System.Object"/>  members from the fluent API to make it much cleaner 
            in Visual Studio intellisense.
            </summary>
            <remarks>Created by Daniel Cazzulino http://www.clariusconsulting.net/blogs/kzu/archive/2008/03/10/58301.aspx</remarks>
        </member>
        <member name="M:Elasticsearch.Net.IHideObjectMembers.Equals(System.Object)">
            <summary>
            Hides the <see cref="M:Elasticsearch.Net.IHideObjectMembers.Equals(System.Object)"/> method.
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.IHideObjectMembers.GetHashCode">
            <summary>
            Hides the <see cref="M:Elasticsearch.Net.IHideObjectMembers.GetHashCode"/> method.
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.IHideObjectMembers.GetType">
            <summary>
            Hides the <see cref="M:Elasticsearch.Net.IHideObjectMembers.GetType"/> method.
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.IHideObjectMembers.ToString">
            <summary>
            Hides the <see cref="M:Elasticsearch.Net.IHideObjectMembers.ToString"/> method.
            </summary>
        </member>
        <member name="T:Elasticsearch.Net.Connection.ConnectionConfiguration">
            <summary>
            ConnectionConfiguration allows you to control how ElasticsearchClient behaves and where/how it connects 
            to elasticsearch
            </summary>
        </member>
        <member name="P:Elasticsearch.Net.Connection.IConnectionConfigurationValues.ThrowOnElasticsearchServerExceptions">
            <summary>
            Instead of following a c/go like error checking on response.IsValid always throw an ElasticsearchServerException
            on the client when a call resulted in an exception on the elasticsearch server. 
            <para>Reasons for such exceptions could be search parser errors, index missing exceptions</para>
            </summary>
        </member>
        <member name="P:Elasticsearch.Net.Connection.IConnectionConfigurationValues.SniffsOnStartup">
            <summary>
            Sniff the cluster state immediatly on startup
            </summary>
        </member>
        <member name="P:Elasticsearch.Net.Connection.IConnectionConfigurationValues.SniffsOnConnectionFault">
            <summary>
            Force a new sniff for the cluster state everytime a connection dies
            </summary>
        </member>
        <member name="P:Elasticsearch.Net.Connection.IConnectionConfigurationValues.SniffInformationLifeSpan">
            <summary>
            Force a new sniff for the cluster when the cluster state information is older than
            the specified timespan
            </summary>
        </member>
        <member name="P:Elasticsearch.Net.Connection.IConnectionConfigurationValues.QueryStringParameters">
            <summary>
            Append these query string parameters automatically to every request
            </summary>
        </member>
        <member name="P:Elasticsearch.Net.Connection.IConnectionConfigurationValues.ConnectionStatusHandler">
            <summary>
            Connection status handler that will be called everytime the connection receives anything.
            </summary>
        </member>
        <member name="P:Elasticsearch.Net.Connection.IConnectionConfigurationValues.Serializer">
            <summary>
            
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.Connection.ConnectionConfiguration`1.EnableCompressedResponses(System.Boolean)">
            <summary>
            Enable compressed responses from elasticsearch (NOTE that that nodes need to be configured to allow this)
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/modules-http.html
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.Connection.ConnectionConfiguration`1.EnableTrace(System.Boolean)">
            <summary>
            Enable Trace signals to the IConnection that it should put debug information on the Trace.
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.Connection.ConnectionConfiguration`1.EnableMetrics(System.Boolean)">
            <summary>
            By enabling metrics more metadata is returned per API call about requests (ping, sniff, failover) and general stats
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.Connection.ConnectionConfiguration`1.ThrowOnElasticsearchServerExceptions(System.Boolean)">
            <summary>
            Instead of following a c/go like error checking on response.IsValid always throw an ElasticsearchServerException
            on the client when a call resulted in an exception on the elasticsearch server. 
            <para>Reasons for such exceptions could be search parser errors, index missing exceptions</para>
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.Connection.ConnectionConfiguration`1.DisablePing(System.Boolean)">
            <summary>
            When a node is used for the very first time or when it's used for the first time after it has been marked dead
            a ping with a very low timeout is send to the node to make sure that when it's still dead it reports it as fast as possible.
            You can disable these pings globally here if you rather have it fail on the possible slower original request
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.Connection.ConnectionConfiguration`1.SetGlobalQueryStringParameters(System.Collections.Specialized.NameValueCollection)">
            <summary>
            This NameValueCollection will be appended to every url NEST calls, great if you need to pass i.e an API key.
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.Connection.ConnectionConfiguration`1.SetTimeout(System.Int32)">
            <summary>
            Timeout in milliseconds when the .NET webrequest should abort the request, note that you can set this to a high value here,
            and specify the timeout in various calls on Elasticsearch's side.
            </summary>
            <param name="timeout">time out in milliseconds</param>
        </member>
        <member name="M:Elasticsearch.Net.Connection.ConnectionConfiguration`1.SetPingTimeout(System.Int32)">
            <summary>
            This is a separate timeout for Ping() requests. A ping should fail as fast as possible.
            </summary>
            <param name="timeout">The ping timeout in milliseconds defaults to 50</param>
        </member>
        <member name="M:Elasticsearch.Net.Connection.ConnectionConfiguration`1.SetDeadTimeout(System.Int32)">
            <summary>
            Sets the default dead timeout factor when a node has been marked dead.
            </summary>
            <remarks>Some connection pools may use a flat timeout whilst others take this factor and increase it exponentially</remarks>
            <param name="timeout"></param>
        </member>
        <member name="M:Elasticsearch.Net.Connection.ConnectionConfiguration`1.SetMaxDeadTimeout(System.Int32)">
            <summary>
            Sets the maximum time a node can be marked dead. 
            Different implementations of IConnectionPool may choose a different default.
            </summary>
            <param name="timeout">The timeout in milliseconds</param>
        </member>
        <member name="M:Elasticsearch.Net.Connection.ConnectionConfiguration`1.SetMaximumAsyncConnections(System.Int32)">
            <summary>
            Semaphore asynchronous connections automatically by giving
            it a maximum concurrent connections. 
            </summary>
            <param name="maximum">defaults to 0 (unbounded)</param>
        </member>
        <member name="M:Elasticsearch.Net.Connection.ConnectionConfiguration`1.SetProxy(System.Uri,System.String,System.String)">
            <summary>
            If your connection has to go through proxy use this method to specify the proxy url
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.Connection.ConnectionConfiguration`1.UsePrettyResponses(System.Boolean)">
            <summary>
            Append ?pretty=true to requests, this helps to debug send and received json.
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.Connection.ConnectionConfiguration`1.ExposeRawResponse(System.Boolean)">
            <summary>
            Make sure the reponse bytes are always available on the ElasticsearchResponse object
            <para>Note: that depending on the registered serializer this may cause the respond to be read in memory first</para>
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.Connection.ConnectionConfiguration`1.SetConnectionStatusHandler(System.Action{Elasticsearch.Net.IElasticsearchResponse})">
            <summary>
            Global callback for every response that NEST receives, useful for custom logging.
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.Connection.IConnectionConfiguration`1.EnableCompressedResponses(System.Boolean)">
            <summary>
            Enable compressed responses from elasticsearch (NOTE that that nodes need to be configured to allow this)
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/modules-http.html
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.Connection.IConnectionConfiguration`1.EnableTrace(System.Boolean)">
            <summary>
            Enable Trace signals to the IConnection that it should put debug information on the Trace.
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.Connection.IConnectionConfiguration`1.SetGlobalQueryStringParameters(System.Collections.Specialized.NameValueCollection)">
            <summary>
            This NameValueCollection will be appended to every url NEST calls, great if you need to pass i.e an API key.
            </summary>
            <param name="queryStringParameters"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Elasticsearch.Net.Connection.IConnectionConfiguration`1.SetTimeout(System.Int32)" -->
        <member name="M:Elasticsearch.Net.Connection.IConnectionConfiguration`1.SetProxy(System.Uri,System.String,System.String)">
            <summary>
            If your connection has to go through proxy use this method to specify the proxy url
            </summary>
            <returns></returns>
        </member>
        <member name="M:Elasticsearch.Net.Connection.IConnectionConfiguration`1.UsePrettyResponses(System.Boolean)">
            <summary>
            Append ?pretty=true to requests, this helps to debug send and received json.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Elasticsearch.Net.Connection.IConnectionConfiguration`1.ExposeRawResponse(System.Boolean)">
            <summary>
            Make sure the reponse bytes are always available on the ElasticsearchResponse object
            <para>Note: that depending on the registered serializer this may cause the respond to be read in memory first</para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Elasticsearch.Net.Connection.IConnectionConfiguration`1.SetMaximumAsyncConnections(System.Int32)">
            <summary>
            Semaphore asynchronous connections automatically by giving
            it a maximum concurrent connections. Great to prevent 
            out of memory exceptions
            </summary>
            <param name="maximum">defaults to 20</param>
            <returns></returns>
        </member>
        <member name="M:Elasticsearch.Net.Connection.IConnectionConfiguration`1.SetConnectionStatusHandler(System.Action{Elasticsearch.Net.IElasticsearchResponse})">
            <summary>
            Global callback for every response that NEST receives, useful for custom logging.
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.Connection.ConnectionConfiguration.#ctor(System.Uri)">
            <summary>
            ConnectionConfiguration allows you to control how ElasticsearchClient behaves and where/how it connects 
            to elasticsearch
            </summary>
            <param name="uri">The root of the elasticsearch node we want to connect to. Defaults to http://localhost:9200</param>
        </member>
        <member name="M:Elasticsearch.Net.Connection.ConnectionConfiguration.#ctor(Elasticsearch.Net.ConnectionPool.IConnectionPool)">
            <summary>
            ConnectionConfiguration allows you to control how ElasticsearchClient behaves and where/how it connects 
            to elasticsearch
            </summary>
            <param name="connectionPool">A connection pool implementation that'll tell the client what nodes are available</param>
        </member>
        <member name="M:Elasticsearch.Net.ConnectionPool.IConnectionPool.GetNext(System.Nullable{System.Int32},System.Int32@,System.Boolean@)">
            <summary>
            Gets the next live Uri to perform the request on
            </summary>
            <param name="initialSeed">pass the original seed when retrying, this guarantees that the nodes are walked in a
             predictable manner even when called in a multithreaded context</param>
            <param name="seed">The seed this call started on</param>
            <returns></returns>
        </member>
        <member name="M:Elasticsearch.Net.ConnectionPool.IConnectionPool.MarkDead(System.Uri,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Mark the specified Uri as dead
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.ConnectionPool.IConnectionPool.MarkAlive(System.Uri)">
            <summary>
            Bring the specified uri back to life.
            </summary>
            <param name="uri"></param>
        </member>
        <member name="M:Elasticsearch.Net.ConnectionPool.IConnectionPool.UpdateNodeList(System.Collections.Generic.IList{System.Uri},System.Uri)">
            <summary>
            Update the node list manually, usually done by ITransport when sniffing was needed.
            </summary>
            <param name="newClusterState"></param>
            <param name="sniffNode">hint that the node we recieved the sniff from should not be pinged</param>
        </member>
        <member name="P:Elasticsearch.Net.ConnectionPool.IConnectionPool.MaxRetries">
            <summary>
            Returns the default maximum retries for the connection pool implementation.
            Most implementation default to number of nodes, note that this can be overidden
            in the connection settings
            </summary>
        </member>
        <member name="P:Elasticsearch.Net.ConnectionPool.IConnectionPool.AcceptsUpdates">
            <summary>
            Signals that this implemenation can accept new nodes
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.Connection.Transport.GetMaximumRetries(Elasticsearch.Net.Connection.Configuration.IRequestConfiguration)">
            <summary>
            Returns either the fixed maximum set on the connection configuration settings or the number of nodes
            </summary>
            <param name="requestState"></param>
        </member>
        <member name="M:Elasticsearch.Net.Connection.Transport.SelectNextNode(Elasticsearch.Net.Connection.RequestState.ITransportRequestState)">
            <summary>
            Selects next node uri on request state
            </summary>
            <returns>bool hint whether the new current node needs to pinged first</returns>
        </member>
        <member name="P:Elasticsearch.Net.ElasticsearchResponse`1.ServerError">
            <summary>
            This property returns the mapped elasticsearch server exception
            </summary>
        </member>
        <member name="P:Elasticsearch.Net.ElasticsearchResponse`1.ResponseRaw">
            <summary>
            The raw byte response, only set when IncludeRawResponse() is set on Connection configuration
            </summary>
        </member>
        <member name="P:Elasticsearch.Net.ElasticsearchResponse`1.SuccessOrKnownError">
            <summary>
            If the response is succesful or has a known error (400-500 range)
            The client should not retry this call
            </summary>
        </member>
        <member name="T:Elasticsearch.Net.ElasticsearchClient">
            <summary>
            Raw operations with elasticsearch
            </summary>
            <summary>
            Low level client that exposes all of elasticsearch API endpoints but leaves you in charge of building request and handling the response
            </summary>
        </member>
        <member name="T:Elasticsearch.Net.IElasticsearchClient">
            <summary>
            Raw operations with elasticsearch
            <pre>
            This file is automatically generated from https://github.com/elasticsearch/elasticsearch-rest-api-spec
            </pre>
            <pre>
            Generated of commit 
            </pre>
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.AbortBenchmark``1(System.String,System.Func{Elasticsearch.Net.AbortBenchmarkRequestParameters,Elasticsearch.Net.AbortBenchmarkRequestParameters})">
            <summary>Represents a POST on /_bench/abort/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-benchmark.html</para>	
            </summary>
            <param name="name">A benchmark name</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.AbortBenchmarkAsync``1(System.String,System.Func{Elasticsearch.Net.AbortBenchmarkRequestParameters,Elasticsearch.Net.AbortBenchmarkRequestParameters})">
            <summary>Represents a POST on /_bench/abort/{name}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-benchmark.html</para>	
            </summary>
            <param name="name">A benchmark name</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.AbortBenchmark(System.String,System.Func{Elasticsearch.Net.AbortBenchmarkRequestParameters,Elasticsearch.Net.AbortBenchmarkRequestParameters})">
            <summary>Represents a POST on /_bench/abort/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-benchmark.html</para>	
            </summary>
            <param name="name">A benchmark name</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.AbortBenchmarkAsync(System.String,System.Func{Elasticsearch.Net.AbortBenchmarkRequestParameters,Elasticsearch.Net.AbortBenchmarkRequestParameters})">
            <summary>Represents a POST on /_bench/abort/{name}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-benchmark.html</para>	
            </summary>
            <param name="name">A benchmark name</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.Bulk``1(System.Object,System.Func{Elasticsearch.Net.BulkRequestParameters,Elasticsearch.Net.BulkRequestParameters})">
            <summary>Represents a POST on /_bulk
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-bulk.html</para>	
            </summary>
            <param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.BulkAsync``1(System.Object,System.Func{Elasticsearch.Net.BulkRequestParameters,Elasticsearch.Net.BulkRequestParameters})">
            <summary>Represents a POST on /_bulk
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-bulk.html</para>	
            </summary>
            <param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.Bulk(System.Object,System.Func{Elasticsearch.Net.BulkRequestParameters,Elasticsearch.Net.BulkRequestParameters})">
            <summary>Represents a POST on /_bulk
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-bulk.html</para>	
            </summary>
            <param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.BulkAsync(System.Object,System.Func{Elasticsearch.Net.BulkRequestParameters,Elasticsearch.Net.BulkRequestParameters})">
            <summary>Represents a POST on /_bulk
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-bulk.html</para>	
            </summary>
            <param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.Bulk``1(System.String,System.Object,System.Func{Elasticsearch.Net.BulkRequestParameters,Elasticsearch.Net.BulkRequestParameters})">
            <summary>Represents a POST on /{index}/_bulk
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-bulk.html</para>	
            </summary>
            <param name="index">Default index for items which don&#39;t provide one</param>
            <param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.BulkAsync``1(System.String,System.Object,System.Func{Elasticsearch.Net.BulkRequestParameters,Elasticsearch.Net.BulkRequestParameters})">
            <summary>Represents a POST on /{index}/_bulk
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-bulk.html</para>	
            </summary>
            <param name="index">Default index for items which don&#39;t provide one</param>
            <param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.Bulk(System.String,System.Object,System.Func{Elasticsearch.Net.BulkRequestParameters,Elasticsearch.Net.BulkRequestParameters})">
            <summary>Represents a POST on /{index}/_bulk
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-bulk.html</para>	
            </summary>
            <param name="index">Default index for items which don&#39;t provide one</param>
            <param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.BulkAsync(System.String,System.Object,System.Func{Elasticsearch.Net.BulkRequestParameters,Elasticsearch.Net.BulkRequestParameters})">
            <summary>Represents a POST on /{index}/_bulk
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-bulk.html</para>	
            </summary>
            <param name="index">Default index for items which don&#39;t provide one</param>
            <param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.Bulk``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.BulkRequestParameters,Elasticsearch.Net.BulkRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_bulk
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-bulk.html</para>	
            </summary>
            <param name="index">Default index for items which don&#39;t provide one</param>
            <param name="type">Default document type for items which don&#39;t provide one</param>
            <param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.BulkAsync``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.BulkRequestParameters,Elasticsearch.Net.BulkRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_bulk
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-bulk.html</para>	
            </summary>
            <param name="index">Default index for items which don&#39;t provide one</param>
            <param name="type">Default document type for items which don&#39;t provide one</param>
            <param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.Bulk(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.BulkRequestParameters,Elasticsearch.Net.BulkRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_bulk
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-bulk.html</para>	
            </summary>
            <param name="index">Default index for items which don&#39;t provide one</param>
            <param name="type">Default document type for items which don&#39;t provide one</param>
            <param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.BulkAsync(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.BulkRequestParameters,Elasticsearch.Net.BulkRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_bulk
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-bulk.html</para>	
            </summary>
            <param name="index">Default index for items which don&#39;t provide one</param>
            <param name="type">Default document type for items which don&#39;t provide one</param>
            <param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.BulkPut``1(System.Object,System.Func{Elasticsearch.Net.BulkRequestParameters,Elasticsearch.Net.BulkRequestParameters})">
            <summary>Represents a PUT on /_bulk
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-bulk.html</para>	
            </summary>
            <param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.BulkPutAsync``1(System.Object,System.Func{Elasticsearch.Net.BulkRequestParameters,Elasticsearch.Net.BulkRequestParameters})">
            <summary>Represents a PUT on /_bulk
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-bulk.html</para>	
            </summary>
            <param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.BulkPut(System.Object,System.Func{Elasticsearch.Net.BulkRequestParameters,Elasticsearch.Net.BulkRequestParameters})">
            <summary>Represents a PUT on /_bulk
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-bulk.html</para>	
            </summary>
            <param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.BulkPutAsync(System.Object,System.Func{Elasticsearch.Net.BulkRequestParameters,Elasticsearch.Net.BulkRequestParameters})">
            <summary>Represents a PUT on /_bulk
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-bulk.html</para>	
            </summary>
            <param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.BulkPut``1(System.String,System.Object,System.Func{Elasticsearch.Net.BulkRequestParameters,Elasticsearch.Net.BulkRequestParameters})">
            <summary>Represents a PUT on /{index}/_bulk
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-bulk.html</para>	
            </summary>
            <param name="index">Default index for items which don&#39;t provide one</param>
            <param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.BulkPutAsync``1(System.String,System.Object,System.Func{Elasticsearch.Net.BulkRequestParameters,Elasticsearch.Net.BulkRequestParameters})">
            <summary>Represents a PUT on /{index}/_bulk
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-bulk.html</para>	
            </summary>
            <param name="index">Default index for items which don&#39;t provide one</param>
            <param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.BulkPut(System.String,System.Object,System.Func{Elasticsearch.Net.BulkRequestParameters,Elasticsearch.Net.BulkRequestParameters})">
            <summary>Represents a PUT on /{index}/_bulk
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-bulk.html</para>	
            </summary>
            <param name="index">Default index for items which don&#39;t provide one</param>
            <param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.BulkPutAsync(System.String,System.Object,System.Func{Elasticsearch.Net.BulkRequestParameters,Elasticsearch.Net.BulkRequestParameters})">
            <summary>Represents a PUT on /{index}/_bulk
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-bulk.html</para>	
            </summary>
            <param name="index">Default index for items which don&#39;t provide one</param>
            <param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.BulkPut``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.BulkRequestParameters,Elasticsearch.Net.BulkRequestParameters})">
            <summary>Represents a PUT on /{index}/{type}/_bulk
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-bulk.html</para>	
            </summary>
            <param name="index">Default index for items which don&#39;t provide one</param>
            <param name="type">Default document type for items which don&#39;t provide one</param>
            <param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.BulkPutAsync``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.BulkRequestParameters,Elasticsearch.Net.BulkRequestParameters})">
            <summary>Represents a PUT on /{index}/{type}/_bulk
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-bulk.html</para>	
            </summary>
            <param name="index">Default index for items which don&#39;t provide one</param>
            <param name="type">Default document type for items which don&#39;t provide one</param>
            <param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.BulkPut(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.BulkRequestParameters,Elasticsearch.Net.BulkRequestParameters})">
            <summary>Represents a PUT on /{index}/{type}/_bulk
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-bulk.html</para>	
            </summary>
            <param name="index">Default index for items which don&#39;t provide one</param>
            <param name="type">Default document type for items which don&#39;t provide one</param>
            <param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.BulkPutAsync(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.BulkRequestParameters,Elasticsearch.Net.BulkRequestParameters})">
            <summary>Represents a PUT on /{index}/{type}/_bulk
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-bulk.html</para>	
            </summary>
            <param name="index">Default index for items which don&#39;t provide one</param>
            <param name="type">Default document type for items which don&#39;t provide one</param>
            <param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CatAliases``1(System.Func{Elasticsearch.Net.CatAliasesRequestParameters,Elasticsearch.Net.CatAliasesRequestParameters})">
            <summary>Represents a GET on /_cat/aliases
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-aliases.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CatAliasesAsync``1(System.Func{Elasticsearch.Net.CatAliasesRequestParameters,Elasticsearch.Net.CatAliasesRequestParameters})">
            <summary>Represents a GET on /_cat/aliases
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-aliases.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CatAliases(System.Func{Elasticsearch.Net.CatAliasesRequestParameters,Elasticsearch.Net.CatAliasesRequestParameters})">
            <summary>Represents a GET on /_cat/aliases
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-aliases.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CatAliasesAsync(System.Func{Elasticsearch.Net.CatAliasesRequestParameters,Elasticsearch.Net.CatAliasesRequestParameters})">
            <summary>Represents a GET on /_cat/aliases
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-aliases.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CatAliases``1(System.String,System.Func{Elasticsearch.Net.CatAliasesRequestParameters,Elasticsearch.Net.CatAliasesRequestParameters})">
            <summary>Represents a GET on /_cat/aliases/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-aliases.html</para>	
            </summary>
            <param name="name">A comma-separated list of alias names to return</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CatAliasesAsync``1(System.String,System.Func{Elasticsearch.Net.CatAliasesRequestParameters,Elasticsearch.Net.CatAliasesRequestParameters})">
            <summary>Represents a GET on /_cat/aliases/{name}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-aliases.html</para>	
            </summary>
            <param name="name">A comma-separated list of alias names to return</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CatAliases(System.String,System.Func{Elasticsearch.Net.CatAliasesRequestParameters,Elasticsearch.Net.CatAliasesRequestParameters})">
            <summary>Represents a GET on /_cat/aliases/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-aliases.html</para>	
            </summary>
            <param name="name">A comma-separated list of alias names to return</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CatAliasesAsync(System.String,System.Func{Elasticsearch.Net.CatAliasesRequestParameters,Elasticsearch.Net.CatAliasesRequestParameters})">
            <summary>Represents a GET on /_cat/aliases/{name}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-aliases.html</para>	
            </summary>
            <param name="name">A comma-separated list of alias names to return</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CatAllocation``1(System.Func{Elasticsearch.Net.CatAllocationRequestParameters,Elasticsearch.Net.CatAllocationRequestParameters})">
            <summary>Represents a GET on /_cat/allocation
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-allocation.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CatAllocationAsync``1(System.Func{Elasticsearch.Net.CatAllocationRequestParameters,Elasticsearch.Net.CatAllocationRequestParameters})">
            <summary>Represents a GET on /_cat/allocation
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-allocation.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CatAllocation(System.Func{Elasticsearch.Net.CatAllocationRequestParameters,Elasticsearch.Net.CatAllocationRequestParameters})">
            <summary>Represents a GET on /_cat/allocation
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-allocation.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CatAllocationAsync(System.Func{Elasticsearch.Net.CatAllocationRequestParameters,Elasticsearch.Net.CatAllocationRequestParameters})">
            <summary>Represents a GET on /_cat/allocation
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-allocation.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CatAllocation``1(System.String,System.Func{Elasticsearch.Net.CatAllocationRequestParameters,Elasticsearch.Net.CatAllocationRequestParameters})">
            <summary>Represents a GET on /_cat/allocation/{node_id}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-allocation.html</para>	
            </summary>
            <param name="node_id">A comma-separated list of node IDs or names to limit the returned information</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CatAllocationAsync``1(System.String,System.Func{Elasticsearch.Net.CatAllocationRequestParameters,Elasticsearch.Net.CatAllocationRequestParameters})">
            <summary>Represents a GET on /_cat/allocation/{node_id}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-allocation.html</para>	
            </summary>
            <param name="node_id">A comma-separated list of node IDs or names to limit the returned information</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CatAllocation(System.String,System.Func{Elasticsearch.Net.CatAllocationRequestParameters,Elasticsearch.Net.CatAllocationRequestParameters})">
            <summary>Represents a GET on /_cat/allocation/{node_id}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-allocation.html</para>	
            </summary>
            <param name="node_id">A comma-separated list of node IDs or names to limit the returned information</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CatAllocationAsync(System.String,System.Func{Elasticsearch.Net.CatAllocationRequestParameters,Elasticsearch.Net.CatAllocationRequestParameters})">
            <summary>Represents a GET on /_cat/allocation/{node_id}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-allocation.html</para>	
            </summary>
            <param name="node_id">A comma-separated list of node IDs or names to limit the returned information</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CatCount``1(System.Func{Elasticsearch.Net.CatCountRequestParameters,Elasticsearch.Net.CatCountRequestParameters})">
            <summary>Represents a GET on /_cat/count
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-count.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CatCountAsync``1(System.Func{Elasticsearch.Net.CatCountRequestParameters,Elasticsearch.Net.CatCountRequestParameters})">
            <summary>Represents a GET on /_cat/count
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-count.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CatCount(System.Func{Elasticsearch.Net.CatCountRequestParameters,Elasticsearch.Net.CatCountRequestParameters})">
            <summary>Represents a GET on /_cat/count
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-count.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CatCountAsync(System.Func{Elasticsearch.Net.CatCountRequestParameters,Elasticsearch.Net.CatCountRequestParameters})">
            <summary>Represents a GET on /_cat/count
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-count.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CatCount``1(System.String,System.Func{Elasticsearch.Net.CatCountRequestParameters,Elasticsearch.Net.CatCountRequestParameters})">
            <summary>Represents a GET on /_cat/count/{index}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-count.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to limit the returned information</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CatCountAsync``1(System.String,System.Func{Elasticsearch.Net.CatCountRequestParameters,Elasticsearch.Net.CatCountRequestParameters})">
            <summary>Represents a GET on /_cat/count/{index}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-count.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to limit the returned information</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CatCount(System.String,System.Func{Elasticsearch.Net.CatCountRequestParameters,Elasticsearch.Net.CatCountRequestParameters})">
            <summary>Represents a GET on /_cat/count/{index}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-count.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to limit the returned information</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CatCountAsync(System.String,System.Func{Elasticsearch.Net.CatCountRequestParameters,Elasticsearch.Net.CatCountRequestParameters})">
            <summary>Represents a GET on /_cat/count/{index}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-count.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to limit the returned information</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CatFielddata``1(System.Func{Elasticsearch.Net.CatFielddataRequestParameters,Elasticsearch.Net.CatFielddataRequestParameters})">
            <summary>Represents a GET on /_cat/fielddata
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/cat-fielddata.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CatFielddataAsync``1(System.Func{Elasticsearch.Net.CatFielddataRequestParameters,Elasticsearch.Net.CatFielddataRequestParameters})">
            <summary>Represents a GET on /_cat/fielddata
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/cat-fielddata.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CatFielddata(System.Func{Elasticsearch.Net.CatFielddataRequestParameters,Elasticsearch.Net.CatFielddataRequestParameters})">
            <summary>Represents a GET on /_cat/fielddata
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/cat-fielddata.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CatFielddataAsync(System.Func{Elasticsearch.Net.CatFielddataRequestParameters,Elasticsearch.Net.CatFielddataRequestParameters})">
            <summary>Represents a GET on /_cat/fielddata
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/cat-fielddata.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CatHealth``1(System.Func{Elasticsearch.Net.CatHealthRequestParameters,Elasticsearch.Net.CatHealthRequestParameters})">
            <summary>Represents a GET on /_cat/health
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-health.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CatHealthAsync``1(System.Func{Elasticsearch.Net.CatHealthRequestParameters,Elasticsearch.Net.CatHealthRequestParameters})">
            <summary>Represents a GET on /_cat/health
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-health.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CatHealth(System.Func{Elasticsearch.Net.CatHealthRequestParameters,Elasticsearch.Net.CatHealthRequestParameters})">
            <summary>Represents a GET on /_cat/health
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-health.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CatHealthAsync(System.Func{Elasticsearch.Net.CatHealthRequestParameters,Elasticsearch.Net.CatHealthRequestParameters})">
            <summary>Represents a GET on /_cat/health
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-health.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CatHelp``1(System.Func{Elasticsearch.Net.CatHelpRequestParameters,Elasticsearch.Net.CatHelpRequestParameters})">
            <summary>Represents a GET on /_cat
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CatHelpAsync``1(System.Func{Elasticsearch.Net.CatHelpRequestParameters,Elasticsearch.Net.CatHelpRequestParameters})">
            <summary>Represents a GET on /_cat
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CatHelp(System.Func{Elasticsearch.Net.CatHelpRequestParameters,Elasticsearch.Net.CatHelpRequestParameters})">
            <summary>Represents a GET on /_cat
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CatHelpAsync(System.Func{Elasticsearch.Net.CatHelpRequestParameters,Elasticsearch.Net.CatHelpRequestParameters})">
            <summary>Represents a GET on /_cat
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CatIndices``1(System.Func{Elasticsearch.Net.CatIndicesRequestParameters,Elasticsearch.Net.CatIndicesRequestParameters})">
            <summary>Represents a GET on /_cat/indices
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-indices.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CatIndicesAsync``1(System.Func{Elasticsearch.Net.CatIndicesRequestParameters,Elasticsearch.Net.CatIndicesRequestParameters})">
            <summary>Represents a GET on /_cat/indices
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-indices.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CatIndices(System.Func{Elasticsearch.Net.CatIndicesRequestParameters,Elasticsearch.Net.CatIndicesRequestParameters})">
            <summary>Represents a GET on /_cat/indices
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-indices.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CatIndicesAsync(System.Func{Elasticsearch.Net.CatIndicesRequestParameters,Elasticsearch.Net.CatIndicesRequestParameters})">
            <summary>Represents a GET on /_cat/indices
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-indices.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CatIndices``1(System.String,System.Func{Elasticsearch.Net.CatIndicesRequestParameters,Elasticsearch.Net.CatIndicesRequestParameters})">
            <summary>Represents a GET on /_cat/indices/{index}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-indices.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to limit the returned information</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CatIndicesAsync``1(System.String,System.Func{Elasticsearch.Net.CatIndicesRequestParameters,Elasticsearch.Net.CatIndicesRequestParameters})">
            <summary>Represents a GET on /_cat/indices/{index}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-indices.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to limit the returned information</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CatIndices(System.String,System.Func{Elasticsearch.Net.CatIndicesRequestParameters,Elasticsearch.Net.CatIndicesRequestParameters})">
            <summary>Represents a GET on /_cat/indices/{index}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-indices.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to limit the returned information</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CatIndicesAsync(System.String,System.Func{Elasticsearch.Net.CatIndicesRequestParameters,Elasticsearch.Net.CatIndicesRequestParameters})">
            <summary>Represents a GET on /_cat/indices/{index}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-indices.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to limit the returned information</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CatMaster``1(System.Func{Elasticsearch.Net.CatMasterRequestParameters,Elasticsearch.Net.CatMasterRequestParameters})">
            <summary>Represents a GET on /_cat/master
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-master.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CatMasterAsync``1(System.Func{Elasticsearch.Net.CatMasterRequestParameters,Elasticsearch.Net.CatMasterRequestParameters})">
            <summary>Represents a GET on /_cat/master
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-master.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CatMaster(System.Func{Elasticsearch.Net.CatMasterRequestParameters,Elasticsearch.Net.CatMasterRequestParameters})">
            <summary>Represents a GET on /_cat/master
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-master.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CatMasterAsync(System.Func{Elasticsearch.Net.CatMasterRequestParameters,Elasticsearch.Net.CatMasterRequestParameters})">
            <summary>Represents a GET on /_cat/master
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-master.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CatNodes``1(System.Func{Elasticsearch.Net.CatNodesRequestParameters,Elasticsearch.Net.CatNodesRequestParameters})">
            <summary>Represents a GET on /_cat/nodes
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-nodes.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CatNodesAsync``1(System.Func{Elasticsearch.Net.CatNodesRequestParameters,Elasticsearch.Net.CatNodesRequestParameters})">
            <summary>Represents a GET on /_cat/nodes
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-nodes.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CatNodes(System.Func{Elasticsearch.Net.CatNodesRequestParameters,Elasticsearch.Net.CatNodesRequestParameters})">
            <summary>Represents a GET on /_cat/nodes
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-nodes.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CatNodesAsync(System.Func{Elasticsearch.Net.CatNodesRequestParameters,Elasticsearch.Net.CatNodesRequestParameters})">
            <summary>Represents a GET on /_cat/nodes
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-nodes.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CatPendingTasks``1(System.Func{Elasticsearch.Net.CatPendingTasksRequestParameters,Elasticsearch.Net.CatPendingTasksRequestParameters})">
            <summary>Represents a GET on /_cat/pending_tasks
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-pending-tasks.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CatPendingTasksAsync``1(System.Func{Elasticsearch.Net.CatPendingTasksRequestParameters,Elasticsearch.Net.CatPendingTasksRequestParameters})">
            <summary>Represents a GET on /_cat/pending_tasks
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-pending-tasks.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CatPendingTasks(System.Func{Elasticsearch.Net.CatPendingTasksRequestParameters,Elasticsearch.Net.CatPendingTasksRequestParameters})">
            <summary>Represents a GET on /_cat/pending_tasks
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-pending-tasks.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CatPendingTasksAsync(System.Func{Elasticsearch.Net.CatPendingTasksRequestParameters,Elasticsearch.Net.CatPendingTasksRequestParameters})">
            <summary>Represents a GET on /_cat/pending_tasks
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-pending-tasks.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CatPlugins``1(System.Func{Elasticsearch.Net.CatPluginsRequestParameters,Elasticsearch.Net.CatPluginsRequestParameters})">
            <summary>Represents a GET on /_cat/plugins
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/cat-plugins.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CatPluginsAsync``1(System.Func{Elasticsearch.Net.CatPluginsRequestParameters,Elasticsearch.Net.CatPluginsRequestParameters})">
            <summary>Represents a GET on /_cat/plugins
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/cat-plugins.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CatPlugins(System.Func{Elasticsearch.Net.CatPluginsRequestParameters,Elasticsearch.Net.CatPluginsRequestParameters})">
            <summary>Represents a GET on /_cat/plugins
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/cat-plugins.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CatPluginsAsync(System.Func{Elasticsearch.Net.CatPluginsRequestParameters,Elasticsearch.Net.CatPluginsRequestParameters})">
            <summary>Represents a GET on /_cat/plugins
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/cat-plugins.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CatRecovery``1(System.Func{Elasticsearch.Net.CatRecoveryRequestParameters,Elasticsearch.Net.CatRecoveryRequestParameters})">
            <summary>Represents a GET on /_cat/recovery
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-recovery.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CatRecoveryAsync``1(System.Func{Elasticsearch.Net.CatRecoveryRequestParameters,Elasticsearch.Net.CatRecoveryRequestParameters})">
            <summary>Represents a GET on /_cat/recovery
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-recovery.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CatRecovery(System.Func{Elasticsearch.Net.CatRecoveryRequestParameters,Elasticsearch.Net.CatRecoveryRequestParameters})">
            <summary>Represents a GET on /_cat/recovery
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-recovery.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CatRecoveryAsync(System.Func{Elasticsearch.Net.CatRecoveryRequestParameters,Elasticsearch.Net.CatRecoveryRequestParameters})">
            <summary>Represents a GET on /_cat/recovery
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-recovery.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CatRecovery``1(System.String,System.Func{Elasticsearch.Net.CatRecoveryRequestParameters,Elasticsearch.Net.CatRecoveryRequestParameters})">
            <summary>Represents a GET on /_cat/recovery/{index}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-recovery.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to limit the returned information</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CatRecoveryAsync``1(System.String,System.Func{Elasticsearch.Net.CatRecoveryRequestParameters,Elasticsearch.Net.CatRecoveryRequestParameters})">
            <summary>Represents a GET on /_cat/recovery/{index}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-recovery.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to limit the returned information</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CatRecovery(System.String,System.Func{Elasticsearch.Net.CatRecoveryRequestParameters,Elasticsearch.Net.CatRecoveryRequestParameters})">
            <summary>Represents a GET on /_cat/recovery/{index}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-recovery.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to limit the returned information</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CatRecoveryAsync(System.String,System.Func{Elasticsearch.Net.CatRecoveryRequestParameters,Elasticsearch.Net.CatRecoveryRequestParameters})">
            <summary>Represents a GET on /_cat/recovery/{index}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-recovery.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to limit the returned information</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CatShards``1(System.Func{Elasticsearch.Net.CatShardsRequestParameters,Elasticsearch.Net.CatShardsRequestParameters})">
            <summary>Represents a GET on /_cat/shards
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-shards.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CatShardsAsync``1(System.Func{Elasticsearch.Net.CatShardsRequestParameters,Elasticsearch.Net.CatShardsRequestParameters})">
            <summary>Represents a GET on /_cat/shards
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-shards.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CatShards(System.Func{Elasticsearch.Net.CatShardsRequestParameters,Elasticsearch.Net.CatShardsRequestParameters})">
            <summary>Represents a GET on /_cat/shards
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-shards.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CatShardsAsync(System.Func{Elasticsearch.Net.CatShardsRequestParameters,Elasticsearch.Net.CatShardsRequestParameters})">
            <summary>Represents a GET on /_cat/shards
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-shards.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CatShards``1(System.String,System.Func{Elasticsearch.Net.CatShardsRequestParameters,Elasticsearch.Net.CatShardsRequestParameters})">
            <summary>Represents a GET on /_cat/shards/{index}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-shards.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to limit the returned information</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CatShardsAsync``1(System.String,System.Func{Elasticsearch.Net.CatShardsRequestParameters,Elasticsearch.Net.CatShardsRequestParameters})">
            <summary>Represents a GET on /_cat/shards/{index}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-shards.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to limit the returned information</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CatShards(System.String,System.Func{Elasticsearch.Net.CatShardsRequestParameters,Elasticsearch.Net.CatShardsRequestParameters})">
            <summary>Represents a GET on /_cat/shards/{index}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-shards.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to limit the returned information</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CatShardsAsync(System.String,System.Func{Elasticsearch.Net.CatShardsRequestParameters,Elasticsearch.Net.CatShardsRequestParameters})">
            <summary>Represents a GET on /_cat/shards/{index}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-shards.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to limit the returned information</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CatThreadPool``1(System.Func{Elasticsearch.Net.CatThreadPoolRequestParameters,Elasticsearch.Net.CatThreadPoolRequestParameters})">
            <summary>Represents a GET on /_cat/thread_pool
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/cat-thread-pool.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CatThreadPoolAsync``1(System.Func{Elasticsearch.Net.CatThreadPoolRequestParameters,Elasticsearch.Net.CatThreadPoolRequestParameters})">
            <summary>Represents a GET on /_cat/thread_pool
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/cat-thread-pool.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CatThreadPool(System.Func{Elasticsearch.Net.CatThreadPoolRequestParameters,Elasticsearch.Net.CatThreadPoolRequestParameters})">
            <summary>Represents a GET on /_cat/thread_pool
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/cat-thread-pool.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CatThreadPoolAsync(System.Func{Elasticsearch.Net.CatThreadPoolRequestParameters,Elasticsearch.Net.CatThreadPoolRequestParameters})">
            <summary>Represents a GET on /_cat/thread_pool
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/cat-thread-pool.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.ClearScroll``1(System.String,System.Object,System.Func{Elasticsearch.Net.ClearScrollRequestParameters,Elasticsearch.Net.ClearScrollRequestParameters})">
            <summary>Represents a DELETE on /_search/scroll/{scroll_id}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-request-scroll.html</para>	
            </summary>
            <param name="scroll_id">A comma-separated list of scroll IDs to clear</param>
            <param name="body">A comma-separated list of scroll IDs to clear if none was specified via the scroll_id parameter</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.ClearScrollAsync``1(System.String,System.Object,System.Func{Elasticsearch.Net.ClearScrollRequestParameters,Elasticsearch.Net.ClearScrollRequestParameters})">
            <summary>Represents a DELETE on /_search/scroll/{scroll_id}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-request-scroll.html</para>	
            </summary>
            <param name="scroll_id">A comma-separated list of scroll IDs to clear</param>
            <param name="body">A comma-separated list of scroll IDs to clear if none was specified via the scroll_id parameter</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.ClearScroll(System.String,System.Object,System.Func{Elasticsearch.Net.ClearScrollRequestParameters,Elasticsearch.Net.ClearScrollRequestParameters})">
            <summary>Represents a DELETE on /_search/scroll/{scroll_id}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-request-scroll.html</para>	
            </summary>
            <param name="scroll_id">A comma-separated list of scroll IDs to clear</param>
            <param name="body">A comma-separated list of scroll IDs to clear if none was specified via the scroll_id parameter</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.ClearScrollAsync(System.String,System.Object,System.Func{Elasticsearch.Net.ClearScrollRequestParameters,Elasticsearch.Net.ClearScrollRequestParameters})">
            <summary>Represents a DELETE on /_search/scroll/{scroll_id}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-request-scroll.html</para>	
            </summary>
            <param name="scroll_id">A comma-separated list of scroll IDs to clear</param>
            <param name="body">A comma-separated list of scroll IDs to clear if none was specified via the scroll_id parameter</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.ClearScroll``1(System.Object,System.Func{Elasticsearch.Net.ClearScrollRequestParameters,Elasticsearch.Net.ClearScrollRequestParameters})">
            <summary>Represents a DELETE on /_search/scroll
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-request-scroll.html</para>	
            </summary>
            <param name="body">A comma-separated list of scroll IDs to clear if none was specified via the scroll_id parameter</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.ClearScrollAsync``1(System.Object,System.Func{Elasticsearch.Net.ClearScrollRequestParameters,Elasticsearch.Net.ClearScrollRequestParameters})">
            <summary>Represents a DELETE on /_search/scroll
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-request-scroll.html</para>	
            </summary>
            <param name="body">A comma-separated list of scroll IDs to clear if none was specified via the scroll_id parameter</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.ClearScroll(System.Object,System.Func{Elasticsearch.Net.ClearScrollRequestParameters,Elasticsearch.Net.ClearScrollRequestParameters})">
            <summary>Represents a DELETE on /_search/scroll
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-request-scroll.html</para>	
            </summary>
            <param name="body">A comma-separated list of scroll IDs to clear if none was specified via the scroll_id parameter</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.ClearScrollAsync(System.Object,System.Func{Elasticsearch.Net.ClearScrollRequestParameters,Elasticsearch.Net.ClearScrollRequestParameters})">
            <summary>Represents a DELETE on /_search/scroll
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-request-scroll.html</para>	
            </summary>
            <param name="body">A comma-separated list of scroll IDs to clear if none was specified via the scroll_id parameter</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.ClusterGetSettings``1(System.Func{Elasticsearch.Net.ClusterGetSettingsRequestParameters,Elasticsearch.Net.ClusterGetSettingsRequestParameters})">
            <summary>Represents a GET on /_cluster/settings
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-update-settings.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.ClusterGetSettingsAsync``1(System.Func{Elasticsearch.Net.ClusterGetSettingsRequestParameters,Elasticsearch.Net.ClusterGetSettingsRequestParameters})">
            <summary>Represents a GET on /_cluster/settings
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-update-settings.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.ClusterGetSettings(System.Func{Elasticsearch.Net.ClusterGetSettingsRequestParameters,Elasticsearch.Net.ClusterGetSettingsRequestParameters})">
            <summary>Represents a GET on /_cluster/settings
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-update-settings.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.ClusterGetSettingsAsync(System.Func{Elasticsearch.Net.ClusterGetSettingsRequestParameters,Elasticsearch.Net.ClusterGetSettingsRequestParameters})">
            <summary>Represents a GET on /_cluster/settings
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-update-settings.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.ClusterHealth``1(System.Func{Elasticsearch.Net.ClusterHealthRequestParameters,Elasticsearch.Net.ClusterHealthRequestParameters})">
            <summary>Represents a GET on /_cluster/health
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-health.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.ClusterHealthAsync``1(System.Func{Elasticsearch.Net.ClusterHealthRequestParameters,Elasticsearch.Net.ClusterHealthRequestParameters})">
            <summary>Represents a GET on /_cluster/health
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-health.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.ClusterHealth(System.Func{Elasticsearch.Net.ClusterHealthRequestParameters,Elasticsearch.Net.ClusterHealthRequestParameters})">
            <summary>Represents a GET on /_cluster/health
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-health.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.ClusterHealthAsync(System.Func{Elasticsearch.Net.ClusterHealthRequestParameters,Elasticsearch.Net.ClusterHealthRequestParameters})">
            <summary>Represents a GET on /_cluster/health
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-health.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.ClusterHealth``1(System.String,System.Func{Elasticsearch.Net.ClusterHealthRequestParameters,Elasticsearch.Net.ClusterHealthRequestParameters})">
            <summary>Represents a GET on /_cluster/health/{index}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-health.html</para>	
            </summary>
            <param name="index">Limit the information returned to a specific index</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.ClusterHealthAsync``1(System.String,System.Func{Elasticsearch.Net.ClusterHealthRequestParameters,Elasticsearch.Net.ClusterHealthRequestParameters})">
            <summary>Represents a GET on /_cluster/health/{index}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-health.html</para>	
            </summary>
            <param name="index">Limit the information returned to a specific index</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.ClusterHealth(System.String,System.Func{Elasticsearch.Net.ClusterHealthRequestParameters,Elasticsearch.Net.ClusterHealthRequestParameters})">
            <summary>Represents a GET on /_cluster/health/{index}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-health.html</para>	
            </summary>
            <param name="index">Limit the information returned to a specific index</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.ClusterHealthAsync(System.String,System.Func{Elasticsearch.Net.ClusterHealthRequestParameters,Elasticsearch.Net.ClusterHealthRequestParameters})">
            <summary>Represents a GET on /_cluster/health/{index}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-health.html</para>	
            </summary>
            <param name="index">Limit the information returned to a specific index</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.ClusterPendingTasks``1(System.Func{Elasticsearch.Net.ClusterPendingTasksRequestParameters,Elasticsearch.Net.ClusterPendingTasksRequestParameters})">
            <summary>Represents a GET on /_cluster/pending_tasks
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-pending.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.ClusterPendingTasksAsync``1(System.Func{Elasticsearch.Net.ClusterPendingTasksRequestParameters,Elasticsearch.Net.ClusterPendingTasksRequestParameters})">
            <summary>Represents a GET on /_cluster/pending_tasks
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-pending.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.ClusterPendingTasks(System.Func{Elasticsearch.Net.ClusterPendingTasksRequestParameters,Elasticsearch.Net.ClusterPendingTasksRequestParameters})">
            <summary>Represents a GET on /_cluster/pending_tasks
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-pending.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.ClusterPendingTasksAsync(System.Func{Elasticsearch.Net.ClusterPendingTasksRequestParameters,Elasticsearch.Net.ClusterPendingTasksRequestParameters})">
            <summary>Represents a GET on /_cluster/pending_tasks
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-pending.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.ClusterPutSettings``1(System.Object,System.Func{Elasticsearch.Net.ClusterSettingsRequestParameters,Elasticsearch.Net.ClusterSettingsRequestParameters})">
            <summary>Represents a PUT on /_cluster/settings
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-update-settings.html</para>	
            </summary>
            <param name="body">The settings to be updated. Can be either `transient` or `persistent` (survives cluster restart).</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.ClusterPutSettingsAsync``1(System.Object,System.Func{Elasticsearch.Net.ClusterSettingsRequestParameters,Elasticsearch.Net.ClusterSettingsRequestParameters})">
            <summary>Represents a PUT on /_cluster/settings
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-update-settings.html</para>	
            </summary>
            <param name="body">The settings to be updated. Can be either `transient` or `persistent` (survives cluster restart).</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.ClusterPutSettings(System.Object,System.Func{Elasticsearch.Net.ClusterSettingsRequestParameters,Elasticsearch.Net.ClusterSettingsRequestParameters})">
            <summary>Represents a PUT on /_cluster/settings
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-update-settings.html</para>	
            </summary>
            <param name="body">The settings to be updated. Can be either `transient` or `persistent` (survives cluster restart).</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.ClusterPutSettingsAsync(System.Object,System.Func{Elasticsearch.Net.ClusterSettingsRequestParameters,Elasticsearch.Net.ClusterSettingsRequestParameters})">
            <summary>Represents a PUT on /_cluster/settings
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-update-settings.html</para>	
            </summary>
            <param name="body">The settings to be updated. Can be either `transient` or `persistent` (survives cluster restart).</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.ClusterReroute``1(System.Object,System.Func{Elasticsearch.Net.ClusterRerouteRequestParameters,Elasticsearch.Net.ClusterRerouteRequestParameters})">
            <summary>Represents a POST on /_cluster/reroute
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-reroute.html</para>	
            </summary>
            <param name="body">The definition of `commands` to perform (`move`, `cancel`, `allocate`)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.ClusterRerouteAsync``1(System.Object,System.Func{Elasticsearch.Net.ClusterRerouteRequestParameters,Elasticsearch.Net.ClusterRerouteRequestParameters})">
            <summary>Represents a POST on /_cluster/reroute
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-reroute.html</para>	
            </summary>
            <param name="body">The definition of `commands` to perform (`move`, `cancel`, `allocate`)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.ClusterReroute(System.Object,System.Func{Elasticsearch.Net.ClusterRerouteRequestParameters,Elasticsearch.Net.ClusterRerouteRequestParameters})">
            <summary>Represents a POST on /_cluster/reroute
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-reroute.html</para>	
            </summary>
            <param name="body">The definition of `commands` to perform (`move`, `cancel`, `allocate`)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.ClusterRerouteAsync(System.Object,System.Func{Elasticsearch.Net.ClusterRerouteRequestParameters,Elasticsearch.Net.ClusterRerouteRequestParameters})">
            <summary>Represents a POST on /_cluster/reroute
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-reroute.html</para>	
            </summary>
            <param name="body">The definition of `commands` to perform (`move`, `cancel`, `allocate`)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.ClusterState``1(System.Func{Elasticsearch.Net.ClusterStateRequestParameters,Elasticsearch.Net.ClusterStateRequestParameters})">
            <summary>Represents a GET on /_cluster/state
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-state.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.ClusterStateAsync``1(System.Func{Elasticsearch.Net.ClusterStateRequestParameters,Elasticsearch.Net.ClusterStateRequestParameters})">
            <summary>Represents a GET on /_cluster/state
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-state.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.ClusterState(System.Func{Elasticsearch.Net.ClusterStateRequestParameters,Elasticsearch.Net.ClusterStateRequestParameters})">
            <summary>Represents a GET on /_cluster/state
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-state.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.ClusterStateAsync(System.Func{Elasticsearch.Net.ClusterStateRequestParameters,Elasticsearch.Net.ClusterStateRequestParameters})">
            <summary>Represents a GET on /_cluster/state
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-state.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.ClusterState``1(System.String,System.Func{Elasticsearch.Net.ClusterStateRequestParameters,Elasticsearch.Net.ClusterStateRequestParameters})">
            <summary>Represents a GET on /_cluster/state/{metric}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-state.html</para>	
            </summary>
            <param name="metric">Limit the information returned to the specified metrics</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.ClusterStateAsync``1(System.String,System.Func{Elasticsearch.Net.ClusterStateRequestParameters,Elasticsearch.Net.ClusterStateRequestParameters})">
            <summary>Represents a GET on /_cluster/state/{metric}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-state.html</para>	
            </summary>
            <param name="metric">Limit the information returned to the specified metrics</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.ClusterState(System.String,System.Func{Elasticsearch.Net.ClusterStateRequestParameters,Elasticsearch.Net.ClusterStateRequestParameters})">
            <summary>Represents a GET on /_cluster/state/{metric}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-state.html</para>	
            </summary>
            <param name="metric">Limit the information returned to the specified metrics</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.ClusterStateAsync(System.String,System.Func{Elasticsearch.Net.ClusterStateRequestParameters,Elasticsearch.Net.ClusterStateRequestParameters})">
            <summary>Represents a GET on /_cluster/state/{metric}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-state.html</para>	
            </summary>
            <param name="metric">Limit the information returned to the specified metrics</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.ClusterState``1(System.String,System.String,System.Func{Elasticsearch.Net.ClusterStateRequestParameters,Elasticsearch.Net.ClusterStateRequestParameters})">
            <summary>Represents a GET on /_cluster/state/{metric}/{index}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-state.html</para>	
            </summary>
            <param name="metric">Limit the information returned to the specified metrics</param>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.ClusterStateAsync``1(System.String,System.String,System.Func{Elasticsearch.Net.ClusterStateRequestParameters,Elasticsearch.Net.ClusterStateRequestParameters})">
            <summary>Represents a GET on /_cluster/state/{metric}/{index}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-state.html</para>	
            </summary>
            <param name="metric">Limit the information returned to the specified metrics</param>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.ClusterState(System.String,System.String,System.Func{Elasticsearch.Net.ClusterStateRequestParameters,Elasticsearch.Net.ClusterStateRequestParameters})">
            <summary>Represents a GET on /_cluster/state/{metric}/{index}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-state.html</para>	
            </summary>
            <param name="metric">Limit the information returned to the specified metrics</param>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.ClusterStateAsync(System.String,System.String,System.Func{Elasticsearch.Net.ClusterStateRequestParameters,Elasticsearch.Net.ClusterStateRequestParameters})">
            <summary>Represents a GET on /_cluster/state/{metric}/{index}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-state.html</para>	
            </summary>
            <param name="metric">Limit the information returned to the specified metrics</param>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.ClusterStats``1(System.Func{Elasticsearch.Net.ClusterStatsRequestParameters,Elasticsearch.Net.ClusterStatsRequestParameters})">
            <summary>Represents a GET on /_cluster/stats
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-stats.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.ClusterStatsAsync``1(System.Func{Elasticsearch.Net.ClusterStatsRequestParameters,Elasticsearch.Net.ClusterStatsRequestParameters})">
            <summary>Represents a GET on /_cluster/stats
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-stats.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.ClusterStats(System.Func{Elasticsearch.Net.ClusterStatsRequestParameters,Elasticsearch.Net.ClusterStatsRequestParameters})">
            <summary>Represents a GET on /_cluster/stats
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-stats.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.ClusterStatsAsync(System.Func{Elasticsearch.Net.ClusterStatsRequestParameters,Elasticsearch.Net.ClusterStatsRequestParameters})">
            <summary>Represents a GET on /_cluster/stats
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-stats.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.ClusterStats``1(System.String,System.Func{Elasticsearch.Net.ClusterStatsRequestParameters,Elasticsearch.Net.ClusterStatsRequestParameters})">
            <summary>Represents a GET on /_cluster/stats/nodes/{node_id}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-stats.html</para>	
            </summary>
            <param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.ClusterStatsAsync``1(System.String,System.Func{Elasticsearch.Net.ClusterStatsRequestParameters,Elasticsearch.Net.ClusterStatsRequestParameters})">
            <summary>Represents a GET on /_cluster/stats/nodes/{node_id}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-stats.html</para>	
            </summary>
            <param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.ClusterStats(System.String,System.Func{Elasticsearch.Net.ClusterStatsRequestParameters,Elasticsearch.Net.ClusterStatsRequestParameters})">
            <summary>Represents a GET on /_cluster/stats/nodes/{node_id}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-stats.html</para>	
            </summary>
            <param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.ClusterStatsAsync(System.String,System.Func{Elasticsearch.Net.ClusterStatsRequestParameters,Elasticsearch.Net.ClusterStatsRequestParameters})">
            <summary>Represents a GET on /_cluster/stats/nodes/{node_id}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-stats.html</para>	
            </summary>
            <param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.Count``1(System.Object,System.Func{Elasticsearch.Net.CountRequestParameters,Elasticsearch.Net.CountRequestParameters})">
            <summary>Represents a POST on /_count
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-count.html</para>	
            </summary>
            <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CountAsync``1(System.Object,System.Func{Elasticsearch.Net.CountRequestParameters,Elasticsearch.Net.CountRequestParameters})">
            <summary>Represents a POST on /_count
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-count.html</para>	
            </summary>
            <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.Count(System.Object,System.Func{Elasticsearch.Net.CountRequestParameters,Elasticsearch.Net.CountRequestParameters})">
            <summary>Represents a POST on /_count
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-count.html</para>	
            </summary>
            <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CountAsync(System.Object,System.Func{Elasticsearch.Net.CountRequestParameters,Elasticsearch.Net.CountRequestParameters})">
            <summary>Represents a POST on /_count
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-count.html</para>	
            </summary>
            <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.Count``1(System.String,System.Object,System.Func{Elasticsearch.Net.CountRequestParameters,Elasticsearch.Net.CountRequestParameters})">
            <summary>Represents a POST on /{index}/_count
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-count.html</para>	
            </summary>
            <param name="index">A comma-separated list of indices to restrict the results</param>
            <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CountAsync``1(System.String,System.Object,System.Func{Elasticsearch.Net.CountRequestParameters,Elasticsearch.Net.CountRequestParameters})">
            <summary>Represents a POST on /{index}/_count
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-count.html</para>	
            </summary>
            <param name="index">A comma-separated list of indices to restrict the results</param>
            <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.Count(System.String,System.Object,System.Func{Elasticsearch.Net.CountRequestParameters,Elasticsearch.Net.CountRequestParameters})">
            <summary>Represents a POST on /{index}/_count
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-count.html</para>	
            </summary>
            <param name="index">A comma-separated list of indices to restrict the results</param>
            <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CountAsync(System.String,System.Object,System.Func{Elasticsearch.Net.CountRequestParameters,Elasticsearch.Net.CountRequestParameters})">
            <summary>Represents a POST on /{index}/_count
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-count.html</para>	
            </summary>
            <param name="index">A comma-separated list of indices to restrict the results</param>
            <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.Count``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.CountRequestParameters,Elasticsearch.Net.CountRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_count
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-count.html</para>	
            </summary>
            <param name="index">A comma-separated list of indices to restrict the results</param>
            <param name="type">A comma-separated list of types to restrict the results</param>
            <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CountAsync``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.CountRequestParameters,Elasticsearch.Net.CountRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_count
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-count.html</para>	
            </summary>
            <param name="index">A comma-separated list of indices to restrict the results</param>
            <param name="type">A comma-separated list of types to restrict the results</param>
            <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.Count(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.CountRequestParameters,Elasticsearch.Net.CountRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_count
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-count.html</para>	
            </summary>
            <param name="index">A comma-separated list of indices to restrict the results</param>
            <param name="type">A comma-separated list of types to restrict the results</param>
            <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CountAsync(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.CountRequestParameters,Elasticsearch.Net.CountRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_count
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-count.html</para>	
            </summary>
            <param name="index">A comma-separated list of indices to restrict the results</param>
            <param name="type">A comma-separated list of types to restrict the results</param>
            <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CountGet``1(System.Func{Elasticsearch.Net.CountRequestParameters,Elasticsearch.Net.CountRequestParameters})">
            <summary>Represents a GET on /_count
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-count.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CountGetAsync``1(System.Func{Elasticsearch.Net.CountRequestParameters,Elasticsearch.Net.CountRequestParameters})">
            <summary>Represents a GET on /_count
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-count.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CountGet(System.Func{Elasticsearch.Net.CountRequestParameters,Elasticsearch.Net.CountRequestParameters})">
            <summary>Represents a GET on /_count
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-count.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CountGetAsync(System.Func{Elasticsearch.Net.CountRequestParameters,Elasticsearch.Net.CountRequestParameters})">
            <summary>Represents a GET on /_count
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-count.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CountGet``1(System.String,System.Func{Elasticsearch.Net.CountRequestParameters,Elasticsearch.Net.CountRequestParameters})">
            <summary>Represents a GET on /{index}/_count
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-count.html</para>	
            </summary>
            <param name="index">A comma-separated list of indices to restrict the results</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CountGetAsync``1(System.String,System.Func{Elasticsearch.Net.CountRequestParameters,Elasticsearch.Net.CountRequestParameters})">
            <summary>Represents a GET on /{index}/_count
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-count.html</para>	
            </summary>
            <param name="index">A comma-separated list of indices to restrict the results</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CountGet(System.String,System.Func{Elasticsearch.Net.CountRequestParameters,Elasticsearch.Net.CountRequestParameters})">
            <summary>Represents a GET on /{index}/_count
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-count.html</para>	
            </summary>
            <param name="index">A comma-separated list of indices to restrict the results</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CountGetAsync(System.String,System.Func{Elasticsearch.Net.CountRequestParameters,Elasticsearch.Net.CountRequestParameters})">
            <summary>Represents a GET on /{index}/_count
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-count.html</para>	
            </summary>
            <param name="index">A comma-separated list of indices to restrict the results</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CountGet``1(System.String,System.String,System.Func{Elasticsearch.Net.CountRequestParameters,Elasticsearch.Net.CountRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_count
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-count.html</para>	
            </summary>
            <param name="index">A comma-separated list of indices to restrict the results</param>
            <param name="type">A comma-separated list of types to restrict the results</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CountGetAsync``1(System.String,System.String,System.Func{Elasticsearch.Net.CountRequestParameters,Elasticsearch.Net.CountRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_count
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-count.html</para>	
            </summary>
            <param name="index">A comma-separated list of indices to restrict the results</param>
            <param name="type">A comma-separated list of types to restrict the results</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CountGet(System.String,System.String,System.Func{Elasticsearch.Net.CountRequestParameters,Elasticsearch.Net.CountRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_count
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-count.html</para>	
            </summary>
            <param name="index">A comma-separated list of indices to restrict the results</param>
            <param name="type">A comma-separated list of types to restrict the results</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CountGetAsync(System.String,System.String,System.Func{Elasticsearch.Net.CountRequestParameters,Elasticsearch.Net.CountRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_count
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-count.html</para>	
            </summary>
            <param name="index">A comma-separated list of indices to restrict the results</param>
            <param name="type">A comma-separated list of types to restrict the results</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CountPercolateGet``1(System.String,System.String,System.Func{Elasticsearch.Net.PercolateCountRequestParameters,Elasticsearch.Net.PercolateCountRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_percolate/count
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being count percolated.</param>
            <param name="type">The type of the document being count percolated.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CountPercolateGetAsync``1(System.String,System.String,System.Func{Elasticsearch.Net.PercolateCountRequestParameters,Elasticsearch.Net.PercolateCountRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_percolate/count
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being count percolated.</param>
            <param name="type">The type of the document being count percolated.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CountPercolateGet(System.String,System.String,System.Func{Elasticsearch.Net.PercolateCountRequestParameters,Elasticsearch.Net.PercolateCountRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_percolate/count
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being count percolated.</param>
            <param name="type">The type of the document being count percolated.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CountPercolateGetAsync(System.String,System.String,System.Func{Elasticsearch.Net.PercolateCountRequestParameters,Elasticsearch.Net.PercolateCountRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_percolate/count
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being count percolated.</param>
            <param name="type">The type of the document being count percolated.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CountPercolateGet``1(System.String,System.String,System.String,System.Func{Elasticsearch.Net.PercolateCountRequestParameters,Elasticsearch.Net.PercolateCountRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/{id}/_percolate/count
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being count percolated.</param>
            <param name="type">The type of the document being count percolated.</param>
            <param name="id">Substitute the document in the request body with a document that is known by the specified id. On top of the id, the index and type parameter will be used to retrieve the document from within the cluster.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CountPercolateGetAsync``1(System.String,System.String,System.String,System.Func{Elasticsearch.Net.PercolateCountRequestParameters,Elasticsearch.Net.PercolateCountRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/{id}/_percolate/count
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being count percolated.</param>
            <param name="type">The type of the document being count percolated.</param>
            <param name="id">Substitute the document in the request body with a document that is known by the specified id. On top of the id, the index and type parameter will be used to retrieve the document from within the cluster.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CountPercolateGet(System.String,System.String,System.String,System.Func{Elasticsearch.Net.PercolateCountRequestParameters,Elasticsearch.Net.PercolateCountRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/{id}/_percolate/count
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being count percolated.</param>
            <param name="type">The type of the document being count percolated.</param>
            <param name="id">Substitute the document in the request body with a document that is known by the specified id. On top of the id, the index and type parameter will be used to retrieve the document from within the cluster.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CountPercolateGetAsync(System.String,System.String,System.String,System.Func{Elasticsearch.Net.PercolateCountRequestParameters,Elasticsearch.Net.PercolateCountRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/{id}/_percolate/count
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being count percolated.</param>
            <param name="type">The type of the document being count percolated.</param>
            <param name="id">Substitute the document in the request body with a document that is known by the specified id. On top of the id, the index and type parameter will be used to retrieve the document from within the cluster.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CountPercolate``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.PercolateCountRequestParameters,Elasticsearch.Net.PercolateCountRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_percolate/count
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being count percolated.</param>
            <param name="type">The type of the document being count percolated.</param>
            <param name="body">The count percolator request definition using the percolate DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CountPercolateAsync``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.PercolateCountRequestParameters,Elasticsearch.Net.PercolateCountRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_percolate/count
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being count percolated.</param>
            <param name="type">The type of the document being count percolated.</param>
            <param name="body">The count percolator request definition using the percolate DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CountPercolate(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.PercolateCountRequestParameters,Elasticsearch.Net.PercolateCountRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_percolate/count
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being count percolated.</param>
            <param name="type">The type of the document being count percolated.</param>
            <param name="body">The count percolator request definition using the percolate DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CountPercolateAsync(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.PercolateCountRequestParameters,Elasticsearch.Net.PercolateCountRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_percolate/count
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being count percolated.</param>
            <param name="type">The type of the document being count percolated.</param>
            <param name="body">The count percolator request definition using the percolate DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CountPercolate``1(System.String,System.String,System.String,System.Object,System.Func{Elasticsearch.Net.PercolateCountRequestParameters,Elasticsearch.Net.PercolateCountRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/{id}/_percolate/count
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being count percolated.</param>
            <param name="type">The type of the document being count percolated.</param>
            <param name="id">Substitute the document in the request body with a document that is known by the specified id. On top of the id, the index and type parameter will be used to retrieve the document from within the cluster.</param>
            <param name="body">The count percolator request definition using the percolate DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CountPercolateAsync``1(System.String,System.String,System.String,System.Object,System.Func{Elasticsearch.Net.PercolateCountRequestParameters,Elasticsearch.Net.PercolateCountRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/{id}/_percolate/count
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being count percolated.</param>
            <param name="type">The type of the document being count percolated.</param>
            <param name="id">Substitute the document in the request body with a document that is known by the specified id. On top of the id, the index and type parameter will be used to retrieve the document from within the cluster.</param>
            <param name="body">The count percolator request definition using the percolate DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CountPercolate(System.String,System.String,System.String,System.Object,System.Func{Elasticsearch.Net.PercolateCountRequestParameters,Elasticsearch.Net.PercolateCountRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/{id}/_percolate/count
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being count percolated.</param>
            <param name="type">The type of the document being count percolated.</param>
            <param name="id">Substitute the document in the request body with a document that is known by the specified id. On top of the id, the index and type parameter will be used to retrieve the document from within the cluster.</param>
            <param name="body">The count percolator request definition using the percolate DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.CountPercolateAsync(System.String,System.String,System.String,System.Object,System.Func{Elasticsearch.Net.PercolateCountRequestParameters,Elasticsearch.Net.PercolateCountRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/{id}/_percolate/count
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being count percolated.</param>
            <param name="type">The type of the document being count percolated.</param>
            <param name="id">Substitute the document in the request body with a document that is known by the specified id. On top of the id, the index and type parameter will be used to retrieve the document from within the cluster.</param>
            <param name="body">The count percolator request definition using the percolate DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.Delete``1(System.String,System.String,System.String,System.Func{Elasticsearch.Net.DeleteRequestParameters,Elasticsearch.Net.DeleteRequestParameters})">
            <summary>Represents a DELETE on /{index}/{type}/{id}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-delete.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="id">The document ID</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.DeleteAsync``1(System.String,System.String,System.String,System.Func{Elasticsearch.Net.DeleteRequestParameters,Elasticsearch.Net.DeleteRequestParameters})">
            <summary>Represents a DELETE on /{index}/{type}/{id}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-delete.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="id">The document ID</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.Delete(System.String,System.String,System.String,System.Func{Elasticsearch.Net.DeleteRequestParameters,Elasticsearch.Net.DeleteRequestParameters})">
            <summary>Represents a DELETE on /{index}/{type}/{id}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-delete.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="id">The document ID</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.DeleteAsync(System.String,System.String,System.String,System.Func{Elasticsearch.Net.DeleteRequestParameters,Elasticsearch.Net.DeleteRequestParameters})">
            <summary>Represents a DELETE on /{index}/{type}/{id}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-delete.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="id">The document ID</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.DeleteByQuery``1(System.String,System.Object,System.Func{Elasticsearch.Net.DeleteByQueryRequestParameters,Elasticsearch.Net.DeleteByQueryRequestParameters})">
            <summary>Represents a DELETE on /{index}/_query
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-delete-by-query.html</para>	
            </summary>
            <param name="index">A comma-separated list of indices to restrict the operation; use `_all` to perform the operation on all indices</param>
            <param name="body">A query to restrict the operation specified with the Query DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.DeleteByQueryAsync``1(System.String,System.Object,System.Func{Elasticsearch.Net.DeleteByQueryRequestParameters,Elasticsearch.Net.DeleteByQueryRequestParameters})">
            <summary>Represents a DELETE on /{index}/_query
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-delete-by-query.html</para>	
            </summary>
            <param name="index">A comma-separated list of indices to restrict the operation; use `_all` to perform the operation on all indices</param>
            <param name="body">A query to restrict the operation specified with the Query DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.DeleteByQuery(System.String,System.Object,System.Func{Elasticsearch.Net.DeleteByQueryRequestParameters,Elasticsearch.Net.DeleteByQueryRequestParameters})">
            <summary>Represents a DELETE on /{index}/_query
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-delete-by-query.html</para>	
            </summary>
            <param name="index">A comma-separated list of indices to restrict the operation; use `_all` to perform the operation on all indices</param>
            <param name="body">A query to restrict the operation specified with the Query DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.DeleteByQueryAsync(System.String,System.Object,System.Func{Elasticsearch.Net.DeleteByQueryRequestParameters,Elasticsearch.Net.DeleteByQueryRequestParameters})">
            <summary>Represents a DELETE on /{index}/_query
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-delete-by-query.html</para>	
            </summary>
            <param name="index">A comma-separated list of indices to restrict the operation; use `_all` to perform the operation on all indices</param>
            <param name="body">A query to restrict the operation specified with the Query DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.DeleteByQuery``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.DeleteByQueryRequestParameters,Elasticsearch.Net.DeleteByQueryRequestParameters})">
            <summary>Represents a DELETE on /{index}/{type}/_query
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-delete-by-query.html</para>	
            </summary>
            <param name="index">A comma-separated list of indices to restrict the operation; use `_all` to perform the operation on all indices</param>
            <param name="type">A comma-separated list of types to restrict the operation</param>
            <param name="body">A query to restrict the operation specified with the Query DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.DeleteByQueryAsync``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.DeleteByQueryRequestParameters,Elasticsearch.Net.DeleteByQueryRequestParameters})">
            <summary>Represents a DELETE on /{index}/{type}/_query
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-delete-by-query.html</para>	
            </summary>
            <param name="index">A comma-separated list of indices to restrict the operation; use `_all` to perform the operation on all indices</param>
            <param name="type">A comma-separated list of types to restrict the operation</param>
            <param name="body">A query to restrict the operation specified with the Query DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.DeleteByQuery(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.DeleteByQueryRequestParameters,Elasticsearch.Net.DeleteByQueryRequestParameters})">
            <summary>Represents a DELETE on /{index}/{type}/_query
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-delete-by-query.html</para>	
            </summary>
            <param name="index">A comma-separated list of indices to restrict the operation; use `_all` to perform the operation on all indices</param>
            <param name="type">A comma-separated list of types to restrict the operation</param>
            <param name="body">A query to restrict the operation specified with the Query DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.DeleteByQueryAsync(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.DeleteByQueryRequestParameters,Elasticsearch.Net.DeleteByQueryRequestParameters})">
            <summary>Represents a DELETE on /{index}/{type}/_query
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-delete-by-query.html</para>	
            </summary>
            <param name="index">A comma-separated list of indices to restrict the operation; use `_all` to perform the operation on all indices</param>
            <param name="type">A comma-separated list of types to restrict the operation</param>
            <param name="body">A query to restrict the operation specified with the Query DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.Exists``1(System.String,System.String,System.String,System.Func{Elasticsearch.Net.DocumentExistsRequestParameters,Elasticsearch.Net.DocumentExistsRequestParameters})">
            <summary>Represents a HEAD on /{index}/{type}/{id}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-get.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document (use `_all` to fetch the first document matching the ID across all types)</param>
            <param name="id">The document ID</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.ExistsAsync``1(System.String,System.String,System.String,System.Func{Elasticsearch.Net.DocumentExistsRequestParameters,Elasticsearch.Net.DocumentExistsRequestParameters})">
            <summary>Represents a HEAD on /{index}/{type}/{id}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-get.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document (use `_all` to fetch the first document matching the ID across all types)</param>
            <param name="id">The document ID</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.Exists(System.String,System.String,System.String,System.Func{Elasticsearch.Net.DocumentExistsRequestParameters,Elasticsearch.Net.DocumentExistsRequestParameters})">
            <summary>Represents a HEAD on /{index}/{type}/{id}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-get.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document (use `_all` to fetch the first document matching the ID across all types)</param>
            <param name="id">The document ID</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.ExistsAsync(System.String,System.String,System.String,System.Func{Elasticsearch.Net.DocumentExistsRequestParameters,Elasticsearch.Net.DocumentExistsRequestParameters})">
            <summary>Represents a HEAD on /{index}/{type}/{id}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-get.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document (use `_all` to fetch the first document matching the ID across all types)</param>
            <param name="id">The document ID</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.ExplainGet``1(System.String,System.String,System.String,System.Func{Elasticsearch.Net.ExplainRequestParameters,Elasticsearch.Net.ExplainRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/{id}/_explain
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-explain.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="id">The document ID</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.ExplainGetAsync``1(System.String,System.String,System.String,System.Func{Elasticsearch.Net.ExplainRequestParameters,Elasticsearch.Net.ExplainRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/{id}/_explain
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-explain.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="id">The document ID</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.ExplainGet(System.String,System.String,System.String,System.Func{Elasticsearch.Net.ExplainRequestParameters,Elasticsearch.Net.ExplainRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/{id}/_explain
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-explain.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="id">The document ID</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.ExplainGetAsync(System.String,System.String,System.String,System.Func{Elasticsearch.Net.ExplainRequestParameters,Elasticsearch.Net.ExplainRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/{id}/_explain
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-explain.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="id">The document ID</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.Explain``1(System.String,System.String,System.String,System.Object,System.Func{Elasticsearch.Net.ExplainRequestParameters,Elasticsearch.Net.ExplainRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/{id}/_explain
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-explain.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="id">The document ID</param>
            <param name="body">The query definition using the Query DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.ExplainAsync``1(System.String,System.String,System.String,System.Object,System.Func{Elasticsearch.Net.ExplainRequestParameters,Elasticsearch.Net.ExplainRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/{id}/_explain
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-explain.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="id">The document ID</param>
            <param name="body">The query definition using the Query DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.Explain(System.String,System.String,System.String,System.Object,System.Func{Elasticsearch.Net.ExplainRequestParameters,Elasticsearch.Net.ExplainRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/{id}/_explain
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-explain.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="id">The document ID</param>
            <param name="body">The query definition using the Query DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.ExplainAsync(System.String,System.String,System.String,System.Object,System.Func{Elasticsearch.Net.ExplainRequestParameters,Elasticsearch.Net.ExplainRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/{id}/_explain
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-explain.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="id">The document ID</param>
            <param name="body">The query definition using the Query DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.Get``1(System.String,System.String,System.String,System.Func{Elasticsearch.Net.GetRequestParameters,Elasticsearch.Net.GetRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/{id}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-get.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document (use `_all` to fetch the first document matching the ID across all types)</param>
            <param name="id">The document ID</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.GetAsync``1(System.String,System.String,System.String,System.Func{Elasticsearch.Net.GetRequestParameters,Elasticsearch.Net.GetRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/{id}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-get.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document (use `_all` to fetch the first document matching the ID across all types)</param>
            <param name="id">The document ID</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.Get(System.String,System.String,System.String,System.Func{Elasticsearch.Net.GetRequestParameters,Elasticsearch.Net.GetRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/{id}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-get.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document (use `_all` to fetch the first document matching the ID across all types)</param>
            <param name="id">The document ID</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.GetAsync(System.String,System.String,System.String,System.Func{Elasticsearch.Net.GetRequestParameters,Elasticsearch.Net.GetRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/{id}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-get.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document (use `_all` to fetch the first document matching the ID across all types)</param>
            <param name="id">The document ID</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.GetSource``1(System.String,System.String,System.String,System.Func{Elasticsearch.Net.SourceRequestParameters,Elasticsearch.Net.SourceRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/{id}/_source
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-get.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document; use `_all` to fetch the first document matching the ID across all types</param>
            <param name="id">The document ID</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.GetSourceAsync``1(System.String,System.String,System.String,System.Func{Elasticsearch.Net.SourceRequestParameters,Elasticsearch.Net.SourceRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/{id}/_source
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-get.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document; use `_all` to fetch the first document matching the ID across all types</param>
            <param name="id">The document ID</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.GetSource(System.String,System.String,System.String,System.Func{Elasticsearch.Net.SourceRequestParameters,Elasticsearch.Net.SourceRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/{id}/_source
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-get.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document; use `_all` to fetch the first document matching the ID across all types</param>
            <param name="id">The document ID</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.GetSourceAsync(System.String,System.String,System.String,System.Func{Elasticsearch.Net.SourceRequestParameters,Elasticsearch.Net.SourceRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/{id}/_source
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-get.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document; use `_all` to fetch the first document matching the ID across all types</param>
            <param name="id">The document ID</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.Index``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.IndexRequestParameters,Elasticsearch.Net.IndexRequestParameters})">
            <summary>Represents a POST on /{index}/{type}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-index_.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="body">The document</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndexAsync``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.IndexRequestParameters,Elasticsearch.Net.IndexRequestParameters})">
            <summary>Represents a POST on /{index}/{type}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-index_.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="body">The document</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.Index(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.IndexRequestParameters,Elasticsearch.Net.IndexRequestParameters})">
            <summary>Represents a POST on /{index}/{type}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-index_.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="body">The document</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndexAsync(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.IndexRequestParameters,Elasticsearch.Net.IndexRequestParameters})">
            <summary>Represents a POST on /{index}/{type}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-index_.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="body">The document</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.Index``1(System.String,System.String,System.String,System.Object,System.Func{Elasticsearch.Net.IndexRequestParameters,Elasticsearch.Net.IndexRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/{id}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-index_.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="id">Document ID</param>
            <param name="body">The document</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndexAsync``1(System.String,System.String,System.String,System.Object,System.Func{Elasticsearch.Net.IndexRequestParameters,Elasticsearch.Net.IndexRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/{id}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-index_.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="id">Document ID</param>
            <param name="body">The document</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.Index(System.String,System.String,System.String,System.Object,System.Func{Elasticsearch.Net.IndexRequestParameters,Elasticsearch.Net.IndexRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/{id}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-index_.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="id">Document ID</param>
            <param name="body">The document</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndexAsync(System.String,System.String,System.String,System.Object,System.Func{Elasticsearch.Net.IndexRequestParameters,Elasticsearch.Net.IndexRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/{id}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-index_.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="id">Document ID</param>
            <param name="body">The document</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndexPut``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.IndexRequestParameters,Elasticsearch.Net.IndexRequestParameters})">
            <summary>Represents a PUT on /{index}/{type}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-index_.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="body">The document</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndexPutAsync``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.IndexRequestParameters,Elasticsearch.Net.IndexRequestParameters})">
            <summary>Represents a PUT on /{index}/{type}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-index_.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="body">The document</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndexPut(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.IndexRequestParameters,Elasticsearch.Net.IndexRequestParameters})">
            <summary>Represents a PUT on /{index}/{type}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-index_.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="body">The document</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndexPutAsync(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.IndexRequestParameters,Elasticsearch.Net.IndexRequestParameters})">
            <summary>Represents a PUT on /{index}/{type}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-index_.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="body">The document</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndexPut``1(System.String,System.String,System.String,System.Object,System.Func{Elasticsearch.Net.IndexRequestParameters,Elasticsearch.Net.IndexRequestParameters})">
            <summary>Represents a PUT on /{index}/{type}/{id}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-index_.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="id">Document ID</param>
            <param name="body">The document</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndexPutAsync``1(System.String,System.String,System.String,System.Object,System.Func{Elasticsearch.Net.IndexRequestParameters,Elasticsearch.Net.IndexRequestParameters})">
            <summary>Represents a PUT on /{index}/{type}/{id}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-index_.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="id">Document ID</param>
            <param name="body">The document</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndexPut(System.String,System.String,System.String,System.Object,System.Func{Elasticsearch.Net.IndexRequestParameters,Elasticsearch.Net.IndexRequestParameters})">
            <summary>Represents a PUT on /{index}/{type}/{id}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-index_.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="id">Document ID</param>
            <param name="body">The document</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndexPutAsync(System.String,System.String,System.String,System.Object,System.Func{Elasticsearch.Net.IndexRequestParameters,Elasticsearch.Net.IndexRequestParameters})">
            <summary>Represents a PUT on /{index}/{type}/{id}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-index_.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="id">Document ID</param>
            <param name="body">The document</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesAnalyzeGetForAll``1(System.Func{Elasticsearch.Net.AnalyzeRequestParameters,Elasticsearch.Net.AnalyzeRequestParameters})">
            <summary>Represents a GET on /_analyze
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-analyze.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesAnalyzeGetForAllAsync``1(System.Func{Elasticsearch.Net.AnalyzeRequestParameters,Elasticsearch.Net.AnalyzeRequestParameters})">
            <summary>Represents a GET on /_analyze
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-analyze.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesAnalyzeGetForAll(System.Func{Elasticsearch.Net.AnalyzeRequestParameters,Elasticsearch.Net.AnalyzeRequestParameters})">
            <summary>Represents a GET on /_analyze
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-analyze.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesAnalyzeGetForAllAsync(System.Func{Elasticsearch.Net.AnalyzeRequestParameters,Elasticsearch.Net.AnalyzeRequestParameters})">
            <summary>Represents a GET on /_analyze
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-analyze.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesAnalyzeGet``1(System.String,System.Func{Elasticsearch.Net.AnalyzeRequestParameters,Elasticsearch.Net.AnalyzeRequestParameters})">
            <summary>Represents a GET on /{index}/_analyze
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-analyze.html</para>	
            </summary>
            <param name="index">The name of the index to scope the operation</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesAnalyzeGetAsync``1(System.String,System.Func{Elasticsearch.Net.AnalyzeRequestParameters,Elasticsearch.Net.AnalyzeRequestParameters})">
            <summary>Represents a GET on /{index}/_analyze
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-analyze.html</para>	
            </summary>
            <param name="index">The name of the index to scope the operation</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesAnalyzeGet(System.String,System.Func{Elasticsearch.Net.AnalyzeRequestParameters,Elasticsearch.Net.AnalyzeRequestParameters})">
            <summary>Represents a GET on /{index}/_analyze
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-analyze.html</para>	
            </summary>
            <param name="index">The name of the index to scope the operation</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesAnalyzeGetAsync(System.String,System.Func{Elasticsearch.Net.AnalyzeRequestParameters,Elasticsearch.Net.AnalyzeRequestParameters})">
            <summary>Represents a GET on /{index}/_analyze
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-analyze.html</para>	
            </summary>
            <param name="index">The name of the index to scope the operation</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesAnalyzeForAll``1(System.Object,System.Func{Elasticsearch.Net.AnalyzeRequestParameters,Elasticsearch.Net.AnalyzeRequestParameters})">
            <summary>Represents a POST on /_analyze
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-analyze.html</para>	
            </summary>
            <param name="body">The text on which the analysis should be performed</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesAnalyzeForAllAsync``1(System.Object,System.Func{Elasticsearch.Net.AnalyzeRequestParameters,Elasticsearch.Net.AnalyzeRequestParameters})">
            <summary>Represents a POST on /_analyze
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-analyze.html</para>	
            </summary>
            <param name="body">The text on which the analysis should be performed</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesAnalyzeForAll(System.Object,System.Func{Elasticsearch.Net.AnalyzeRequestParameters,Elasticsearch.Net.AnalyzeRequestParameters})">
            <summary>Represents a POST on /_analyze
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-analyze.html</para>	
            </summary>
            <param name="body">The text on which the analysis should be performed</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesAnalyzeForAllAsync(System.Object,System.Func{Elasticsearch.Net.AnalyzeRequestParameters,Elasticsearch.Net.AnalyzeRequestParameters})">
            <summary>Represents a POST on /_analyze
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-analyze.html</para>	
            </summary>
            <param name="body">The text on which the analysis should be performed</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesAnalyze``1(System.String,System.Object,System.Func{Elasticsearch.Net.AnalyzeRequestParameters,Elasticsearch.Net.AnalyzeRequestParameters})">
            <summary>Represents a POST on /{index}/_analyze
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-analyze.html</para>	
            </summary>
            <param name="index">The name of the index to scope the operation</param>
            <param name="body">The text on which the analysis should be performed</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesAnalyzeAsync``1(System.String,System.Object,System.Func{Elasticsearch.Net.AnalyzeRequestParameters,Elasticsearch.Net.AnalyzeRequestParameters})">
            <summary>Represents a POST on /{index}/_analyze
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-analyze.html</para>	
            </summary>
            <param name="index">The name of the index to scope the operation</param>
            <param name="body">The text on which the analysis should be performed</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesAnalyze(System.String,System.Object,System.Func{Elasticsearch.Net.AnalyzeRequestParameters,Elasticsearch.Net.AnalyzeRequestParameters})">
            <summary>Represents a POST on /{index}/_analyze
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-analyze.html</para>	
            </summary>
            <param name="index">The name of the index to scope the operation</param>
            <param name="body">The text on which the analysis should be performed</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesAnalyzeAsync(System.String,System.Object,System.Func{Elasticsearch.Net.AnalyzeRequestParameters,Elasticsearch.Net.AnalyzeRequestParameters})">
            <summary>Represents a POST on /{index}/_analyze
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-analyze.html</para>	
            </summary>
            <param name="index">The name of the index to scope the operation</param>
            <param name="body">The text on which the analysis should be performed</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesClearCacheForAll``1(System.Func{Elasticsearch.Net.ClearCacheRequestParameters,Elasticsearch.Net.ClearCacheRequestParameters})">
            <summary>Represents a POST on /_cache/clear
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-clearcache.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesClearCacheForAllAsync``1(System.Func{Elasticsearch.Net.ClearCacheRequestParameters,Elasticsearch.Net.ClearCacheRequestParameters})">
            <summary>Represents a POST on /_cache/clear
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-clearcache.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesClearCacheForAll(System.Func{Elasticsearch.Net.ClearCacheRequestParameters,Elasticsearch.Net.ClearCacheRequestParameters})">
            <summary>Represents a POST on /_cache/clear
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-clearcache.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesClearCacheForAllAsync(System.Func{Elasticsearch.Net.ClearCacheRequestParameters,Elasticsearch.Net.ClearCacheRequestParameters})">
            <summary>Represents a POST on /_cache/clear
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-clearcache.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesClearCache``1(System.String,System.Func{Elasticsearch.Net.ClearCacheRequestParameters,Elasticsearch.Net.ClearCacheRequestParameters})">
            <summary>Represents a POST on /{index}/_cache/clear
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-clearcache.html</para>	
            </summary>
            <param name="index">A comma-separated list of index name to limit the operation</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesClearCacheAsync``1(System.String,System.Func{Elasticsearch.Net.ClearCacheRequestParameters,Elasticsearch.Net.ClearCacheRequestParameters})">
            <summary>Represents a POST on /{index}/_cache/clear
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-clearcache.html</para>	
            </summary>
            <param name="index">A comma-separated list of index name to limit the operation</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesClearCache(System.String,System.Func{Elasticsearch.Net.ClearCacheRequestParameters,Elasticsearch.Net.ClearCacheRequestParameters})">
            <summary>Represents a POST on /{index}/_cache/clear
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-clearcache.html</para>	
            </summary>
            <param name="index">A comma-separated list of index name to limit the operation</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesClearCacheAsync(System.String,System.Func{Elasticsearch.Net.ClearCacheRequestParameters,Elasticsearch.Net.ClearCacheRequestParameters})">
            <summary>Represents a POST on /{index}/_cache/clear
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-clearcache.html</para>	
            </summary>
            <param name="index">A comma-separated list of index name to limit the operation</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesClearCacheGetForAll``1(System.Func{Elasticsearch.Net.ClearCacheRequestParameters,Elasticsearch.Net.ClearCacheRequestParameters})">
            <summary>Represents a GET on /_cache/clear
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-clearcache.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesClearCacheGetForAllAsync``1(System.Func{Elasticsearch.Net.ClearCacheRequestParameters,Elasticsearch.Net.ClearCacheRequestParameters})">
            <summary>Represents a GET on /_cache/clear
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-clearcache.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesClearCacheGetForAll(System.Func{Elasticsearch.Net.ClearCacheRequestParameters,Elasticsearch.Net.ClearCacheRequestParameters})">
            <summary>Represents a GET on /_cache/clear
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-clearcache.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesClearCacheGetForAllAsync(System.Func{Elasticsearch.Net.ClearCacheRequestParameters,Elasticsearch.Net.ClearCacheRequestParameters})">
            <summary>Represents a GET on /_cache/clear
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-clearcache.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesClearCacheGet``1(System.String,System.Func{Elasticsearch.Net.ClearCacheRequestParameters,Elasticsearch.Net.ClearCacheRequestParameters})">
            <summary>Represents a GET on /{index}/_cache/clear
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-clearcache.html</para>	
            </summary>
            <param name="index">A comma-separated list of index name to limit the operation</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesClearCacheGetAsync``1(System.String,System.Func{Elasticsearch.Net.ClearCacheRequestParameters,Elasticsearch.Net.ClearCacheRequestParameters})">
            <summary>Represents a GET on /{index}/_cache/clear
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-clearcache.html</para>	
            </summary>
            <param name="index">A comma-separated list of index name to limit the operation</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesClearCacheGet(System.String,System.Func{Elasticsearch.Net.ClearCacheRequestParameters,Elasticsearch.Net.ClearCacheRequestParameters})">
            <summary>Represents a GET on /{index}/_cache/clear
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-clearcache.html</para>	
            </summary>
            <param name="index">A comma-separated list of index name to limit the operation</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesClearCacheGetAsync(System.String,System.Func{Elasticsearch.Net.ClearCacheRequestParameters,Elasticsearch.Net.ClearCacheRequestParameters})">
            <summary>Represents a GET on /{index}/_cache/clear
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-clearcache.html</para>	
            </summary>
            <param name="index">A comma-separated list of index name to limit the operation</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesClose``1(System.String,System.Func{Elasticsearch.Net.CloseIndexRequestParameters,Elasticsearch.Net.CloseIndexRequestParameters})">
            <summary>Represents a POST on /{index}/_close
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-open-close.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesCloseAsync``1(System.String,System.Func{Elasticsearch.Net.CloseIndexRequestParameters,Elasticsearch.Net.CloseIndexRequestParameters})">
            <summary>Represents a POST on /{index}/_close
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-open-close.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesClose(System.String,System.Func{Elasticsearch.Net.CloseIndexRequestParameters,Elasticsearch.Net.CloseIndexRequestParameters})">
            <summary>Represents a POST on /{index}/_close
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-open-close.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesCloseAsync(System.String,System.Func{Elasticsearch.Net.CloseIndexRequestParameters,Elasticsearch.Net.CloseIndexRequestParameters})">
            <summary>Represents a POST on /{index}/_close
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-open-close.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesCreate``1(System.String,System.Object,System.Func{Elasticsearch.Net.CreateIndexRequestParameters,Elasticsearch.Net.CreateIndexRequestParameters})">
            <summary>Represents a PUT on /{index}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-create-index.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="body">The configuration for the index (`settings` and `mappings`)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesCreateAsync``1(System.String,System.Object,System.Func{Elasticsearch.Net.CreateIndexRequestParameters,Elasticsearch.Net.CreateIndexRequestParameters})">
            <summary>Represents a PUT on /{index}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-create-index.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="body">The configuration for the index (`settings` and `mappings`)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesCreate(System.String,System.Object,System.Func{Elasticsearch.Net.CreateIndexRequestParameters,Elasticsearch.Net.CreateIndexRequestParameters})">
            <summary>Represents a PUT on /{index}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-create-index.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="body">The configuration for the index (`settings` and `mappings`)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesCreateAsync(System.String,System.Object,System.Func{Elasticsearch.Net.CreateIndexRequestParameters,Elasticsearch.Net.CreateIndexRequestParameters})">
            <summary>Represents a PUT on /{index}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-create-index.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="body">The configuration for the index (`settings` and `mappings`)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesCreatePost``1(System.String,System.Object,System.Func{Elasticsearch.Net.CreateIndexRequestParameters,Elasticsearch.Net.CreateIndexRequestParameters})">
            <summary>Represents a POST on /{index}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-create-index.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="body">The configuration for the index (`settings` and `mappings`)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesCreatePostAsync``1(System.String,System.Object,System.Func{Elasticsearch.Net.CreateIndexRequestParameters,Elasticsearch.Net.CreateIndexRequestParameters})">
            <summary>Represents a POST on /{index}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-create-index.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="body">The configuration for the index (`settings` and `mappings`)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesCreatePost(System.String,System.Object,System.Func{Elasticsearch.Net.CreateIndexRequestParameters,Elasticsearch.Net.CreateIndexRequestParameters})">
            <summary>Represents a POST on /{index}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-create-index.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="body">The configuration for the index (`settings` and `mappings`)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesCreatePostAsync(System.String,System.Object,System.Func{Elasticsearch.Net.CreateIndexRequestParameters,Elasticsearch.Net.CreateIndexRequestParameters})">
            <summary>Represents a POST on /{index}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-create-index.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="body">The configuration for the index (`settings` and `mappings`)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesDelete``1(System.String,System.Func{Elasticsearch.Net.DeleteIndexRequestParameters,Elasticsearch.Net.DeleteIndexRequestParameters})">
            <summary>Represents a DELETE on /{index}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-delete-index.html</para>	
            </summary>
            <param name="index">A comma-separated list of indices to delete; use `_all` or `*` string to delete all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesDeleteAsync``1(System.String,System.Func{Elasticsearch.Net.DeleteIndexRequestParameters,Elasticsearch.Net.DeleteIndexRequestParameters})">
            <summary>Represents a DELETE on /{index}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-delete-index.html</para>	
            </summary>
            <param name="index">A comma-separated list of indices to delete; use `_all` or `*` string to delete all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesDelete(System.String,System.Func{Elasticsearch.Net.DeleteIndexRequestParameters,Elasticsearch.Net.DeleteIndexRequestParameters})">
            <summary>Represents a DELETE on /{index}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-delete-index.html</para>	
            </summary>
            <param name="index">A comma-separated list of indices to delete; use `_all` or `*` string to delete all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesDeleteAsync(System.String,System.Func{Elasticsearch.Net.DeleteIndexRequestParameters,Elasticsearch.Net.DeleteIndexRequestParameters})">
            <summary>Represents a DELETE on /{index}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-delete-index.html</para>	
            </summary>
            <param name="index">A comma-separated list of indices to delete; use `_all` or `*` string to delete all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesDeleteAlias``1(System.String,System.String,System.Func{Elasticsearch.Net.IndicesDeleteAliasRequestParameters,Elasticsearch.Net.IndicesDeleteAliasRequestParameters})">
            <summary>Represents a DELETE on /{index}/_alias/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names (supports wildcards); use `_all` for all indices</param>
            <param name="name">A comma-separated list of aliases to delete (supports wildcards); use `_all` to delete all aliases for the specified indices.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesDeleteAliasAsync``1(System.String,System.String,System.Func{Elasticsearch.Net.IndicesDeleteAliasRequestParameters,Elasticsearch.Net.IndicesDeleteAliasRequestParameters})">
            <summary>Represents a DELETE on /{index}/_alias/{name}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names (supports wildcards); use `_all` for all indices</param>
            <param name="name">A comma-separated list of aliases to delete (supports wildcards); use `_all` to delete all aliases for the specified indices.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesDeleteAlias(System.String,System.String,System.Func{Elasticsearch.Net.IndicesDeleteAliasRequestParameters,Elasticsearch.Net.IndicesDeleteAliasRequestParameters})">
            <summary>Represents a DELETE on /{index}/_alias/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names (supports wildcards); use `_all` for all indices</param>
            <param name="name">A comma-separated list of aliases to delete (supports wildcards); use `_all` to delete all aliases for the specified indices.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesDeleteAliasAsync(System.String,System.String,System.Func{Elasticsearch.Net.IndicesDeleteAliasRequestParameters,Elasticsearch.Net.IndicesDeleteAliasRequestParameters})">
            <summary>Represents a DELETE on /{index}/_alias/{name}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names (supports wildcards); use `_all` for all indices</param>
            <param name="name">A comma-separated list of aliases to delete (supports wildcards); use `_all` to delete all aliases for the specified indices.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesDeleteMapping``1(System.String,System.String,System.Func{Elasticsearch.Net.DeleteMappingRequestParameters,Elasticsearch.Net.DeleteMappingRequestParameters})">
            <summary>Represents a DELETE on /{index}/{type}/_mapping
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-delete-mapping.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names (supports wildcards); use `_all` for all indices</param>
            <param name="type">A comma-separated list of document types to delete (supports wildcards); use `_all` to delete all document types in the specified indices.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesDeleteMappingAsync``1(System.String,System.String,System.Func{Elasticsearch.Net.DeleteMappingRequestParameters,Elasticsearch.Net.DeleteMappingRequestParameters})">
            <summary>Represents a DELETE on /{index}/{type}/_mapping
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-delete-mapping.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names (supports wildcards); use `_all` for all indices</param>
            <param name="type">A comma-separated list of document types to delete (supports wildcards); use `_all` to delete all document types in the specified indices.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesDeleteMapping(System.String,System.String,System.Func{Elasticsearch.Net.DeleteMappingRequestParameters,Elasticsearch.Net.DeleteMappingRequestParameters})">
            <summary>Represents a DELETE on /{index}/{type}/_mapping
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-delete-mapping.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names (supports wildcards); use `_all` for all indices</param>
            <param name="type">A comma-separated list of document types to delete (supports wildcards); use `_all` to delete all document types in the specified indices.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesDeleteMappingAsync(System.String,System.String,System.Func{Elasticsearch.Net.DeleteMappingRequestParameters,Elasticsearch.Net.DeleteMappingRequestParameters})">
            <summary>Represents a DELETE on /{index}/{type}/_mapping
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-delete-mapping.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names (supports wildcards); use `_all` for all indices</param>
            <param name="type">A comma-separated list of document types to delete (supports wildcards); use `_all` to delete all document types in the specified indices.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesDeleteTemplateForAll``1(System.String,System.Func{Elasticsearch.Net.DeleteTemplateRequestParameters,Elasticsearch.Net.DeleteTemplateRequestParameters})">
            <summary>Represents a DELETE on /_template/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-templates.html</para>	
            </summary>
            <param name="name">The name of the template</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesDeleteTemplateForAllAsync``1(System.String,System.Func{Elasticsearch.Net.DeleteTemplateRequestParameters,Elasticsearch.Net.DeleteTemplateRequestParameters})">
            <summary>Represents a DELETE on /_template/{name}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-templates.html</para>	
            </summary>
            <param name="name">The name of the template</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesDeleteTemplateForAll(System.String,System.Func{Elasticsearch.Net.DeleteTemplateRequestParameters,Elasticsearch.Net.DeleteTemplateRequestParameters})">
            <summary>Represents a DELETE on /_template/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-templates.html</para>	
            </summary>
            <param name="name">The name of the template</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesDeleteTemplateForAllAsync(System.String,System.Func{Elasticsearch.Net.DeleteTemplateRequestParameters,Elasticsearch.Net.DeleteTemplateRequestParameters})">
            <summary>Represents a DELETE on /_template/{name}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-templates.html</para>	
            </summary>
            <param name="name">The name of the template</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesDeleteWarmer``1(System.String,System.String,System.Func{Elasticsearch.Net.DeleteWarmerRequestParameters,Elasticsearch.Net.DeleteWarmerRequestParameters})">
            <summary>Represents a DELETE on /{index}/_warmer/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to delete warmers from (supports wildcards); use `_all` to perform the operation on all indices.</param>
            <param name="name">A comma-separated list of warmer names to delete (supports wildcards); use `_all` to delete all warmers in the specified indices. You must specify a name either in the uri or in the parameters.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesDeleteWarmerAsync``1(System.String,System.String,System.Func{Elasticsearch.Net.DeleteWarmerRequestParameters,Elasticsearch.Net.DeleteWarmerRequestParameters})">
            <summary>Represents a DELETE on /{index}/_warmer/{name}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to delete warmers from (supports wildcards); use `_all` to perform the operation on all indices.</param>
            <param name="name">A comma-separated list of warmer names to delete (supports wildcards); use `_all` to delete all warmers in the specified indices. You must specify a name either in the uri or in the parameters.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesDeleteWarmer(System.String,System.String,System.Func{Elasticsearch.Net.DeleteWarmerRequestParameters,Elasticsearch.Net.DeleteWarmerRequestParameters})">
            <summary>Represents a DELETE on /{index}/_warmer/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to delete warmers from (supports wildcards); use `_all` to perform the operation on all indices.</param>
            <param name="name">A comma-separated list of warmer names to delete (supports wildcards); use `_all` to delete all warmers in the specified indices. You must specify a name either in the uri or in the parameters.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesDeleteWarmerAsync(System.String,System.String,System.Func{Elasticsearch.Net.DeleteWarmerRequestParameters,Elasticsearch.Net.DeleteWarmerRequestParameters})">
            <summary>Represents a DELETE on /{index}/_warmer/{name}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to delete warmers from (supports wildcards); use `_all` to perform the operation on all indices.</param>
            <param name="name">A comma-separated list of warmer names to delete (supports wildcards); use `_all` to delete all warmers in the specified indices. You must specify a name either in the uri or in the parameters.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesExists``1(System.String,System.Func{Elasticsearch.Net.IndexExistsRequestParameters,Elasticsearch.Net.IndexExistsRequestParameters})">
            <summary>Represents a HEAD on /{index}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-settings.html</para>	
            </summary>
            <param name="index">A comma-separated list of indices to check</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesExistsAsync``1(System.String,System.Func{Elasticsearch.Net.IndexExistsRequestParameters,Elasticsearch.Net.IndexExistsRequestParameters})">
            <summary>Represents a HEAD on /{index}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-settings.html</para>	
            </summary>
            <param name="index">A comma-separated list of indices to check</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesExists(System.String,System.Func{Elasticsearch.Net.IndexExistsRequestParameters,Elasticsearch.Net.IndexExistsRequestParameters})">
            <summary>Represents a HEAD on /{index}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-settings.html</para>	
            </summary>
            <param name="index">A comma-separated list of indices to check</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesExistsAsync(System.String,System.Func{Elasticsearch.Net.IndexExistsRequestParameters,Elasticsearch.Net.IndexExistsRequestParameters})">
            <summary>Represents a HEAD on /{index}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-settings.html</para>	
            </summary>
            <param name="index">A comma-separated list of indices to check</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesExistsAliasForAll``1(System.String,System.Func{Elasticsearch.Net.IndicesExistsAliasRequestParameters,Elasticsearch.Net.IndicesExistsAliasRequestParameters})">
            <summary>Represents a HEAD on /_alias/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="name">A comma-separated list of alias names to return</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesExistsAliasForAllAsync``1(System.String,System.Func{Elasticsearch.Net.IndicesExistsAliasRequestParameters,Elasticsearch.Net.IndicesExistsAliasRequestParameters})">
            <summary>Represents a HEAD on /_alias/{name}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="name">A comma-separated list of alias names to return</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesExistsAliasForAll(System.String,System.Func{Elasticsearch.Net.IndicesExistsAliasRequestParameters,Elasticsearch.Net.IndicesExistsAliasRequestParameters})">
            <summary>Represents a HEAD on /_alias/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="name">A comma-separated list of alias names to return</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesExistsAliasForAllAsync(System.String,System.Func{Elasticsearch.Net.IndicesExistsAliasRequestParameters,Elasticsearch.Net.IndicesExistsAliasRequestParameters})">
            <summary>Represents a HEAD on /_alias/{name}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="name">A comma-separated list of alias names to return</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesExistsAlias``1(System.String,System.String,System.Func{Elasticsearch.Net.IndicesExistsAliasRequestParameters,Elasticsearch.Net.IndicesExistsAliasRequestParameters})">
            <summary>Represents a HEAD on /{index}/_alias/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to filter aliases</param>
            <param name="name">A comma-separated list of alias names to return</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesExistsAliasAsync``1(System.String,System.String,System.Func{Elasticsearch.Net.IndicesExistsAliasRequestParameters,Elasticsearch.Net.IndicesExistsAliasRequestParameters})">
            <summary>Represents a HEAD on /{index}/_alias/{name}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to filter aliases</param>
            <param name="name">A comma-separated list of alias names to return</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesExistsAlias(System.String,System.String,System.Func{Elasticsearch.Net.IndicesExistsAliasRequestParameters,Elasticsearch.Net.IndicesExistsAliasRequestParameters})">
            <summary>Represents a HEAD on /{index}/_alias/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to filter aliases</param>
            <param name="name">A comma-separated list of alias names to return</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesExistsAliasAsync(System.String,System.String,System.Func{Elasticsearch.Net.IndicesExistsAliasRequestParameters,Elasticsearch.Net.IndicesExistsAliasRequestParameters})">
            <summary>Represents a HEAD on /{index}/_alias/{name}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to filter aliases</param>
            <param name="name">A comma-separated list of alias names to return</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesExistsAlias``1(System.String,System.Func{Elasticsearch.Net.IndicesExistsAliasRequestParameters,Elasticsearch.Net.IndicesExistsAliasRequestParameters})">
            <summary>Represents a HEAD on /{index}/_alias
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to filter aliases</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesExistsAliasAsync``1(System.String,System.Func{Elasticsearch.Net.IndicesExistsAliasRequestParameters,Elasticsearch.Net.IndicesExistsAliasRequestParameters})">
            <summary>Represents a HEAD on /{index}/_alias
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to filter aliases</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesExistsAlias(System.String,System.Func{Elasticsearch.Net.IndicesExistsAliasRequestParameters,Elasticsearch.Net.IndicesExistsAliasRequestParameters})">
            <summary>Represents a HEAD on /{index}/_alias
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to filter aliases</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesExistsAliasAsync(System.String,System.Func{Elasticsearch.Net.IndicesExistsAliasRequestParameters,Elasticsearch.Net.IndicesExistsAliasRequestParameters})">
            <summary>Represents a HEAD on /{index}/_alias
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to filter aliases</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesExistsTemplateForAll``1(System.String,System.Func{Elasticsearch.Net.IndicesExistsTemplateRequestParameters,Elasticsearch.Net.IndicesExistsTemplateRequestParameters})">
            <summary>Represents a HEAD on /_template/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-templates.html</para>	
            </summary>
            <param name="name">The name of the template</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesExistsTemplateForAllAsync``1(System.String,System.Func{Elasticsearch.Net.IndicesExistsTemplateRequestParameters,Elasticsearch.Net.IndicesExistsTemplateRequestParameters})">
            <summary>Represents a HEAD on /_template/{name}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-templates.html</para>	
            </summary>
            <param name="name">The name of the template</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesExistsTemplateForAll(System.String,System.Func{Elasticsearch.Net.IndicesExistsTemplateRequestParameters,Elasticsearch.Net.IndicesExistsTemplateRequestParameters})">
            <summary>Represents a HEAD on /_template/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-templates.html</para>	
            </summary>
            <param name="name">The name of the template</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesExistsTemplateForAllAsync(System.String,System.Func{Elasticsearch.Net.IndicesExistsTemplateRequestParameters,Elasticsearch.Net.IndicesExistsTemplateRequestParameters})">
            <summary>Represents a HEAD on /_template/{name}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-templates.html</para>	
            </summary>
            <param name="name">The name of the template</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesExistsType``1(System.String,System.String,System.Func{Elasticsearch.Net.IndicesExistsTypeRequestParameters,Elasticsearch.Net.IndicesExistsTypeRequestParameters})">
            <summary>Represents a HEAD on /{index}/{type}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-types-exists.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` to check the types across all indices</param>
            <param name="type">A comma-separated list of document types to check</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesExistsTypeAsync``1(System.String,System.String,System.Func{Elasticsearch.Net.IndicesExistsTypeRequestParameters,Elasticsearch.Net.IndicesExistsTypeRequestParameters})">
            <summary>Represents a HEAD on /{index}/{type}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-types-exists.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` to check the types across all indices</param>
            <param name="type">A comma-separated list of document types to check</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesExistsType(System.String,System.String,System.Func{Elasticsearch.Net.IndicesExistsTypeRequestParameters,Elasticsearch.Net.IndicesExistsTypeRequestParameters})">
            <summary>Represents a HEAD on /{index}/{type}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-types-exists.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` to check the types across all indices</param>
            <param name="type">A comma-separated list of document types to check</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesExistsTypeAsync(System.String,System.String,System.Func{Elasticsearch.Net.IndicesExistsTypeRequestParameters,Elasticsearch.Net.IndicesExistsTypeRequestParameters})">
            <summary>Represents a HEAD on /{index}/{type}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-types-exists.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` to check the types across all indices</param>
            <param name="type">A comma-separated list of document types to check</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesFlushForAll``1(System.Func{Elasticsearch.Net.FlushRequestParameters,Elasticsearch.Net.FlushRequestParameters})">
            <summary>Represents a POST on /_flush
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-flush.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesFlushForAllAsync``1(System.Func{Elasticsearch.Net.FlushRequestParameters,Elasticsearch.Net.FlushRequestParameters})">
            <summary>Represents a POST on /_flush
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-flush.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesFlushForAll(System.Func{Elasticsearch.Net.FlushRequestParameters,Elasticsearch.Net.FlushRequestParameters})">
            <summary>Represents a POST on /_flush
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-flush.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesFlushForAllAsync(System.Func{Elasticsearch.Net.FlushRequestParameters,Elasticsearch.Net.FlushRequestParameters})">
            <summary>Represents a POST on /_flush
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-flush.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesFlush``1(System.String,System.Func{Elasticsearch.Net.FlushRequestParameters,Elasticsearch.Net.FlushRequestParameters})">
            <summary>Represents a POST on /{index}/_flush
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-flush.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string for all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesFlushAsync``1(System.String,System.Func{Elasticsearch.Net.FlushRequestParameters,Elasticsearch.Net.FlushRequestParameters})">
            <summary>Represents a POST on /{index}/_flush
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-flush.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string for all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesFlush(System.String,System.Func{Elasticsearch.Net.FlushRequestParameters,Elasticsearch.Net.FlushRequestParameters})">
            <summary>Represents a POST on /{index}/_flush
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-flush.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string for all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesFlushAsync(System.String,System.Func{Elasticsearch.Net.FlushRequestParameters,Elasticsearch.Net.FlushRequestParameters})">
            <summary>Represents a POST on /{index}/_flush
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-flush.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string for all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesFlushGetForAll``1(System.Func{Elasticsearch.Net.FlushRequestParameters,Elasticsearch.Net.FlushRequestParameters})">
            <summary>Represents a GET on /_flush
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-flush.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesFlushGetForAllAsync``1(System.Func{Elasticsearch.Net.FlushRequestParameters,Elasticsearch.Net.FlushRequestParameters})">
            <summary>Represents a GET on /_flush
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-flush.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesFlushGetForAll(System.Func{Elasticsearch.Net.FlushRequestParameters,Elasticsearch.Net.FlushRequestParameters})">
            <summary>Represents a GET on /_flush
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-flush.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesFlushGetForAllAsync(System.Func{Elasticsearch.Net.FlushRequestParameters,Elasticsearch.Net.FlushRequestParameters})">
            <summary>Represents a GET on /_flush
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-flush.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesFlushGet``1(System.String,System.Func{Elasticsearch.Net.FlushRequestParameters,Elasticsearch.Net.FlushRequestParameters})">
            <summary>Represents a GET on /{index}/_flush
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-flush.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string for all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesFlushGetAsync``1(System.String,System.Func{Elasticsearch.Net.FlushRequestParameters,Elasticsearch.Net.FlushRequestParameters})">
            <summary>Represents a GET on /{index}/_flush
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-flush.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string for all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesFlushGet(System.String,System.Func{Elasticsearch.Net.FlushRequestParameters,Elasticsearch.Net.FlushRequestParameters})">
            <summary>Represents a GET on /{index}/_flush
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-flush.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string for all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesFlushGetAsync(System.String,System.Func{Elasticsearch.Net.FlushRequestParameters,Elasticsearch.Net.FlushRequestParameters})">
            <summary>Represents a GET on /{index}/_flush
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-flush.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string for all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetAliasForAll``1(System.Func{Elasticsearch.Net.GetAliasRequestParameters,Elasticsearch.Net.GetAliasRequestParameters})">
            <summary>Represents a GET on /_alias
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetAliasForAllAsync``1(System.Func{Elasticsearch.Net.GetAliasRequestParameters,Elasticsearch.Net.GetAliasRequestParameters})">
            <summary>Represents a GET on /_alias
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetAliasForAll(System.Func{Elasticsearch.Net.GetAliasRequestParameters,Elasticsearch.Net.GetAliasRequestParameters})">
            <summary>Represents a GET on /_alias
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetAliasForAllAsync(System.Func{Elasticsearch.Net.GetAliasRequestParameters,Elasticsearch.Net.GetAliasRequestParameters})">
            <summary>Represents a GET on /_alias
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetAliasForAll``1(System.String,System.Func{Elasticsearch.Net.GetAliasRequestParameters,Elasticsearch.Net.GetAliasRequestParameters})">
            <summary>Represents a GET on /_alias/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="name">A comma-separated list of alias names to return</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetAliasForAllAsync``1(System.String,System.Func{Elasticsearch.Net.GetAliasRequestParameters,Elasticsearch.Net.GetAliasRequestParameters})">
            <summary>Represents a GET on /_alias/{name}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="name">A comma-separated list of alias names to return</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetAliasForAll(System.String,System.Func{Elasticsearch.Net.GetAliasRequestParameters,Elasticsearch.Net.GetAliasRequestParameters})">
            <summary>Represents a GET on /_alias/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="name">A comma-separated list of alias names to return</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetAliasForAllAsync(System.String,System.Func{Elasticsearch.Net.GetAliasRequestParameters,Elasticsearch.Net.GetAliasRequestParameters})">
            <summary>Represents a GET on /_alias/{name}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="name">A comma-separated list of alias names to return</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetAlias``1(System.String,System.String,System.Func{Elasticsearch.Net.GetAliasRequestParameters,Elasticsearch.Net.GetAliasRequestParameters})">
            <summary>Represents a GET on /{index}/_alias/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to filter aliases</param>
            <param name="name">A comma-separated list of alias names to return</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetAliasAsync``1(System.String,System.String,System.Func{Elasticsearch.Net.GetAliasRequestParameters,Elasticsearch.Net.GetAliasRequestParameters})">
            <summary>Represents a GET on /{index}/_alias/{name}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to filter aliases</param>
            <param name="name">A comma-separated list of alias names to return</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetAlias(System.String,System.String,System.Func{Elasticsearch.Net.GetAliasRequestParameters,Elasticsearch.Net.GetAliasRequestParameters})">
            <summary>Represents a GET on /{index}/_alias/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to filter aliases</param>
            <param name="name">A comma-separated list of alias names to return</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetAliasAsync(System.String,System.String,System.Func{Elasticsearch.Net.GetAliasRequestParameters,Elasticsearch.Net.GetAliasRequestParameters})">
            <summary>Represents a GET on /{index}/_alias/{name}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to filter aliases</param>
            <param name="name">A comma-separated list of alias names to return</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetAlias``1(System.String,System.Func{Elasticsearch.Net.GetAliasRequestParameters,Elasticsearch.Net.GetAliasRequestParameters})">
            <summary>Represents a GET on /{index}/_alias
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to filter aliases</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetAliasAsync``1(System.String,System.Func{Elasticsearch.Net.GetAliasRequestParameters,Elasticsearch.Net.GetAliasRequestParameters})">
            <summary>Represents a GET on /{index}/_alias
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to filter aliases</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetAlias(System.String,System.Func{Elasticsearch.Net.GetAliasRequestParameters,Elasticsearch.Net.GetAliasRequestParameters})">
            <summary>Represents a GET on /{index}/_alias
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to filter aliases</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetAliasAsync(System.String,System.Func{Elasticsearch.Net.GetAliasRequestParameters,Elasticsearch.Net.GetAliasRequestParameters})">
            <summary>Represents a GET on /{index}/_alias
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to filter aliases</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetAliasesForAll``1(System.Func{Elasticsearch.Net.GetAliasesRequestParameters,Elasticsearch.Net.GetAliasesRequestParameters})">
            <summary>Represents a GET on /_aliases
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetAliasesForAllAsync``1(System.Func{Elasticsearch.Net.GetAliasesRequestParameters,Elasticsearch.Net.GetAliasesRequestParameters})">
            <summary>Represents a GET on /_aliases
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetAliasesForAll(System.Func{Elasticsearch.Net.GetAliasesRequestParameters,Elasticsearch.Net.GetAliasesRequestParameters})">
            <summary>Represents a GET on /_aliases
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetAliasesForAllAsync(System.Func{Elasticsearch.Net.GetAliasesRequestParameters,Elasticsearch.Net.GetAliasesRequestParameters})">
            <summary>Represents a GET on /_aliases
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetAliases``1(System.String,System.Func{Elasticsearch.Net.GetAliasesRequestParameters,Elasticsearch.Net.GetAliasesRequestParameters})">
            <summary>Represents a GET on /{index}/_aliases
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to filter aliases</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetAliasesAsync``1(System.String,System.Func{Elasticsearch.Net.GetAliasesRequestParameters,Elasticsearch.Net.GetAliasesRequestParameters})">
            <summary>Represents a GET on /{index}/_aliases
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to filter aliases</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetAliases(System.String,System.Func{Elasticsearch.Net.GetAliasesRequestParameters,Elasticsearch.Net.GetAliasesRequestParameters})">
            <summary>Represents a GET on /{index}/_aliases
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to filter aliases</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetAliasesAsync(System.String,System.Func{Elasticsearch.Net.GetAliasesRequestParameters,Elasticsearch.Net.GetAliasesRequestParameters})">
            <summary>Represents a GET on /{index}/_aliases
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to filter aliases</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetAliases``1(System.String,System.String,System.Func{Elasticsearch.Net.GetAliasesRequestParameters,Elasticsearch.Net.GetAliasesRequestParameters})">
            <summary>Represents a GET on /{index}/_aliases/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to filter aliases</param>
            <param name="name">A comma-separated list of alias names to filter</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetAliasesAsync``1(System.String,System.String,System.Func{Elasticsearch.Net.GetAliasesRequestParameters,Elasticsearch.Net.GetAliasesRequestParameters})">
            <summary>Represents a GET on /{index}/_aliases/{name}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to filter aliases</param>
            <param name="name">A comma-separated list of alias names to filter</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetAliases(System.String,System.String,System.Func{Elasticsearch.Net.GetAliasesRequestParameters,Elasticsearch.Net.GetAliasesRequestParameters})">
            <summary>Represents a GET on /{index}/_aliases/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to filter aliases</param>
            <param name="name">A comma-separated list of alias names to filter</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetAliasesAsync(System.String,System.String,System.Func{Elasticsearch.Net.GetAliasesRequestParameters,Elasticsearch.Net.GetAliasesRequestParameters})">
            <summary>Represents a GET on /{index}/_aliases/{name}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to filter aliases</param>
            <param name="name">A comma-separated list of alias names to filter</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetAliasesForAll``1(System.String,System.Func{Elasticsearch.Net.GetAliasesRequestParameters,Elasticsearch.Net.GetAliasesRequestParameters})">
            <summary>Represents a GET on /_aliases/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="name">A comma-separated list of alias names to filter</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetAliasesForAllAsync``1(System.String,System.Func{Elasticsearch.Net.GetAliasesRequestParameters,Elasticsearch.Net.GetAliasesRequestParameters})">
            <summary>Represents a GET on /_aliases/{name}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="name">A comma-separated list of alias names to filter</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetAliasesForAll(System.String,System.Func{Elasticsearch.Net.GetAliasesRequestParameters,Elasticsearch.Net.GetAliasesRequestParameters})">
            <summary>Represents a GET on /_aliases/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="name">A comma-separated list of alias names to filter</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetAliasesForAllAsync(System.String,System.Func{Elasticsearch.Net.GetAliasesRequestParameters,Elasticsearch.Net.GetAliasesRequestParameters})">
            <summary>Represents a GET on /_aliases/{name}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="name">A comma-separated list of alias names to filter</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetFieldMappingForAll``1(System.String,System.Func{Elasticsearch.Net.IndicesGetFieldMappingRequestParameters,Elasticsearch.Net.IndicesGetFieldMappingRequestParameters})">
            <summary>Represents a GET on /_mapping/field/{field}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-field-mapping.html</para>	
            </summary>
            <param name="field">A comma-separated list of fields</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetFieldMappingForAllAsync``1(System.String,System.Func{Elasticsearch.Net.IndicesGetFieldMappingRequestParameters,Elasticsearch.Net.IndicesGetFieldMappingRequestParameters})">
            <summary>Represents a GET on /_mapping/field/{field}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-field-mapping.html</para>	
            </summary>
            <param name="field">A comma-separated list of fields</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetFieldMappingForAll(System.String,System.Func{Elasticsearch.Net.IndicesGetFieldMappingRequestParameters,Elasticsearch.Net.IndicesGetFieldMappingRequestParameters})">
            <summary>Represents a GET on /_mapping/field/{field}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-field-mapping.html</para>	
            </summary>
            <param name="field">A comma-separated list of fields</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetFieldMappingForAllAsync(System.String,System.Func{Elasticsearch.Net.IndicesGetFieldMappingRequestParameters,Elasticsearch.Net.IndicesGetFieldMappingRequestParameters})">
            <summary>Represents a GET on /_mapping/field/{field}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-field-mapping.html</para>	
            </summary>
            <param name="field">A comma-separated list of fields</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetFieldMapping``1(System.String,System.String,System.Func{Elasticsearch.Net.IndicesGetFieldMappingRequestParameters,Elasticsearch.Net.IndicesGetFieldMappingRequestParameters})">
            <summary>Represents a GET on /{index}/_mapping/field/{field}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-field-mapping.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names</param>
            <param name="field">A comma-separated list of fields</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetFieldMappingAsync``1(System.String,System.String,System.Func{Elasticsearch.Net.IndicesGetFieldMappingRequestParameters,Elasticsearch.Net.IndicesGetFieldMappingRequestParameters})">
            <summary>Represents a GET on /{index}/_mapping/field/{field}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-field-mapping.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names</param>
            <param name="field">A comma-separated list of fields</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetFieldMapping(System.String,System.String,System.Func{Elasticsearch.Net.IndicesGetFieldMappingRequestParameters,Elasticsearch.Net.IndicesGetFieldMappingRequestParameters})">
            <summary>Represents a GET on /{index}/_mapping/field/{field}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-field-mapping.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names</param>
            <param name="field">A comma-separated list of fields</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetFieldMappingAsync(System.String,System.String,System.Func{Elasticsearch.Net.IndicesGetFieldMappingRequestParameters,Elasticsearch.Net.IndicesGetFieldMappingRequestParameters})">
            <summary>Represents a GET on /{index}/_mapping/field/{field}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-field-mapping.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names</param>
            <param name="field">A comma-separated list of fields</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetFieldMappingForAll``1(System.String,System.String,System.Func{Elasticsearch.Net.IndicesGetFieldMappingRequestParameters,Elasticsearch.Net.IndicesGetFieldMappingRequestParameters})">
            <summary>Represents a GET on /_mapping/{type}/field/{field}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-field-mapping.html</para>	
            </summary>
            <param name="type">A comma-separated list of document types</param>
            <param name="field">A comma-separated list of fields</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetFieldMappingForAllAsync``1(System.String,System.String,System.Func{Elasticsearch.Net.IndicesGetFieldMappingRequestParameters,Elasticsearch.Net.IndicesGetFieldMappingRequestParameters})">
            <summary>Represents a GET on /_mapping/{type}/field/{field}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-field-mapping.html</para>	
            </summary>
            <param name="type">A comma-separated list of document types</param>
            <param name="field">A comma-separated list of fields</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetFieldMappingForAll(System.String,System.String,System.Func{Elasticsearch.Net.IndicesGetFieldMappingRequestParameters,Elasticsearch.Net.IndicesGetFieldMappingRequestParameters})">
            <summary>Represents a GET on /_mapping/{type}/field/{field}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-field-mapping.html</para>	
            </summary>
            <param name="type">A comma-separated list of document types</param>
            <param name="field">A comma-separated list of fields</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetFieldMappingForAllAsync(System.String,System.String,System.Func{Elasticsearch.Net.IndicesGetFieldMappingRequestParameters,Elasticsearch.Net.IndicesGetFieldMappingRequestParameters})">
            <summary>Represents a GET on /_mapping/{type}/field/{field}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-field-mapping.html</para>	
            </summary>
            <param name="type">A comma-separated list of document types</param>
            <param name="field">A comma-separated list of fields</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetFieldMapping``1(System.String,System.String,System.String,System.Func{Elasticsearch.Net.IndicesGetFieldMappingRequestParameters,Elasticsearch.Net.IndicesGetFieldMappingRequestParameters})">
            <summary>Represents a GET on /{index}/_mapping/{type}/field/{field}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-field-mapping.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names</param>
            <param name="type">A comma-separated list of document types</param>
            <param name="field">A comma-separated list of fields</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetFieldMappingAsync``1(System.String,System.String,System.String,System.Func{Elasticsearch.Net.IndicesGetFieldMappingRequestParameters,Elasticsearch.Net.IndicesGetFieldMappingRequestParameters})">
            <summary>Represents a GET on /{index}/_mapping/{type}/field/{field}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-field-mapping.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names</param>
            <param name="type">A comma-separated list of document types</param>
            <param name="field">A comma-separated list of fields</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetFieldMapping(System.String,System.String,System.String,System.Func{Elasticsearch.Net.IndicesGetFieldMappingRequestParameters,Elasticsearch.Net.IndicesGetFieldMappingRequestParameters})">
            <summary>Represents a GET on /{index}/_mapping/{type}/field/{field}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-field-mapping.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names</param>
            <param name="type">A comma-separated list of document types</param>
            <param name="field">A comma-separated list of fields</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetFieldMappingAsync(System.String,System.String,System.String,System.Func{Elasticsearch.Net.IndicesGetFieldMappingRequestParameters,Elasticsearch.Net.IndicesGetFieldMappingRequestParameters})">
            <summary>Represents a GET on /{index}/_mapping/{type}/field/{field}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-field-mapping.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names</param>
            <param name="type">A comma-separated list of document types</param>
            <param name="field">A comma-separated list of fields</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetMappingForAll``1(System.Func{Elasticsearch.Net.GetMappingRequestParameters,Elasticsearch.Net.GetMappingRequestParameters})">
            <summary>Represents a GET on /_mapping
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-mapping.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetMappingForAllAsync``1(System.Func{Elasticsearch.Net.GetMappingRequestParameters,Elasticsearch.Net.GetMappingRequestParameters})">
            <summary>Represents a GET on /_mapping
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-mapping.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetMappingForAll(System.Func{Elasticsearch.Net.GetMappingRequestParameters,Elasticsearch.Net.GetMappingRequestParameters})">
            <summary>Represents a GET on /_mapping
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-mapping.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetMappingForAllAsync(System.Func{Elasticsearch.Net.GetMappingRequestParameters,Elasticsearch.Net.GetMappingRequestParameters})">
            <summary>Represents a GET on /_mapping
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-mapping.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetMapping``1(System.String,System.Func{Elasticsearch.Net.GetMappingRequestParameters,Elasticsearch.Net.GetMappingRequestParameters})">
            <summary>Represents a GET on /{index}/_mapping
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-mapping.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetMappingAsync``1(System.String,System.Func{Elasticsearch.Net.GetMappingRequestParameters,Elasticsearch.Net.GetMappingRequestParameters})">
            <summary>Represents a GET on /{index}/_mapping
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-mapping.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetMapping(System.String,System.Func{Elasticsearch.Net.GetMappingRequestParameters,Elasticsearch.Net.GetMappingRequestParameters})">
            <summary>Represents a GET on /{index}/_mapping
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-mapping.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetMappingAsync(System.String,System.Func{Elasticsearch.Net.GetMappingRequestParameters,Elasticsearch.Net.GetMappingRequestParameters})">
            <summary>Represents a GET on /{index}/_mapping
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-mapping.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetMappingForAll``1(System.String,System.Func{Elasticsearch.Net.GetMappingRequestParameters,Elasticsearch.Net.GetMappingRequestParameters})">
            <summary>Represents a GET on /_mapping/{type}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-mapping.html</para>	
            </summary>
            <param name="type">A comma-separated list of document types</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetMappingForAllAsync``1(System.String,System.Func{Elasticsearch.Net.GetMappingRequestParameters,Elasticsearch.Net.GetMappingRequestParameters})">
            <summary>Represents a GET on /_mapping/{type}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-mapping.html</para>	
            </summary>
            <param name="type">A comma-separated list of document types</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetMappingForAll(System.String,System.Func{Elasticsearch.Net.GetMappingRequestParameters,Elasticsearch.Net.GetMappingRequestParameters})">
            <summary>Represents a GET on /_mapping/{type}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-mapping.html</para>	
            </summary>
            <param name="type">A comma-separated list of document types</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetMappingForAllAsync(System.String,System.Func{Elasticsearch.Net.GetMappingRequestParameters,Elasticsearch.Net.GetMappingRequestParameters})">
            <summary>Represents a GET on /_mapping/{type}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-mapping.html</para>	
            </summary>
            <param name="type">A comma-separated list of document types</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetMapping``1(System.String,System.String,System.Func{Elasticsearch.Net.GetMappingRequestParameters,Elasticsearch.Net.GetMappingRequestParameters})">
            <summary>Represents a GET on /{index}/_mapping/{type}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-mapping.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names</param>
            <param name="type">A comma-separated list of document types</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetMappingAsync``1(System.String,System.String,System.Func{Elasticsearch.Net.GetMappingRequestParameters,Elasticsearch.Net.GetMappingRequestParameters})">
            <summary>Represents a GET on /{index}/_mapping/{type}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-mapping.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names</param>
            <param name="type">A comma-separated list of document types</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetMapping(System.String,System.String,System.Func{Elasticsearch.Net.GetMappingRequestParameters,Elasticsearch.Net.GetMappingRequestParameters})">
            <summary>Represents a GET on /{index}/_mapping/{type}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-mapping.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names</param>
            <param name="type">A comma-separated list of document types</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetMappingAsync(System.String,System.String,System.Func{Elasticsearch.Net.GetMappingRequestParameters,Elasticsearch.Net.GetMappingRequestParameters})">
            <summary>Represents a GET on /{index}/_mapping/{type}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-mapping.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names</param>
            <param name="type">A comma-separated list of document types</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetSettingsForAll``1(System.Func{Elasticsearch.Net.GetIndexSettingsRequestParameters,Elasticsearch.Net.GetIndexSettingsRequestParameters})">
            <summary>Represents a GET on /_settings
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-mapping.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetSettingsForAllAsync``1(System.Func{Elasticsearch.Net.GetIndexSettingsRequestParameters,Elasticsearch.Net.GetIndexSettingsRequestParameters})">
            <summary>Represents a GET on /_settings
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-mapping.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetSettingsForAll(System.Func{Elasticsearch.Net.GetIndexSettingsRequestParameters,Elasticsearch.Net.GetIndexSettingsRequestParameters})">
            <summary>Represents a GET on /_settings
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-mapping.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetSettingsForAllAsync(System.Func{Elasticsearch.Net.GetIndexSettingsRequestParameters,Elasticsearch.Net.GetIndexSettingsRequestParameters})">
            <summary>Represents a GET on /_settings
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-mapping.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetSettings``1(System.String,System.Func{Elasticsearch.Net.GetIndexSettingsRequestParameters,Elasticsearch.Net.GetIndexSettingsRequestParameters})">
            <summary>Represents a GET on /{index}/_settings
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-mapping.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetSettingsAsync``1(System.String,System.Func{Elasticsearch.Net.GetIndexSettingsRequestParameters,Elasticsearch.Net.GetIndexSettingsRequestParameters})">
            <summary>Represents a GET on /{index}/_settings
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-mapping.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetSettings(System.String,System.Func{Elasticsearch.Net.GetIndexSettingsRequestParameters,Elasticsearch.Net.GetIndexSettingsRequestParameters})">
            <summary>Represents a GET on /{index}/_settings
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-mapping.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetSettingsAsync(System.String,System.Func{Elasticsearch.Net.GetIndexSettingsRequestParameters,Elasticsearch.Net.GetIndexSettingsRequestParameters})">
            <summary>Represents a GET on /{index}/_settings
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-mapping.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetSettings``1(System.String,System.String,System.Func{Elasticsearch.Net.GetIndexSettingsRequestParameters,Elasticsearch.Net.GetIndexSettingsRequestParameters})">
            <summary>Represents a GET on /{index}/_settings/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-mapping.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="name">The name of the settings that should be included</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetSettingsAsync``1(System.String,System.String,System.Func{Elasticsearch.Net.GetIndexSettingsRequestParameters,Elasticsearch.Net.GetIndexSettingsRequestParameters})">
            <summary>Represents a GET on /{index}/_settings/{name}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-mapping.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="name">The name of the settings that should be included</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetSettings(System.String,System.String,System.Func{Elasticsearch.Net.GetIndexSettingsRequestParameters,Elasticsearch.Net.GetIndexSettingsRequestParameters})">
            <summary>Represents a GET on /{index}/_settings/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-mapping.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="name">The name of the settings that should be included</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetSettingsAsync(System.String,System.String,System.Func{Elasticsearch.Net.GetIndexSettingsRequestParameters,Elasticsearch.Net.GetIndexSettingsRequestParameters})">
            <summary>Represents a GET on /{index}/_settings/{name}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-mapping.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="name">The name of the settings that should be included</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetSettingsForAll``1(System.String,System.Func{Elasticsearch.Net.GetIndexSettingsRequestParameters,Elasticsearch.Net.GetIndexSettingsRequestParameters})">
            <summary>Represents a GET on /_settings/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-mapping.html</para>	
            </summary>
            <param name="name">The name of the settings that should be included</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetSettingsForAllAsync``1(System.String,System.Func{Elasticsearch.Net.GetIndexSettingsRequestParameters,Elasticsearch.Net.GetIndexSettingsRequestParameters})">
            <summary>Represents a GET on /_settings/{name}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-mapping.html</para>	
            </summary>
            <param name="name">The name of the settings that should be included</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetSettingsForAll(System.String,System.Func{Elasticsearch.Net.GetIndexSettingsRequestParameters,Elasticsearch.Net.GetIndexSettingsRequestParameters})">
            <summary>Represents a GET on /_settings/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-mapping.html</para>	
            </summary>
            <param name="name">The name of the settings that should be included</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetSettingsForAllAsync(System.String,System.Func{Elasticsearch.Net.GetIndexSettingsRequestParameters,Elasticsearch.Net.GetIndexSettingsRequestParameters})">
            <summary>Represents a GET on /_settings/{name}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-mapping.html</para>	
            </summary>
            <param name="name">The name of the settings that should be included</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetTemplateForAll``1(System.Func{Elasticsearch.Net.GetTemplateRequestParameters,Elasticsearch.Net.GetTemplateRequestParameters})">
            <summary>Represents a GET on /_template
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-templates.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetTemplateForAllAsync``1(System.Func{Elasticsearch.Net.GetTemplateRequestParameters,Elasticsearch.Net.GetTemplateRequestParameters})">
            <summary>Represents a GET on /_template
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-templates.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetTemplateForAll(System.Func{Elasticsearch.Net.GetTemplateRequestParameters,Elasticsearch.Net.GetTemplateRequestParameters})">
            <summary>Represents a GET on /_template
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-templates.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetTemplateForAllAsync(System.Func{Elasticsearch.Net.GetTemplateRequestParameters,Elasticsearch.Net.GetTemplateRequestParameters})">
            <summary>Represents a GET on /_template
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-templates.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetTemplateForAll``1(System.String,System.Func{Elasticsearch.Net.GetTemplateRequestParameters,Elasticsearch.Net.GetTemplateRequestParameters})">
            <summary>Represents a GET on /_template/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-templates.html</para>	
            </summary>
            <param name="name">The name of the template</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetTemplateForAllAsync``1(System.String,System.Func{Elasticsearch.Net.GetTemplateRequestParameters,Elasticsearch.Net.GetTemplateRequestParameters})">
            <summary>Represents a GET on /_template/{name}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-templates.html</para>	
            </summary>
            <param name="name">The name of the template</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetTemplateForAll(System.String,System.Func{Elasticsearch.Net.GetTemplateRequestParameters,Elasticsearch.Net.GetTemplateRequestParameters})">
            <summary>Represents a GET on /_template/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-templates.html</para>	
            </summary>
            <param name="name">The name of the template</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetTemplateForAllAsync(System.String,System.Func{Elasticsearch.Net.GetTemplateRequestParameters,Elasticsearch.Net.GetTemplateRequestParameters})">
            <summary>Represents a GET on /_template/{name}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-templates.html</para>	
            </summary>
            <param name="name">The name of the template</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetWarmerForAll``1(System.Func{Elasticsearch.Net.GetWarmerRequestParameters,Elasticsearch.Net.GetWarmerRequestParameters})">
            <summary>Represents a GET on /_warmer
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetWarmerForAllAsync``1(System.Func{Elasticsearch.Net.GetWarmerRequestParameters,Elasticsearch.Net.GetWarmerRequestParameters})">
            <summary>Represents a GET on /_warmer
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetWarmerForAll(System.Func{Elasticsearch.Net.GetWarmerRequestParameters,Elasticsearch.Net.GetWarmerRequestParameters})">
            <summary>Represents a GET on /_warmer
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetWarmerForAllAsync(System.Func{Elasticsearch.Net.GetWarmerRequestParameters,Elasticsearch.Net.GetWarmerRequestParameters})">
            <summary>Represents a GET on /_warmer
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetWarmer``1(System.String,System.Func{Elasticsearch.Net.GetWarmerRequestParameters,Elasticsearch.Net.GetWarmerRequestParameters})">
            <summary>Represents a GET on /{index}/_warmer
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to restrict the operation; use `_all` to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetWarmerAsync``1(System.String,System.Func{Elasticsearch.Net.GetWarmerRequestParameters,Elasticsearch.Net.GetWarmerRequestParameters})">
            <summary>Represents a GET on /{index}/_warmer
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to restrict the operation; use `_all` to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetWarmer(System.String,System.Func{Elasticsearch.Net.GetWarmerRequestParameters,Elasticsearch.Net.GetWarmerRequestParameters})">
            <summary>Represents a GET on /{index}/_warmer
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to restrict the operation; use `_all` to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetWarmerAsync(System.String,System.Func{Elasticsearch.Net.GetWarmerRequestParameters,Elasticsearch.Net.GetWarmerRequestParameters})">
            <summary>Represents a GET on /{index}/_warmer
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to restrict the operation; use `_all` to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetWarmer``1(System.String,System.String,System.Func{Elasticsearch.Net.GetWarmerRequestParameters,Elasticsearch.Net.GetWarmerRequestParameters})">
            <summary>Represents a GET on /{index}/_warmer/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to restrict the operation; use `_all` to perform the operation on all indices</param>
            <param name="name">The name of the warmer (supports wildcards); leave empty to get all warmers</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetWarmerAsync``1(System.String,System.String,System.Func{Elasticsearch.Net.GetWarmerRequestParameters,Elasticsearch.Net.GetWarmerRequestParameters})">
            <summary>Represents a GET on /{index}/_warmer/{name}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to restrict the operation; use `_all` to perform the operation on all indices</param>
            <param name="name">The name of the warmer (supports wildcards); leave empty to get all warmers</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetWarmer(System.String,System.String,System.Func{Elasticsearch.Net.GetWarmerRequestParameters,Elasticsearch.Net.GetWarmerRequestParameters})">
            <summary>Represents a GET on /{index}/_warmer/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to restrict the operation; use `_all` to perform the operation on all indices</param>
            <param name="name">The name of the warmer (supports wildcards); leave empty to get all warmers</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetWarmerAsync(System.String,System.String,System.Func{Elasticsearch.Net.GetWarmerRequestParameters,Elasticsearch.Net.GetWarmerRequestParameters})">
            <summary>Represents a GET on /{index}/_warmer/{name}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to restrict the operation; use `_all` to perform the operation on all indices</param>
            <param name="name">The name of the warmer (supports wildcards); leave empty to get all warmers</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetWarmerForAll``1(System.String,System.Func{Elasticsearch.Net.GetWarmerRequestParameters,Elasticsearch.Net.GetWarmerRequestParameters})">
            <summary>Represents a GET on /_warmer/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="name">The name of the warmer (supports wildcards); leave empty to get all warmers</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetWarmerForAllAsync``1(System.String,System.Func{Elasticsearch.Net.GetWarmerRequestParameters,Elasticsearch.Net.GetWarmerRequestParameters})">
            <summary>Represents a GET on /_warmer/{name}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="name">The name of the warmer (supports wildcards); leave empty to get all warmers</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetWarmerForAll(System.String,System.Func{Elasticsearch.Net.GetWarmerRequestParameters,Elasticsearch.Net.GetWarmerRequestParameters})">
            <summary>Represents a GET on /_warmer/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="name">The name of the warmer (supports wildcards); leave empty to get all warmers</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetWarmerForAllAsync(System.String,System.Func{Elasticsearch.Net.GetWarmerRequestParameters,Elasticsearch.Net.GetWarmerRequestParameters})">
            <summary>Represents a GET on /_warmer/{name}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="name">The name of the warmer (supports wildcards); leave empty to get all warmers</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetWarmer``1(System.String,System.String,System.String,System.Func{Elasticsearch.Net.GetWarmerRequestParameters,Elasticsearch.Net.GetWarmerRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_warmer/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to restrict the operation; use `_all` to perform the operation on all indices</param>
            <param name="type">A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types</param>
            <param name="name">The name of the warmer (supports wildcards); leave empty to get all warmers</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetWarmerAsync``1(System.String,System.String,System.String,System.Func{Elasticsearch.Net.GetWarmerRequestParameters,Elasticsearch.Net.GetWarmerRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_warmer/{name}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to restrict the operation; use `_all` to perform the operation on all indices</param>
            <param name="type">A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types</param>
            <param name="name">The name of the warmer (supports wildcards); leave empty to get all warmers</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetWarmer(System.String,System.String,System.String,System.Func{Elasticsearch.Net.GetWarmerRequestParameters,Elasticsearch.Net.GetWarmerRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_warmer/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to restrict the operation; use `_all` to perform the operation on all indices</param>
            <param name="type">A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types</param>
            <param name="name">The name of the warmer (supports wildcards); leave empty to get all warmers</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesGetWarmerAsync(System.String,System.String,System.String,System.Func{Elasticsearch.Net.GetWarmerRequestParameters,Elasticsearch.Net.GetWarmerRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_warmer/{name}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to restrict the operation; use `_all` to perform the operation on all indices</param>
            <param name="type">A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types</param>
            <param name="name">The name of the warmer (supports wildcards); leave empty to get all warmers</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesOpen``1(System.String,System.Func{Elasticsearch.Net.OpenIndexRequestParameters,Elasticsearch.Net.OpenIndexRequestParameters})">
            <summary>Represents a POST on /{index}/_open
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-open-close.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesOpenAsync``1(System.String,System.Func{Elasticsearch.Net.OpenIndexRequestParameters,Elasticsearch.Net.OpenIndexRequestParameters})">
            <summary>Represents a POST on /{index}/_open
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-open-close.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesOpen(System.String,System.Func{Elasticsearch.Net.OpenIndexRequestParameters,Elasticsearch.Net.OpenIndexRequestParameters})">
            <summary>Represents a POST on /{index}/_open
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-open-close.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesOpenAsync(System.String,System.Func{Elasticsearch.Net.OpenIndexRequestParameters,Elasticsearch.Net.OpenIndexRequestParameters})">
            <summary>Represents a POST on /{index}/_open
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-open-close.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesOptimizeForAll``1(System.Func{Elasticsearch.Net.OptimizeRequestParameters,Elasticsearch.Net.OptimizeRequestParameters})">
            <summary>Represents a POST on /_optimize
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-optimize.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesOptimizeForAllAsync``1(System.Func{Elasticsearch.Net.OptimizeRequestParameters,Elasticsearch.Net.OptimizeRequestParameters})">
            <summary>Represents a POST on /_optimize
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-optimize.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesOptimizeForAll(System.Func{Elasticsearch.Net.OptimizeRequestParameters,Elasticsearch.Net.OptimizeRequestParameters})">
            <summary>Represents a POST on /_optimize
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-optimize.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesOptimizeForAllAsync(System.Func{Elasticsearch.Net.OptimizeRequestParameters,Elasticsearch.Net.OptimizeRequestParameters})">
            <summary>Represents a POST on /_optimize
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-optimize.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesOptimize``1(System.String,System.Func{Elasticsearch.Net.OptimizeRequestParameters,Elasticsearch.Net.OptimizeRequestParameters})">
            <summary>Represents a POST on /{index}/_optimize
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-optimize.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesOptimizeAsync``1(System.String,System.Func{Elasticsearch.Net.OptimizeRequestParameters,Elasticsearch.Net.OptimizeRequestParameters})">
            <summary>Represents a POST on /{index}/_optimize
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-optimize.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesOptimize(System.String,System.Func{Elasticsearch.Net.OptimizeRequestParameters,Elasticsearch.Net.OptimizeRequestParameters})">
            <summary>Represents a POST on /{index}/_optimize
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-optimize.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesOptimizeAsync(System.String,System.Func{Elasticsearch.Net.OptimizeRequestParameters,Elasticsearch.Net.OptimizeRequestParameters})">
            <summary>Represents a POST on /{index}/_optimize
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-optimize.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesOptimizeGetForAll``1(System.Func{Elasticsearch.Net.OptimizeRequestParameters,Elasticsearch.Net.OptimizeRequestParameters})">
            <summary>Represents a GET on /_optimize
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-optimize.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesOptimizeGetForAllAsync``1(System.Func{Elasticsearch.Net.OptimizeRequestParameters,Elasticsearch.Net.OptimizeRequestParameters})">
            <summary>Represents a GET on /_optimize
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-optimize.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesOptimizeGetForAll(System.Func{Elasticsearch.Net.OptimizeRequestParameters,Elasticsearch.Net.OptimizeRequestParameters})">
            <summary>Represents a GET on /_optimize
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-optimize.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesOptimizeGetForAllAsync(System.Func{Elasticsearch.Net.OptimizeRequestParameters,Elasticsearch.Net.OptimizeRequestParameters})">
            <summary>Represents a GET on /_optimize
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-optimize.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesOptimizeGet``1(System.String,System.Func{Elasticsearch.Net.OptimizeRequestParameters,Elasticsearch.Net.OptimizeRequestParameters})">
            <summary>Represents a GET on /{index}/_optimize
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-optimize.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesOptimizeGetAsync``1(System.String,System.Func{Elasticsearch.Net.OptimizeRequestParameters,Elasticsearch.Net.OptimizeRequestParameters})">
            <summary>Represents a GET on /{index}/_optimize
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-optimize.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesOptimizeGet(System.String,System.Func{Elasticsearch.Net.OptimizeRequestParameters,Elasticsearch.Net.OptimizeRequestParameters})">
            <summary>Represents a GET on /{index}/_optimize
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-optimize.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesOptimizeGetAsync(System.String,System.Func{Elasticsearch.Net.OptimizeRequestParameters,Elasticsearch.Net.OptimizeRequestParameters})">
            <summary>Represents a GET on /{index}/_optimize
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-optimize.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesPutAlias``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.IndicesPutAliasRequestParameters,Elasticsearch.Net.IndicesPutAliasRequestParameters})">
            <summary>Represents a PUT on /{index}/_alias/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names the alias should point to (supports wildcards); use `_all` or omit to perform the operation on all indices.</param>
            <param name="name">The name of the alias to be created or updated</param>
            <param name="body">The settings for the alias, such as `routing` or `filter`</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesPutAliasAsync``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.IndicesPutAliasRequestParameters,Elasticsearch.Net.IndicesPutAliasRequestParameters})">
            <summary>Represents a PUT on /{index}/_alias/{name}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names the alias should point to (supports wildcards); use `_all` or omit to perform the operation on all indices.</param>
            <param name="name">The name of the alias to be created or updated</param>
            <param name="body">The settings for the alias, such as `routing` or `filter`</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesPutAlias(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.IndicesPutAliasRequestParameters,Elasticsearch.Net.IndicesPutAliasRequestParameters})">
            <summary>Represents a PUT on /{index}/_alias/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names the alias should point to (supports wildcards); use `_all` or omit to perform the operation on all indices.</param>
            <param name="name">The name of the alias to be created or updated</param>
            <param name="body">The settings for the alias, such as `routing` or `filter`</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesPutAliasAsync(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.IndicesPutAliasRequestParameters,Elasticsearch.Net.IndicesPutAliasRequestParameters})">
            <summary>Represents a PUT on /{index}/_alias/{name}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names the alias should point to (supports wildcards); use `_all` or omit to perform the operation on all indices.</param>
            <param name="name">The name of the alias to be created or updated</param>
            <param name="body">The settings for the alias, such as `routing` or `filter`</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesPutAliasForAll``1(System.String,System.Object,System.Func{Elasticsearch.Net.IndicesPutAliasRequestParameters,Elasticsearch.Net.IndicesPutAliasRequestParameters})">
            <summary>Represents a PUT on /_alias/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="name">The name of the alias to be created or updated</param>
            <param name="body">The settings for the alias, such as `routing` or `filter`</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesPutAliasForAllAsync``1(System.String,System.Object,System.Func{Elasticsearch.Net.IndicesPutAliasRequestParameters,Elasticsearch.Net.IndicesPutAliasRequestParameters})">
            <summary>Represents a PUT on /_alias/{name}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="name">The name of the alias to be created or updated</param>
            <param name="body">The settings for the alias, such as `routing` or `filter`</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesPutAliasForAll(System.String,System.Object,System.Func{Elasticsearch.Net.IndicesPutAliasRequestParameters,Elasticsearch.Net.IndicesPutAliasRequestParameters})">
            <summary>Represents a PUT on /_alias/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="name">The name of the alias to be created or updated</param>
            <param name="body">The settings for the alias, such as `routing` or `filter`</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesPutAliasForAllAsync(System.String,System.Object,System.Func{Elasticsearch.Net.IndicesPutAliasRequestParameters,Elasticsearch.Net.IndicesPutAliasRequestParameters})">
            <summary>Represents a PUT on /_alias/{name}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="name">The name of the alias to be created or updated</param>
            <param name="body">The settings for the alias, such as `routing` or `filter`</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesPutAliasPost``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.IndicesPutAliasRequestParameters,Elasticsearch.Net.IndicesPutAliasRequestParameters})">
            <summary>Represents a POST on /{index}/_alias/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names the alias should point to (supports wildcards); use `_all` or omit to perform the operation on all indices.</param>
            <param name="name">The name of the alias to be created or updated</param>
            <param name="body">The settings for the alias, such as `routing` or `filter`</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesPutAliasPostAsync``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.IndicesPutAliasRequestParameters,Elasticsearch.Net.IndicesPutAliasRequestParameters})">
            <summary>Represents a POST on /{index}/_alias/{name}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names the alias should point to (supports wildcards); use `_all` or omit to perform the operation on all indices.</param>
            <param name="name">The name of the alias to be created or updated</param>
            <param name="body">The settings for the alias, such as `routing` or `filter`</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesPutAliasPost(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.IndicesPutAliasRequestParameters,Elasticsearch.Net.IndicesPutAliasRequestParameters})">
            <summary>Represents a POST on /{index}/_alias/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names the alias should point to (supports wildcards); use `_all` or omit to perform the operation on all indices.</param>
            <param name="name">The name of the alias to be created or updated</param>
            <param name="body">The settings for the alias, such as `routing` or `filter`</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesPutAliasPostAsync(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.IndicesPutAliasRequestParameters,Elasticsearch.Net.IndicesPutAliasRequestParameters})">
            <summary>Represents a POST on /{index}/_alias/{name}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names the alias should point to (supports wildcards); use `_all` or omit to perform the operation on all indices.</param>
            <param name="name">The name of the alias to be created or updated</param>
            <param name="body">The settings for the alias, such as `routing` or `filter`</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesPutAliasPostForAll``1(System.String,System.Object,System.Func{Elasticsearch.Net.IndicesPutAliasRequestParameters,Elasticsearch.Net.IndicesPutAliasRequestParameters})">
            <summary>Represents a POST on /_alias/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="name">The name of the alias to be created or updated</param>
            <param name="body">The settings for the alias, such as `routing` or `filter`</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesPutAliasPostForAllAsync``1(System.String,System.Object,System.Func{Elasticsearch.Net.IndicesPutAliasRequestParameters,Elasticsearch.Net.IndicesPutAliasRequestParameters})">
            <summary>Represents a POST on /_alias/{name}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="name">The name of the alias to be created or updated</param>
            <param name="body">The settings for the alias, such as `routing` or `filter`</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesPutAliasPostForAll(System.String,System.Object,System.Func{Elasticsearch.Net.IndicesPutAliasRequestParameters,Elasticsearch.Net.IndicesPutAliasRequestParameters})">
            <summary>Represents a POST on /_alias/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="name">The name of the alias to be created or updated</param>
            <param name="body">The settings for the alias, such as `routing` or `filter`</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesPutAliasPostForAllAsync(System.String,System.Object,System.Func{Elasticsearch.Net.IndicesPutAliasRequestParameters,Elasticsearch.Net.IndicesPutAliasRequestParameters})">
            <summary>Represents a POST on /_alias/{name}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="name">The name of the alias to be created or updated</param>
            <param name="body">The settings for the alias, such as `routing` or `filter`</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesPutMapping``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.PutMappingRequestParameters,Elasticsearch.Net.PutMappingRequestParameters})">
            <summary>Represents a PUT on /{index}/{type}/_mapping
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-put-mapping.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names the mapping should be added to (supports wildcards); use `_all` or omit to add the mapping on all indices.</param>
            <param name="type">The name of the document type</param>
            <param name="body">The mapping definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesPutMappingAsync``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.PutMappingRequestParameters,Elasticsearch.Net.PutMappingRequestParameters})">
            <summary>Represents a PUT on /{index}/{type}/_mapping
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-put-mapping.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names the mapping should be added to (supports wildcards); use `_all` or omit to add the mapping on all indices.</param>
            <param name="type">The name of the document type</param>
            <param name="body">The mapping definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesPutMapping(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.PutMappingRequestParameters,Elasticsearch.Net.PutMappingRequestParameters})">
            <summary>Represents a PUT on /{index}/{type}/_mapping
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-put-mapping.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names the mapping should be added to (supports wildcards); use `_all` or omit to add the mapping on all indices.</param>
            <param name="type">The name of the document type</param>
            <param name="body">The mapping definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesPutMappingAsync(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.PutMappingRequestParameters,Elasticsearch.Net.PutMappingRequestParameters})">
            <summary>Represents a PUT on /{index}/{type}/_mapping
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-put-mapping.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names the mapping should be added to (supports wildcards); use `_all` or omit to add the mapping on all indices.</param>
            <param name="type">The name of the document type</param>
            <param name="body">The mapping definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesPutMappingForAll``1(System.String,System.Object,System.Func{Elasticsearch.Net.PutMappingRequestParameters,Elasticsearch.Net.PutMappingRequestParameters})">
            <summary>Represents a PUT on /_mapping/{type}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-put-mapping.html</para>	
            </summary>
            <param name="type">The name of the document type</param>
            <param name="body">The mapping definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesPutMappingForAllAsync``1(System.String,System.Object,System.Func{Elasticsearch.Net.PutMappingRequestParameters,Elasticsearch.Net.PutMappingRequestParameters})">
            <summary>Represents a PUT on /_mapping/{type}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-put-mapping.html</para>	
            </summary>
            <param name="type">The name of the document type</param>
            <param name="body">The mapping definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesPutMappingForAll(System.String,System.Object,System.Func{Elasticsearch.Net.PutMappingRequestParameters,Elasticsearch.Net.PutMappingRequestParameters})">
            <summary>Represents a PUT on /_mapping/{type}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-put-mapping.html</para>	
            </summary>
            <param name="type">The name of the document type</param>
            <param name="body">The mapping definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesPutMappingForAllAsync(System.String,System.Object,System.Func{Elasticsearch.Net.PutMappingRequestParameters,Elasticsearch.Net.PutMappingRequestParameters})">
            <summary>Represents a PUT on /_mapping/{type}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-put-mapping.html</para>	
            </summary>
            <param name="type">The name of the document type</param>
            <param name="body">The mapping definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesPutMappingPost``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.PutMappingRequestParameters,Elasticsearch.Net.PutMappingRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_mapping
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-put-mapping.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names the mapping should be added to (supports wildcards); use `_all` or omit to add the mapping on all indices.</param>
            <param name="type">The name of the document type</param>
            <param name="body">The mapping definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesPutMappingPostAsync``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.PutMappingRequestParameters,Elasticsearch.Net.PutMappingRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_mapping
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-put-mapping.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names the mapping should be added to (supports wildcards); use `_all` or omit to add the mapping on all indices.</param>
            <param name="type">The name of the document type</param>
            <param name="body">The mapping definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesPutMappingPost(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.PutMappingRequestParameters,Elasticsearch.Net.PutMappingRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_mapping
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-put-mapping.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names the mapping should be added to (supports wildcards); use `_all` or omit to add the mapping on all indices.</param>
            <param name="type">The name of the document type</param>
            <param name="body">The mapping definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesPutMappingPostAsync(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.PutMappingRequestParameters,Elasticsearch.Net.PutMappingRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_mapping
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-put-mapping.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names the mapping should be added to (supports wildcards); use `_all` or omit to add the mapping on all indices.</param>
            <param name="type">The name of the document type</param>
            <param name="body">The mapping definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesPutMappingPostForAll``1(System.String,System.Object,System.Func{Elasticsearch.Net.PutMappingRequestParameters,Elasticsearch.Net.PutMappingRequestParameters})">
            <summary>Represents a POST on /_mapping/{type}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-put-mapping.html</para>	
            </summary>
            <param name="type">The name of the document type</param>
            <param name="body">The mapping definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesPutMappingPostForAllAsync``1(System.String,System.Object,System.Func{Elasticsearch.Net.PutMappingRequestParameters,Elasticsearch.Net.PutMappingRequestParameters})">
            <summary>Represents a POST on /_mapping/{type}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-put-mapping.html</para>	
            </summary>
            <param name="type">The name of the document type</param>
            <param name="body">The mapping definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesPutMappingPostForAll(System.String,System.Object,System.Func{Elasticsearch.Net.PutMappingRequestParameters,Elasticsearch.Net.PutMappingRequestParameters})">
            <summary>Represents a POST on /_mapping/{type}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-put-mapping.html</para>	
            </summary>
            <param name="type">The name of the document type</param>
            <param name="body">The mapping definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesPutMappingPostForAllAsync(System.String,System.Object,System.Func{Elasticsearch.Net.PutMappingRequestParameters,Elasticsearch.Net.PutMappingRequestParameters})">
            <summary>Represents a POST on /_mapping/{type}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-put-mapping.html</para>	
            </summary>
            <param name="type">The name of the document type</param>
            <param name="body">The mapping definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesPutSettingsForAll``1(System.Object,System.Func{Elasticsearch.Net.UpdateSettingsRequestParameters,Elasticsearch.Net.UpdateSettingsRequestParameters})">
            <summary>Represents a PUT on /_settings
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-update-settings.html</para>	
            </summary>
            <param name="body">The index settings to be updated</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesPutSettingsForAllAsync``1(System.Object,System.Func{Elasticsearch.Net.UpdateSettingsRequestParameters,Elasticsearch.Net.UpdateSettingsRequestParameters})">
            <summary>Represents a PUT on /_settings
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-update-settings.html</para>	
            </summary>
            <param name="body">The index settings to be updated</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesPutSettingsForAll(System.Object,System.Func{Elasticsearch.Net.UpdateSettingsRequestParameters,Elasticsearch.Net.UpdateSettingsRequestParameters})">
            <summary>Represents a PUT on /_settings
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-update-settings.html</para>	
            </summary>
            <param name="body">The index settings to be updated</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesPutSettingsForAllAsync(System.Object,System.Func{Elasticsearch.Net.UpdateSettingsRequestParameters,Elasticsearch.Net.UpdateSettingsRequestParameters})">
            <summary>Represents a PUT on /_settings
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-update-settings.html</para>	
            </summary>
            <param name="body">The index settings to be updated</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesPutSettings``1(System.String,System.Object,System.Func{Elasticsearch.Net.UpdateSettingsRequestParameters,Elasticsearch.Net.UpdateSettingsRequestParameters})">
            <summary>Represents a PUT on /{index}/_settings
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-update-settings.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="body">The index settings to be updated</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesPutSettingsAsync``1(System.String,System.Object,System.Func{Elasticsearch.Net.UpdateSettingsRequestParameters,Elasticsearch.Net.UpdateSettingsRequestParameters})">
            <summary>Represents a PUT on /{index}/_settings
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-update-settings.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="body">The index settings to be updated</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesPutSettings(System.String,System.Object,System.Func{Elasticsearch.Net.UpdateSettingsRequestParameters,Elasticsearch.Net.UpdateSettingsRequestParameters})">
            <summary>Represents a PUT on /{index}/_settings
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-update-settings.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="body">The index settings to be updated</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesPutSettingsAsync(System.String,System.Object,System.Func{Elasticsearch.Net.UpdateSettingsRequestParameters,Elasticsearch.Net.UpdateSettingsRequestParameters})">
            <summary>Represents a PUT on /{index}/_settings
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-update-settings.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="body">The index settings to be updated</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesPutTemplateForAll``1(System.String,System.Object,System.Func{Elasticsearch.Net.PutTemplateRequestParameters,Elasticsearch.Net.PutTemplateRequestParameters})">
            <summary>Represents a PUT on /_template/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-templates.html</para>	
            </summary>
            <param name="name">The name of the template</param>
            <param name="body">The template definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesPutTemplateForAllAsync``1(System.String,System.Object,System.Func{Elasticsearch.Net.PutTemplateRequestParameters,Elasticsearch.Net.PutTemplateRequestParameters})">
            <summary>Represents a PUT on /_template/{name}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-templates.html</para>	
            </summary>
            <param name="name">The name of the template</param>
            <param name="body">The template definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesPutTemplateForAll(System.String,System.Object,System.Func{Elasticsearch.Net.PutTemplateRequestParameters,Elasticsearch.Net.PutTemplateRequestParameters})">
            <summary>Represents a PUT on /_template/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-templates.html</para>	
            </summary>
            <param name="name">The name of the template</param>
            <param name="body">The template definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesPutTemplateForAllAsync(System.String,System.Object,System.Func{Elasticsearch.Net.PutTemplateRequestParameters,Elasticsearch.Net.PutTemplateRequestParameters})">
            <summary>Represents a PUT on /_template/{name}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-templates.html</para>	
            </summary>
            <param name="name">The name of the template</param>
            <param name="body">The template definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesPutTemplatePostForAll``1(System.String,System.Object,System.Func{Elasticsearch.Net.PutTemplateRequestParameters,Elasticsearch.Net.PutTemplateRequestParameters})">
            <summary>Represents a POST on /_template/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-templates.html</para>	
            </summary>
            <param name="name">The name of the template</param>
            <param name="body">The template definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesPutTemplatePostForAllAsync``1(System.String,System.Object,System.Func{Elasticsearch.Net.PutTemplateRequestParameters,Elasticsearch.Net.PutTemplateRequestParameters})">
            <summary>Represents a POST on /_template/{name}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-templates.html</para>	
            </summary>
            <param name="name">The name of the template</param>
            <param name="body">The template definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesPutTemplatePostForAll(System.String,System.Object,System.Func{Elasticsearch.Net.PutTemplateRequestParameters,Elasticsearch.Net.PutTemplateRequestParameters})">
            <summary>Represents a POST on /_template/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-templates.html</para>	
            </summary>
            <param name="name">The name of the template</param>
            <param name="body">The template definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesPutTemplatePostForAllAsync(System.String,System.Object,System.Func{Elasticsearch.Net.PutTemplateRequestParameters,Elasticsearch.Net.PutTemplateRequestParameters})">
            <summary>Represents a POST on /_template/{name}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-templates.html</para>	
            </summary>
            <param name="name">The name of the template</param>
            <param name="body">The template definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesPutWarmerForAll``1(System.String,System.Object,System.Func{Elasticsearch.Net.PutWarmerRequestParameters,Elasticsearch.Net.PutWarmerRequestParameters})">
            <summary>Represents a PUT on /_warmer/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="name">The name of the warmer</param>
            <param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesPutWarmerForAllAsync``1(System.String,System.Object,System.Func{Elasticsearch.Net.PutWarmerRequestParameters,Elasticsearch.Net.PutWarmerRequestParameters})">
            <summary>Represents a PUT on /_warmer/{name}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="name">The name of the warmer</param>
            <param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesPutWarmerForAll(System.String,System.Object,System.Func{Elasticsearch.Net.PutWarmerRequestParameters,Elasticsearch.Net.PutWarmerRequestParameters})">
            <summary>Represents a PUT on /_warmer/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="name">The name of the warmer</param>
            <param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesPutWarmerForAllAsync(System.String,System.Object,System.Func{Elasticsearch.Net.PutWarmerRequestParameters,Elasticsearch.Net.PutWarmerRequestParameters})">
            <summary>Represents a PUT on /_warmer/{name}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="name">The name of the warmer</param>
            <param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesPutWarmer``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.PutWarmerRequestParameters,Elasticsearch.Net.PutWarmerRequestParameters})">
            <summary>Represents a PUT on /{index}/_warmer/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to register the warmer for; use `_all` or omit to perform the operation on all indices</param>
            <param name="name">The name of the warmer</param>
            <param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesPutWarmerAsync``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.PutWarmerRequestParameters,Elasticsearch.Net.PutWarmerRequestParameters})">
            <summary>Represents a PUT on /{index}/_warmer/{name}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to register the warmer for; use `_all` or omit to perform the operation on all indices</param>
            <param name="name">The name of the warmer</param>
            <param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesPutWarmer(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.PutWarmerRequestParameters,Elasticsearch.Net.PutWarmerRequestParameters})">
            <summary>Represents a PUT on /{index}/_warmer/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to register the warmer for; use `_all` or omit to perform the operation on all indices</param>
            <param name="name">The name of the warmer</param>
            <param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesPutWarmerAsync(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.PutWarmerRequestParameters,Elasticsearch.Net.PutWarmerRequestParameters})">
            <summary>Represents a PUT on /{index}/_warmer/{name}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to register the warmer for; use `_all` or omit to perform the operation on all indices</param>
            <param name="name">The name of the warmer</param>
            <param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesPutWarmer``1(System.String,System.String,System.String,System.Object,System.Func{Elasticsearch.Net.PutWarmerRequestParameters,Elasticsearch.Net.PutWarmerRequestParameters})">
            <summary>Represents a PUT on /{index}/{type}/_warmer/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to register the warmer for; use `_all` or omit to perform the operation on all indices</param>
            <param name="type">A comma-separated list of document types to register the warmer for; leave empty to perform the operation on all types</param>
            <param name="name">The name of the warmer</param>
            <param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesPutWarmerAsync``1(System.String,System.String,System.String,System.Object,System.Func{Elasticsearch.Net.PutWarmerRequestParameters,Elasticsearch.Net.PutWarmerRequestParameters})">
            <summary>Represents a PUT on /{index}/{type}/_warmer/{name}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to register the warmer for; use `_all` or omit to perform the operation on all indices</param>
            <param name="type">A comma-separated list of document types to register the warmer for; leave empty to perform the operation on all types</param>
            <param name="name">The name of the warmer</param>
            <param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesPutWarmer(System.String,System.String,System.String,System.Object,System.Func{Elasticsearch.Net.PutWarmerRequestParameters,Elasticsearch.Net.PutWarmerRequestParameters})">
            <summary>Represents a PUT on /{index}/{type}/_warmer/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to register the warmer for; use `_all` or omit to perform the operation on all indices</param>
            <param name="type">A comma-separated list of document types to register the warmer for; leave empty to perform the operation on all types</param>
            <param name="name">The name of the warmer</param>
            <param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesPutWarmerAsync(System.String,System.String,System.String,System.Object,System.Func{Elasticsearch.Net.PutWarmerRequestParameters,Elasticsearch.Net.PutWarmerRequestParameters})">
            <summary>Represents a PUT on /{index}/{type}/_warmer/{name}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to register the warmer for; use `_all` or omit to perform the operation on all indices</param>
            <param name="type">A comma-separated list of document types to register the warmer for; leave empty to perform the operation on all types</param>
            <param name="name">The name of the warmer</param>
            <param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesPutWarmerPostForAll``1(System.String,System.Object,System.Func{Elasticsearch.Net.PutWarmerRequestParameters,Elasticsearch.Net.PutWarmerRequestParameters})">
            <summary>Represents a POST on /_warmer/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="name">The name of the warmer</param>
            <param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesPutWarmerPostForAllAsync``1(System.String,System.Object,System.Func{Elasticsearch.Net.PutWarmerRequestParameters,Elasticsearch.Net.PutWarmerRequestParameters})">
            <summary>Represents a POST on /_warmer/{name}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="name">The name of the warmer</param>
            <param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesPutWarmerPostForAll(System.String,System.Object,System.Func{Elasticsearch.Net.PutWarmerRequestParameters,Elasticsearch.Net.PutWarmerRequestParameters})">
            <summary>Represents a POST on /_warmer/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="name">The name of the warmer</param>
            <param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesPutWarmerPostForAllAsync(System.String,System.Object,System.Func{Elasticsearch.Net.PutWarmerRequestParameters,Elasticsearch.Net.PutWarmerRequestParameters})">
            <summary>Represents a POST on /_warmer/{name}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="name">The name of the warmer</param>
            <param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesPutWarmerPost``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.PutWarmerRequestParameters,Elasticsearch.Net.PutWarmerRequestParameters})">
            <summary>Represents a POST on /{index}/_warmer/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to register the warmer for; use `_all` or omit to perform the operation on all indices</param>
            <param name="name">The name of the warmer</param>
            <param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesPutWarmerPostAsync``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.PutWarmerRequestParameters,Elasticsearch.Net.PutWarmerRequestParameters})">
            <summary>Represents a POST on /{index}/_warmer/{name}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to register the warmer for; use `_all` or omit to perform the operation on all indices</param>
            <param name="name">The name of the warmer</param>
            <param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesPutWarmerPost(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.PutWarmerRequestParameters,Elasticsearch.Net.PutWarmerRequestParameters})">
            <summary>Represents a POST on /{index}/_warmer/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to register the warmer for; use `_all` or omit to perform the operation on all indices</param>
            <param name="name">The name of the warmer</param>
            <param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesPutWarmerPostAsync(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.PutWarmerRequestParameters,Elasticsearch.Net.PutWarmerRequestParameters})">
            <summary>Represents a POST on /{index}/_warmer/{name}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to register the warmer for; use `_all` or omit to perform the operation on all indices</param>
            <param name="name">The name of the warmer</param>
            <param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesPutWarmerPost``1(System.String,System.String,System.String,System.Object,System.Func{Elasticsearch.Net.PutWarmerRequestParameters,Elasticsearch.Net.PutWarmerRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_warmer/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to register the warmer for; use `_all` or omit to perform the operation on all indices</param>
            <param name="type">A comma-separated list of document types to register the warmer for; leave empty to perform the operation on all types</param>
            <param name="name">The name of the warmer</param>
            <param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesPutWarmerPostAsync``1(System.String,System.String,System.String,System.Object,System.Func{Elasticsearch.Net.PutWarmerRequestParameters,Elasticsearch.Net.PutWarmerRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_warmer/{name}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to register the warmer for; use `_all` or omit to perform the operation on all indices</param>
            <param name="type">A comma-separated list of document types to register the warmer for; leave empty to perform the operation on all types</param>
            <param name="name">The name of the warmer</param>
            <param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesPutWarmerPost(System.String,System.String,System.String,System.Object,System.Func{Elasticsearch.Net.PutWarmerRequestParameters,Elasticsearch.Net.PutWarmerRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_warmer/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to register the warmer for; use `_all` or omit to perform the operation on all indices</param>
            <param name="type">A comma-separated list of document types to register the warmer for; leave empty to perform the operation on all types</param>
            <param name="name">The name of the warmer</param>
            <param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesPutWarmerPostAsync(System.String,System.String,System.String,System.Object,System.Func{Elasticsearch.Net.PutWarmerRequestParameters,Elasticsearch.Net.PutWarmerRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_warmer/{name}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to register the warmer for; use `_all` or omit to perform the operation on all indices</param>
            <param name="type">A comma-separated list of document types to register the warmer for; leave empty to perform the operation on all types</param>
            <param name="name">The name of the warmer</param>
            <param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesRecoveryForAll``1(System.Func{Elasticsearch.Net.IndicesRecoveryRequestParameters,Elasticsearch.Net.IndicesRecoveryRequestParameters})">
            <summary>Represents a GET on /_recovery
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/indices-recovery.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesRecoveryForAllAsync``1(System.Func{Elasticsearch.Net.IndicesRecoveryRequestParameters,Elasticsearch.Net.IndicesRecoveryRequestParameters})">
            <summary>Represents a GET on /_recovery
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/indices-recovery.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesRecoveryForAll(System.Func{Elasticsearch.Net.IndicesRecoveryRequestParameters,Elasticsearch.Net.IndicesRecoveryRequestParameters})">
            <summary>Represents a GET on /_recovery
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/indices-recovery.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesRecoveryForAllAsync(System.Func{Elasticsearch.Net.IndicesRecoveryRequestParameters,Elasticsearch.Net.IndicesRecoveryRequestParameters})">
            <summary>Represents a GET on /_recovery
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/indices-recovery.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesRecovery``1(System.String,System.Func{Elasticsearch.Net.IndicesRecoveryRequestParameters,Elasticsearch.Net.IndicesRecoveryRequestParameters})">
            <summary>Represents a GET on /{index}/_recovery
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/indices-recovery.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesRecoveryAsync``1(System.String,System.Func{Elasticsearch.Net.IndicesRecoveryRequestParameters,Elasticsearch.Net.IndicesRecoveryRequestParameters})">
            <summary>Represents a GET on /{index}/_recovery
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/indices-recovery.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesRecovery(System.String,System.Func{Elasticsearch.Net.IndicesRecoveryRequestParameters,Elasticsearch.Net.IndicesRecoveryRequestParameters})">
            <summary>Represents a GET on /{index}/_recovery
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/indices-recovery.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesRecoveryAsync(System.String,System.Func{Elasticsearch.Net.IndicesRecoveryRequestParameters,Elasticsearch.Net.IndicesRecoveryRequestParameters})">
            <summary>Represents a GET on /{index}/_recovery
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/indices-recovery.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesRefreshForAll``1(System.Func{Elasticsearch.Net.RefreshRequestParameters,Elasticsearch.Net.RefreshRequestParameters})">
            <summary>Represents a POST on /_refresh
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-refresh.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesRefreshForAllAsync``1(System.Func{Elasticsearch.Net.RefreshRequestParameters,Elasticsearch.Net.RefreshRequestParameters})">
            <summary>Represents a POST on /_refresh
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-refresh.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesRefreshForAll(System.Func{Elasticsearch.Net.RefreshRequestParameters,Elasticsearch.Net.RefreshRequestParameters})">
            <summary>Represents a POST on /_refresh
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-refresh.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesRefreshForAllAsync(System.Func{Elasticsearch.Net.RefreshRequestParameters,Elasticsearch.Net.RefreshRequestParameters})">
            <summary>Represents a POST on /_refresh
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-refresh.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesRefresh``1(System.String,System.Func{Elasticsearch.Net.RefreshRequestParameters,Elasticsearch.Net.RefreshRequestParameters})">
            <summary>Represents a POST on /{index}/_refresh
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-refresh.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesRefreshAsync``1(System.String,System.Func{Elasticsearch.Net.RefreshRequestParameters,Elasticsearch.Net.RefreshRequestParameters})">
            <summary>Represents a POST on /{index}/_refresh
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-refresh.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesRefresh(System.String,System.Func{Elasticsearch.Net.RefreshRequestParameters,Elasticsearch.Net.RefreshRequestParameters})">
            <summary>Represents a POST on /{index}/_refresh
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-refresh.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesRefreshAsync(System.String,System.Func{Elasticsearch.Net.RefreshRequestParameters,Elasticsearch.Net.RefreshRequestParameters})">
            <summary>Represents a POST on /{index}/_refresh
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-refresh.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesRefreshGetForAll``1(System.Func{Elasticsearch.Net.RefreshRequestParameters,Elasticsearch.Net.RefreshRequestParameters})">
            <summary>Represents a GET on /_refresh
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-refresh.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesRefreshGetForAllAsync``1(System.Func{Elasticsearch.Net.RefreshRequestParameters,Elasticsearch.Net.RefreshRequestParameters})">
            <summary>Represents a GET on /_refresh
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-refresh.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesRefreshGetForAll(System.Func{Elasticsearch.Net.RefreshRequestParameters,Elasticsearch.Net.RefreshRequestParameters})">
            <summary>Represents a GET on /_refresh
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-refresh.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesRefreshGetForAllAsync(System.Func{Elasticsearch.Net.RefreshRequestParameters,Elasticsearch.Net.RefreshRequestParameters})">
            <summary>Represents a GET on /_refresh
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-refresh.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesRefreshGet``1(System.String,System.Func{Elasticsearch.Net.RefreshRequestParameters,Elasticsearch.Net.RefreshRequestParameters})">
            <summary>Represents a GET on /{index}/_refresh
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-refresh.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesRefreshGetAsync``1(System.String,System.Func{Elasticsearch.Net.RefreshRequestParameters,Elasticsearch.Net.RefreshRequestParameters})">
            <summary>Represents a GET on /{index}/_refresh
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-refresh.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesRefreshGet(System.String,System.Func{Elasticsearch.Net.RefreshRequestParameters,Elasticsearch.Net.RefreshRequestParameters})">
            <summary>Represents a GET on /{index}/_refresh
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-refresh.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesRefreshGetAsync(System.String,System.Func{Elasticsearch.Net.RefreshRequestParameters,Elasticsearch.Net.RefreshRequestParameters})">
            <summary>Represents a GET on /{index}/_refresh
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-refresh.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesSegmentsForAll``1(System.Func{Elasticsearch.Net.SegmentsRequestParameters,Elasticsearch.Net.SegmentsRequestParameters})">
            <summary>Represents a GET on /_segments
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-segments.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesSegmentsForAllAsync``1(System.Func{Elasticsearch.Net.SegmentsRequestParameters,Elasticsearch.Net.SegmentsRequestParameters})">
            <summary>Represents a GET on /_segments
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-segments.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesSegmentsForAll(System.Func{Elasticsearch.Net.SegmentsRequestParameters,Elasticsearch.Net.SegmentsRequestParameters})">
            <summary>Represents a GET on /_segments
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-segments.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesSegmentsForAllAsync(System.Func{Elasticsearch.Net.SegmentsRequestParameters,Elasticsearch.Net.SegmentsRequestParameters})">
            <summary>Represents a GET on /_segments
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-segments.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesSegments``1(System.String,System.Func{Elasticsearch.Net.SegmentsRequestParameters,Elasticsearch.Net.SegmentsRequestParameters})">
            <summary>Represents a GET on /{index}/_segments
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-segments.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesSegmentsAsync``1(System.String,System.Func{Elasticsearch.Net.SegmentsRequestParameters,Elasticsearch.Net.SegmentsRequestParameters})">
            <summary>Represents a GET on /{index}/_segments
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-segments.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesSegments(System.String,System.Func{Elasticsearch.Net.SegmentsRequestParameters,Elasticsearch.Net.SegmentsRequestParameters})">
            <summary>Represents a GET on /{index}/_segments
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-segments.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesSegmentsAsync(System.String,System.Func{Elasticsearch.Net.SegmentsRequestParameters,Elasticsearch.Net.SegmentsRequestParameters})">
            <summary>Represents a GET on /{index}/_segments
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-segments.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesStatsForAll``1(System.Func{Elasticsearch.Net.IndicesStatsRequestParameters,Elasticsearch.Net.IndicesStatsRequestParameters})">
            <summary>Represents a GET on /_stats
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-stats.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesStatsForAllAsync``1(System.Func{Elasticsearch.Net.IndicesStatsRequestParameters,Elasticsearch.Net.IndicesStatsRequestParameters})">
            <summary>Represents a GET on /_stats
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-stats.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesStatsForAll(System.Func{Elasticsearch.Net.IndicesStatsRequestParameters,Elasticsearch.Net.IndicesStatsRequestParameters})">
            <summary>Represents a GET on /_stats
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-stats.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesStatsForAllAsync(System.Func{Elasticsearch.Net.IndicesStatsRequestParameters,Elasticsearch.Net.IndicesStatsRequestParameters})">
            <summary>Represents a GET on /_stats
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-stats.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesStatsForAll``1(System.String,System.Func{Elasticsearch.Net.IndicesStatsRequestParameters,Elasticsearch.Net.IndicesStatsRequestParameters})">
            <summary>Represents a GET on /_stats/{metric}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-stats.html</para>	
            </summary>
            <param name="metric">Limit the information returned the specific metrics.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesStatsForAllAsync``1(System.String,System.Func{Elasticsearch.Net.IndicesStatsRequestParameters,Elasticsearch.Net.IndicesStatsRequestParameters})">
            <summary>Represents a GET on /_stats/{metric}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-stats.html</para>	
            </summary>
            <param name="metric">Limit the information returned the specific metrics.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesStatsForAll(System.String,System.Func{Elasticsearch.Net.IndicesStatsRequestParameters,Elasticsearch.Net.IndicesStatsRequestParameters})">
            <summary>Represents a GET on /_stats/{metric}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-stats.html</para>	
            </summary>
            <param name="metric">Limit the information returned the specific metrics.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesStatsForAllAsync(System.String,System.Func{Elasticsearch.Net.IndicesStatsRequestParameters,Elasticsearch.Net.IndicesStatsRequestParameters})">
            <summary>Represents a GET on /_stats/{metric}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-stats.html</para>	
            </summary>
            <param name="metric">Limit the information returned the specific metrics.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesStats``1(System.String,System.Func{Elasticsearch.Net.IndicesStatsRequestParameters,Elasticsearch.Net.IndicesStatsRequestParameters})">
            <summary>Represents a GET on /{index}/_stats
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-stats.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesStatsAsync``1(System.String,System.Func{Elasticsearch.Net.IndicesStatsRequestParameters,Elasticsearch.Net.IndicesStatsRequestParameters})">
            <summary>Represents a GET on /{index}/_stats
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-stats.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesStats(System.String,System.Func{Elasticsearch.Net.IndicesStatsRequestParameters,Elasticsearch.Net.IndicesStatsRequestParameters})">
            <summary>Represents a GET on /{index}/_stats
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-stats.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesStatsAsync(System.String,System.Func{Elasticsearch.Net.IndicesStatsRequestParameters,Elasticsearch.Net.IndicesStatsRequestParameters})">
            <summary>Represents a GET on /{index}/_stats
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-stats.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesStats``1(System.String,System.String,System.Func{Elasticsearch.Net.IndicesStatsRequestParameters,Elasticsearch.Net.IndicesStatsRequestParameters})">
            <summary>Represents a GET on /{index}/_stats/{metric}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-stats.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="metric">Limit the information returned the specific metrics.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesStatsAsync``1(System.String,System.String,System.Func{Elasticsearch.Net.IndicesStatsRequestParameters,Elasticsearch.Net.IndicesStatsRequestParameters})">
            <summary>Represents a GET on /{index}/_stats/{metric}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-stats.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="metric">Limit the information returned the specific metrics.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesStats(System.String,System.String,System.Func{Elasticsearch.Net.IndicesStatsRequestParameters,Elasticsearch.Net.IndicesStatsRequestParameters})">
            <summary>Represents a GET on /{index}/_stats/{metric}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-stats.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="metric">Limit the information returned the specific metrics.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesStatsAsync(System.String,System.String,System.Func{Elasticsearch.Net.IndicesStatsRequestParameters,Elasticsearch.Net.IndicesStatsRequestParameters})">
            <summary>Represents a GET on /{index}/_stats/{metric}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-stats.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="metric">Limit the information returned the specific metrics.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesStatusForAll``1(System.Func{Elasticsearch.Net.IndicesStatusRequestParameters,Elasticsearch.Net.IndicesStatusRequestParameters})">
            <summary>Represents a GET on /_status
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-status.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesStatusForAllAsync``1(System.Func{Elasticsearch.Net.IndicesStatusRequestParameters,Elasticsearch.Net.IndicesStatusRequestParameters})">
            <summary>Represents a GET on /_status
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-status.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesStatusForAll(System.Func{Elasticsearch.Net.IndicesStatusRequestParameters,Elasticsearch.Net.IndicesStatusRequestParameters})">
            <summary>Represents a GET on /_status
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-status.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesStatusForAllAsync(System.Func{Elasticsearch.Net.IndicesStatusRequestParameters,Elasticsearch.Net.IndicesStatusRequestParameters})">
            <summary>Represents a GET on /_status
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-status.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesStatus``1(System.String,System.Func{Elasticsearch.Net.IndicesStatusRequestParameters,Elasticsearch.Net.IndicesStatusRequestParameters})">
            <summary>Represents a GET on /{index}/_status
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-status.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesStatusAsync``1(System.String,System.Func{Elasticsearch.Net.IndicesStatusRequestParameters,Elasticsearch.Net.IndicesStatusRequestParameters})">
            <summary>Represents a GET on /{index}/_status
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-status.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesStatus(System.String,System.Func{Elasticsearch.Net.IndicesStatusRequestParameters,Elasticsearch.Net.IndicesStatusRequestParameters})">
            <summary>Represents a GET on /{index}/_status
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-status.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesStatusAsync(System.String,System.Func{Elasticsearch.Net.IndicesStatusRequestParameters,Elasticsearch.Net.IndicesStatusRequestParameters})">
            <summary>Represents a GET on /{index}/_status
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-status.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesUpdateAliasesForAll``1(System.Object,System.Func{Elasticsearch.Net.AliasRequestParameters,Elasticsearch.Net.AliasRequestParameters})">
            <summary>Represents a POST on /_aliases
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="body">The definition of `actions` to perform</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesUpdateAliasesForAllAsync``1(System.Object,System.Func{Elasticsearch.Net.AliasRequestParameters,Elasticsearch.Net.AliasRequestParameters})">
            <summary>Represents a POST on /_aliases
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="body">The definition of `actions` to perform</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesUpdateAliasesForAll(System.Object,System.Func{Elasticsearch.Net.AliasRequestParameters,Elasticsearch.Net.AliasRequestParameters})">
            <summary>Represents a POST on /_aliases
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="body">The definition of `actions` to perform</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesUpdateAliasesForAllAsync(System.Object,System.Func{Elasticsearch.Net.AliasRequestParameters,Elasticsearch.Net.AliasRequestParameters})">
            <summary>Represents a POST on /_aliases
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="body">The definition of `actions` to perform</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesValidateQueryGetForAll``1(System.Func{Elasticsearch.Net.ValidateQueryRequestParameters,Elasticsearch.Net.ValidateQueryRequestParameters})">
            <summary>Represents a GET on /_validate/query
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-validate.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesValidateQueryGetForAllAsync``1(System.Func{Elasticsearch.Net.ValidateQueryRequestParameters,Elasticsearch.Net.ValidateQueryRequestParameters})">
            <summary>Represents a GET on /_validate/query
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-validate.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesValidateQueryGetForAll(System.Func{Elasticsearch.Net.ValidateQueryRequestParameters,Elasticsearch.Net.ValidateQueryRequestParameters})">
            <summary>Represents a GET on /_validate/query
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-validate.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesValidateQueryGetForAllAsync(System.Func{Elasticsearch.Net.ValidateQueryRequestParameters,Elasticsearch.Net.ValidateQueryRequestParameters})">
            <summary>Represents a GET on /_validate/query
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-validate.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesValidateQueryGet``1(System.String,System.Func{Elasticsearch.Net.ValidateQueryRequestParameters,Elasticsearch.Net.ValidateQueryRequestParameters})">
            <summary>Represents a GET on /{index}/_validate/query
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-validate.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesValidateQueryGetAsync``1(System.String,System.Func{Elasticsearch.Net.ValidateQueryRequestParameters,Elasticsearch.Net.ValidateQueryRequestParameters})">
            <summary>Represents a GET on /{index}/_validate/query
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-validate.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesValidateQueryGet(System.String,System.Func{Elasticsearch.Net.ValidateQueryRequestParameters,Elasticsearch.Net.ValidateQueryRequestParameters})">
            <summary>Represents a GET on /{index}/_validate/query
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-validate.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesValidateQueryGetAsync(System.String,System.Func{Elasticsearch.Net.ValidateQueryRequestParameters,Elasticsearch.Net.ValidateQueryRequestParameters})">
            <summary>Represents a GET on /{index}/_validate/query
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-validate.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesValidateQueryGet``1(System.String,System.String,System.Func{Elasticsearch.Net.ValidateQueryRequestParameters,Elasticsearch.Net.ValidateQueryRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_validate/query
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-validate.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
            <param name="type">A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesValidateQueryGetAsync``1(System.String,System.String,System.Func{Elasticsearch.Net.ValidateQueryRequestParameters,Elasticsearch.Net.ValidateQueryRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_validate/query
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-validate.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
            <param name="type">A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesValidateQueryGet(System.String,System.String,System.Func{Elasticsearch.Net.ValidateQueryRequestParameters,Elasticsearch.Net.ValidateQueryRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_validate/query
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-validate.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
            <param name="type">A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesValidateQueryGetAsync(System.String,System.String,System.Func{Elasticsearch.Net.ValidateQueryRequestParameters,Elasticsearch.Net.ValidateQueryRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_validate/query
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-validate.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
            <param name="type">A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesValidateQueryForAll``1(System.Object,System.Func{Elasticsearch.Net.ValidateQueryRequestParameters,Elasticsearch.Net.ValidateQueryRequestParameters})">
            <summary>Represents a POST on /_validate/query
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-validate.html</para>	
            </summary>
            <param name="body">The query definition specified with the Query DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesValidateQueryForAllAsync``1(System.Object,System.Func{Elasticsearch.Net.ValidateQueryRequestParameters,Elasticsearch.Net.ValidateQueryRequestParameters})">
            <summary>Represents a POST on /_validate/query
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-validate.html</para>	
            </summary>
            <param name="body">The query definition specified with the Query DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesValidateQueryForAll(System.Object,System.Func{Elasticsearch.Net.ValidateQueryRequestParameters,Elasticsearch.Net.ValidateQueryRequestParameters})">
            <summary>Represents a POST on /_validate/query
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-validate.html</para>	
            </summary>
            <param name="body">The query definition specified with the Query DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesValidateQueryForAllAsync(System.Object,System.Func{Elasticsearch.Net.ValidateQueryRequestParameters,Elasticsearch.Net.ValidateQueryRequestParameters})">
            <summary>Represents a POST on /_validate/query
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-validate.html</para>	
            </summary>
            <param name="body">The query definition specified with the Query DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesValidateQuery``1(System.String,System.Object,System.Func{Elasticsearch.Net.ValidateQueryRequestParameters,Elasticsearch.Net.ValidateQueryRequestParameters})">
            <summary>Represents a POST on /{index}/_validate/query
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-validate.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
            <param name="body">The query definition specified with the Query DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesValidateQueryAsync``1(System.String,System.Object,System.Func{Elasticsearch.Net.ValidateQueryRequestParameters,Elasticsearch.Net.ValidateQueryRequestParameters})">
            <summary>Represents a POST on /{index}/_validate/query
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-validate.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
            <param name="body">The query definition specified with the Query DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesValidateQuery(System.String,System.Object,System.Func{Elasticsearch.Net.ValidateQueryRequestParameters,Elasticsearch.Net.ValidateQueryRequestParameters})">
            <summary>Represents a POST on /{index}/_validate/query
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-validate.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
            <param name="body">The query definition specified with the Query DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesValidateQueryAsync(System.String,System.Object,System.Func{Elasticsearch.Net.ValidateQueryRequestParameters,Elasticsearch.Net.ValidateQueryRequestParameters})">
            <summary>Represents a POST on /{index}/_validate/query
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-validate.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
            <param name="body">The query definition specified with the Query DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesValidateQuery``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.ValidateQueryRequestParameters,Elasticsearch.Net.ValidateQueryRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_validate/query
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-validate.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
            <param name="type">A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types</param>
            <param name="body">The query definition specified with the Query DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesValidateQueryAsync``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.ValidateQueryRequestParameters,Elasticsearch.Net.ValidateQueryRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_validate/query
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-validate.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
            <param name="type">A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types</param>
            <param name="body">The query definition specified with the Query DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesValidateQuery(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.ValidateQueryRequestParameters,Elasticsearch.Net.ValidateQueryRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_validate/query
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-validate.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
            <param name="type">A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types</param>
            <param name="body">The query definition specified with the Query DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.IndicesValidateQueryAsync(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.ValidateQueryRequestParameters,Elasticsearch.Net.ValidateQueryRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_validate/query
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-validate.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
            <param name="type">A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types</param>
            <param name="body">The query definition specified with the Query DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.Info``1(System.Func{Elasticsearch.Net.InfoRequestParameters,Elasticsearch.Net.InfoRequestParameters})">
            <summary>Represents a GET on /
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.InfoAsync``1(System.Func{Elasticsearch.Net.InfoRequestParameters,Elasticsearch.Net.InfoRequestParameters})">
            <summary>Represents a GET on /
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.Info(System.Func{Elasticsearch.Net.InfoRequestParameters,Elasticsearch.Net.InfoRequestParameters})">
            <summary>Represents a GET on /
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.InfoAsync(System.Func{Elasticsearch.Net.InfoRequestParameters,Elasticsearch.Net.InfoRequestParameters})">
            <summary>Represents a GET on /
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.ListBenchmarks``1(System.Func{Elasticsearch.Net.ListBenchmarksRequestParameters,Elasticsearch.Net.ListBenchmarksRequestParameters})">
            <summary>Represents a GET on /_bench
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-benchmark.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.ListBenchmarksAsync``1(System.Func{Elasticsearch.Net.ListBenchmarksRequestParameters,Elasticsearch.Net.ListBenchmarksRequestParameters})">
            <summary>Represents a GET on /_bench
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-benchmark.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.ListBenchmarks(System.Func{Elasticsearch.Net.ListBenchmarksRequestParameters,Elasticsearch.Net.ListBenchmarksRequestParameters})">
            <summary>Represents a GET on /_bench
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-benchmark.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.ListBenchmarksAsync(System.Func{Elasticsearch.Net.ListBenchmarksRequestParameters,Elasticsearch.Net.ListBenchmarksRequestParameters})">
            <summary>Represents a GET on /_bench
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-benchmark.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.ListBenchmarks``1(System.String,System.Func{Elasticsearch.Net.ListBenchmarksRequestParameters,Elasticsearch.Net.ListBenchmarksRequestParameters})">
            <summary>Represents a GET on /{index}/_bench
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-benchmark.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.ListBenchmarksAsync``1(System.String,System.Func{Elasticsearch.Net.ListBenchmarksRequestParameters,Elasticsearch.Net.ListBenchmarksRequestParameters})">
            <summary>Represents a GET on /{index}/_bench
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-benchmark.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.ListBenchmarks(System.String,System.Func{Elasticsearch.Net.ListBenchmarksRequestParameters,Elasticsearch.Net.ListBenchmarksRequestParameters})">
            <summary>Represents a GET on /{index}/_bench
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-benchmark.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.ListBenchmarksAsync(System.String,System.Func{Elasticsearch.Net.ListBenchmarksRequestParameters,Elasticsearch.Net.ListBenchmarksRequestParameters})">
            <summary>Represents a GET on /{index}/_bench
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-benchmark.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.ListBenchmarks``1(System.String,System.String,System.Func{Elasticsearch.Net.ListBenchmarksRequestParameters,Elasticsearch.Net.ListBenchmarksRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_bench
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-benchmark.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="type">The name of the document type</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.ListBenchmarksAsync``1(System.String,System.String,System.Func{Elasticsearch.Net.ListBenchmarksRequestParameters,Elasticsearch.Net.ListBenchmarksRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_bench
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-benchmark.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="type">The name of the document type</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.ListBenchmarks(System.String,System.String,System.Func{Elasticsearch.Net.ListBenchmarksRequestParameters,Elasticsearch.Net.ListBenchmarksRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_bench
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-benchmark.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="type">The name of the document type</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.ListBenchmarksAsync(System.String,System.String,System.Func{Elasticsearch.Net.ListBenchmarksRequestParameters,Elasticsearch.Net.ListBenchmarksRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_bench
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-benchmark.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="type">The name of the document type</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.MgetGet``1(System.Func{Elasticsearch.Net.MultiGetRequestParameters,Elasticsearch.Net.MultiGetRequestParameters})">
            <summary>Represents a GET on /_mget
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-get.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.MgetGetAsync``1(System.Func{Elasticsearch.Net.MultiGetRequestParameters,Elasticsearch.Net.MultiGetRequestParameters})">
            <summary>Represents a GET on /_mget
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-get.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.MgetGet(System.Func{Elasticsearch.Net.MultiGetRequestParameters,Elasticsearch.Net.MultiGetRequestParameters})">
            <summary>Represents a GET on /_mget
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-get.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.MgetGetAsync(System.Func{Elasticsearch.Net.MultiGetRequestParameters,Elasticsearch.Net.MultiGetRequestParameters})">
            <summary>Represents a GET on /_mget
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-get.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.MgetGet``1(System.String,System.Func{Elasticsearch.Net.MultiGetRequestParameters,Elasticsearch.Net.MultiGetRequestParameters})">
            <summary>Represents a GET on /{index}/_mget
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-get.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.MgetGetAsync``1(System.String,System.Func{Elasticsearch.Net.MultiGetRequestParameters,Elasticsearch.Net.MultiGetRequestParameters})">
            <summary>Represents a GET on /{index}/_mget
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-get.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.MgetGet(System.String,System.Func{Elasticsearch.Net.MultiGetRequestParameters,Elasticsearch.Net.MultiGetRequestParameters})">
            <summary>Represents a GET on /{index}/_mget
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-get.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.MgetGetAsync(System.String,System.Func{Elasticsearch.Net.MultiGetRequestParameters,Elasticsearch.Net.MultiGetRequestParameters})">
            <summary>Represents a GET on /{index}/_mget
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-get.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.MgetGet``1(System.String,System.String,System.Func{Elasticsearch.Net.MultiGetRequestParameters,Elasticsearch.Net.MultiGetRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_mget
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-get.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.MgetGetAsync``1(System.String,System.String,System.Func{Elasticsearch.Net.MultiGetRequestParameters,Elasticsearch.Net.MultiGetRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_mget
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-get.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.MgetGet(System.String,System.String,System.Func{Elasticsearch.Net.MultiGetRequestParameters,Elasticsearch.Net.MultiGetRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_mget
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-get.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.MgetGetAsync(System.String,System.String,System.Func{Elasticsearch.Net.MultiGetRequestParameters,Elasticsearch.Net.MultiGetRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_mget
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-get.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.Mget``1(System.Object,System.Func{Elasticsearch.Net.MultiGetRequestParameters,Elasticsearch.Net.MultiGetRequestParameters})">
            <summary>Represents a POST on /_mget
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-get.html</para>	
            </summary>
            <param name="body">Document identifiers; can be either `docs` (containing full document information) or `ids` (when index and type is provided in the URL.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.MgetAsync``1(System.Object,System.Func{Elasticsearch.Net.MultiGetRequestParameters,Elasticsearch.Net.MultiGetRequestParameters})">
            <summary>Represents a POST on /_mget
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-get.html</para>	
            </summary>
            <param name="body">Document identifiers; can be either `docs` (containing full document information) or `ids` (when index and type is provided in the URL.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.Mget(System.Object,System.Func{Elasticsearch.Net.MultiGetRequestParameters,Elasticsearch.Net.MultiGetRequestParameters})">
            <summary>Represents a POST on /_mget
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-get.html</para>	
            </summary>
            <param name="body">Document identifiers; can be either `docs` (containing full document information) or `ids` (when index and type is provided in the URL.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.MgetAsync(System.Object,System.Func{Elasticsearch.Net.MultiGetRequestParameters,Elasticsearch.Net.MultiGetRequestParameters})">
            <summary>Represents a POST on /_mget
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-get.html</para>	
            </summary>
            <param name="body">Document identifiers; can be either `docs` (containing full document information) or `ids` (when index and type is provided in the URL.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.Mget``1(System.String,System.Object,System.Func{Elasticsearch.Net.MultiGetRequestParameters,Elasticsearch.Net.MultiGetRequestParameters})">
            <summary>Represents a POST on /{index}/_mget
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-get.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="body">Document identifiers; can be either `docs` (containing full document information) or `ids` (when index and type is provided in the URL.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.MgetAsync``1(System.String,System.Object,System.Func{Elasticsearch.Net.MultiGetRequestParameters,Elasticsearch.Net.MultiGetRequestParameters})">
            <summary>Represents a POST on /{index}/_mget
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-get.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="body">Document identifiers; can be either `docs` (containing full document information) or `ids` (when index and type is provided in the URL.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.Mget(System.String,System.Object,System.Func{Elasticsearch.Net.MultiGetRequestParameters,Elasticsearch.Net.MultiGetRequestParameters})">
            <summary>Represents a POST on /{index}/_mget
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-get.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="body">Document identifiers; can be either `docs` (containing full document information) or `ids` (when index and type is provided in the URL.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.MgetAsync(System.String,System.Object,System.Func{Elasticsearch.Net.MultiGetRequestParameters,Elasticsearch.Net.MultiGetRequestParameters})">
            <summary>Represents a POST on /{index}/_mget
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-get.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="body">Document identifiers; can be either `docs` (containing full document information) or `ids` (when index and type is provided in the URL.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.Mget``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.MultiGetRequestParameters,Elasticsearch.Net.MultiGetRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_mget
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-get.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="body">Document identifiers; can be either `docs` (containing full document information) or `ids` (when index and type is provided in the URL.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.MgetAsync``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.MultiGetRequestParameters,Elasticsearch.Net.MultiGetRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_mget
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-get.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="body">Document identifiers; can be either `docs` (containing full document information) or `ids` (when index and type is provided in the URL.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.Mget(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.MultiGetRequestParameters,Elasticsearch.Net.MultiGetRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_mget
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-get.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="body">Document identifiers; can be either `docs` (containing full document information) or `ids` (when index and type is provided in the URL.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.MgetAsync(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.MultiGetRequestParameters,Elasticsearch.Net.MultiGetRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_mget
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-get.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="body">Document identifiers; can be either `docs` (containing full document information) or `ids` (when index and type is provided in the URL.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.MltGet``1(System.String,System.String,System.String,System.Func{Elasticsearch.Net.MoreLikeThisRequestParameters,Elasticsearch.Net.MoreLikeThisRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/{id}/_mlt
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-more-like-this.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document (use `_all` to fetch the first document matching the ID across all types)</param>
            <param name="id">The document ID</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.MltGetAsync``1(System.String,System.String,System.String,System.Func{Elasticsearch.Net.MoreLikeThisRequestParameters,Elasticsearch.Net.MoreLikeThisRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/{id}/_mlt
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-more-like-this.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document (use `_all` to fetch the first document matching the ID across all types)</param>
            <param name="id">The document ID</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.MltGet(System.String,System.String,System.String,System.Func{Elasticsearch.Net.MoreLikeThisRequestParameters,Elasticsearch.Net.MoreLikeThisRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/{id}/_mlt
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-more-like-this.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document (use `_all` to fetch the first document matching the ID across all types)</param>
            <param name="id">The document ID</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.MltGetAsync(System.String,System.String,System.String,System.Func{Elasticsearch.Net.MoreLikeThisRequestParameters,Elasticsearch.Net.MoreLikeThisRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/{id}/_mlt
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-more-like-this.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document (use `_all` to fetch the first document matching the ID across all types)</param>
            <param name="id">The document ID</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.Mlt``1(System.String,System.String,System.String,System.Object,System.Func{Elasticsearch.Net.MoreLikeThisRequestParameters,Elasticsearch.Net.MoreLikeThisRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/{id}/_mlt
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-more-like-this.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document (use `_all` to fetch the first document matching the ID across all types)</param>
            <param name="id">The document ID</param>
            <param name="body">A specific search request definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.MltAsync``1(System.String,System.String,System.String,System.Object,System.Func{Elasticsearch.Net.MoreLikeThisRequestParameters,Elasticsearch.Net.MoreLikeThisRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/{id}/_mlt
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-more-like-this.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document (use `_all` to fetch the first document matching the ID across all types)</param>
            <param name="id">The document ID</param>
            <param name="body">A specific search request definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.Mlt(System.String,System.String,System.String,System.Object,System.Func{Elasticsearch.Net.MoreLikeThisRequestParameters,Elasticsearch.Net.MoreLikeThisRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/{id}/_mlt
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-more-like-this.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document (use `_all` to fetch the first document matching the ID across all types)</param>
            <param name="id">The document ID</param>
            <param name="body">A specific search request definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.MltAsync(System.String,System.String,System.String,System.Object,System.Func{Elasticsearch.Net.MoreLikeThisRequestParameters,Elasticsearch.Net.MoreLikeThisRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/{id}/_mlt
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-more-like-this.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document (use `_all` to fetch the first document matching the ID across all types)</param>
            <param name="id">The document ID</param>
            <param name="body">A specific search request definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.MpercolateGet``1(System.Func{Elasticsearch.Net.MpercolateRequestParameters,Elasticsearch.Net.MpercolateRequestParameters})">
            <summary>Represents a GET on /_mpercolate
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.MpercolateGetAsync``1(System.Func{Elasticsearch.Net.MpercolateRequestParameters,Elasticsearch.Net.MpercolateRequestParameters})">
            <summary>Represents a GET on /_mpercolate
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.MpercolateGet(System.Func{Elasticsearch.Net.MpercolateRequestParameters,Elasticsearch.Net.MpercolateRequestParameters})">
            <summary>Represents a GET on /_mpercolate
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.MpercolateGetAsync(System.Func{Elasticsearch.Net.MpercolateRequestParameters,Elasticsearch.Net.MpercolateRequestParameters})">
            <summary>Represents a GET on /_mpercolate
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.MpercolateGet``1(System.String,System.Func{Elasticsearch.Net.MpercolateRequestParameters,Elasticsearch.Net.MpercolateRequestParameters})">
            <summary>Represents a GET on /{index}/_mpercolate
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being count percolated to use as default</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.MpercolateGetAsync``1(System.String,System.Func{Elasticsearch.Net.MpercolateRequestParameters,Elasticsearch.Net.MpercolateRequestParameters})">
            <summary>Represents a GET on /{index}/_mpercolate
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being count percolated to use as default</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.MpercolateGet(System.String,System.Func{Elasticsearch.Net.MpercolateRequestParameters,Elasticsearch.Net.MpercolateRequestParameters})">
            <summary>Represents a GET on /{index}/_mpercolate
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being count percolated to use as default</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.MpercolateGetAsync(System.String,System.Func{Elasticsearch.Net.MpercolateRequestParameters,Elasticsearch.Net.MpercolateRequestParameters})">
            <summary>Represents a GET on /{index}/_mpercolate
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being count percolated to use as default</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.MpercolateGet``1(System.String,System.String,System.Func{Elasticsearch.Net.MpercolateRequestParameters,Elasticsearch.Net.MpercolateRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_mpercolate
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being count percolated to use as default</param>
            <param name="type">The type of the document being percolated to use as default.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.MpercolateGetAsync``1(System.String,System.String,System.Func{Elasticsearch.Net.MpercolateRequestParameters,Elasticsearch.Net.MpercolateRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_mpercolate
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being count percolated to use as default</param>
            <param name="type">The type of the document being percolated to use as default.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.MpercolateGet(System.String,System.String,System.Func{Elasticsearch.Net.MpercolateRequestParameters,Elasticsearch.Net.MpercolateRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_mpercolate
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being count percolated to use as default</param>
            <param name="type">The type of the document being percolated to use as default.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.MpercolateGetAsync(System.String,System.String,System.Func{Elasticsearch.Net.MpercolateRequestParameters,Elasticsearch.Net.MpercolateRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_mpercolate
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being count percolated to use as default</param>
            <param name="type">The type of the document being percolated to use as default.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.Mpercolate``1(System.Object,System.Func{Elasticsearch.Net.MpercolateRequestParameters,Elasticsearch.Net.MpercolateRequestParameters})">
            <summary>Represents a POST on /_mpercolate
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="body">The percolate request definitions (header &amp; body pair), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.MpercolateAsync``1(System.Object,System.Func{Elasticsearch.Net.MpercolateRequestParameters,Elasticsearch.Net.MpercolateRequestParameters})">
            <summary>Represents a POST on /_mpercolate
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="body">The percolate request definitions (header &amp; body pair), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.Mpercolate(System.Object,System.Func{Elasticsearch.Net.MpercolateRequestParameters,Elasticsearch.Net.MpercolateRequestParameters})">
            <summary>Represents a POST on /_mpercolate
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="body">The percolate request definitions (header &amp; body pair), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.MpercolateAsync(System.Object,System.Func{Elasticsearch.Net.MpercolateRequestParameters,Elasticsearch.Net.MpercolateRequestParameters})">
            <summary>Represents a POST on /_mpercolate
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="body">The percolate request definitions (header &amp; body pair), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.Mpercolate``1(System.String,System.Object,System.Func{Elasticsearch.Net.MpercolateRequestParameters,Elasticsearch.Net.MpercolateRequestParameters})">
            <summary>Represents a POST on /{index}/_mpercolate
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being count percolated to use as default</param>
            <param name="body">The percolate request definitions (header &amp; body pair), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.MpercolateAsync``1(System.String,System.Object,System.Func{Elasticsearch.Net.MpercolateRequestParameters,Elasticsearch.Net.MpercolateRequestParameters})">
            <summary>Represents a POST on /{index}/_mpercolate
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being count percolated to use as default</param>
            <param name="body">The percolate request definitions (header &amp; body pair), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.Mpercolate(System.String,System.Object,System.Func{Elasticsearch.Net.MpercolateRequestParameters,Elasticsearch.Net.MpercolateRequestParameters})">
            <summary>Represents a POST on /{index}/_mpercolate
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being count percolated to use as default</param>
            <param name="body">The percolate request definitions (header &amp; body pair), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.MpercolateAsync(System.String,System.Object,System.Func{Elasticsearch.Net.MpercolateRequestParameters,Elasticsearch.Net.MpercolateRequestParameters})">
            <summary>Represents a POST on /{index}/_mpercolate
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being count percolated to use as default</param>
            <param name="body">The percolate request definitions (header &amp; body pair), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.Mpercolate``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.MpercolateRequestParameters,Elasticsearch.Net.MpercolateRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_mpercolate
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being count percolated to use as default</param>
            <param name="type">The type of the document being percolated to use as default.</param>
            <param name="body">The percolate request definitions (header &amp; body pair), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.MpercolateAsync``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.MpercolateRequestParameters,Elasticsearch.Net.MpercolateRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_mpercolate
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being count percolated to use as default</param>
            <param name="type">The type of the document being percolated to use as default.</param>
            <param name="body">The percolate request definitions (header &amp; body pair), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.Mpercolate(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.MpercolateRequestParameters,Elasticsearch.Net.MpercolateRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_mpercolate
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being count percolated to use as default</param>
            <param name="type">The type of the document being percolated to use as default.</param>
            <param name="body">The percolate request definitions (header &amp; body pair), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.MpercolateAsync(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.MpercolateRequestParameters,Elasticsearch.Net.MpercolateRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_mpercolate
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being count percolated to use as default</param>
            <param name="type">The type of the document being percolated to use as default.</param>
            <param name="body">The percolate request definitions (header &amp; body pair), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.MsearchGet``1(System.Func{Elasticsearch.Net.MultiSearchRequestParameters,Elasticsearch.Net.MultiSearchRequestParameters})">
            <summary>Represents a GET on /_msearch
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-multi-search.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.MsearchGetAsync``1(System.Func{Elasticsearch.Net.MultiSearchRequestParameters,Elasticsearch.Net.MultiSearchRequestParameters})">
            <summary>Represents a GET on /_msearch
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-multi-search.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.MsearchGet(System.Func{Elasticsearch.Net.MultiSearchRequestParameters,Elasticsearch.Net.MultiSearchRequestParameters})">
            <summary>Represents a GET on /_msearch
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-multi-search.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.MsearchGetAsync(System.Func{Elasticsearch.Net.MultiSearchRequestParameters,Elasticsearch.Net.MultiSearchRequestParameters})">
            <summary>Represents a GET on /_msearch
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-multi-search.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.MsearchGet``1(System.String,System.Func{Elasticsearch.Net.MultiSearchRequestParameters,Elasticsearch.Net.MultiSearchRequestParameters})">
            <summary>Represents a GET on /{index}/_msearch
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-multi-search.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to use as default</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.MsearchGetAsync``1(System.String,System.Func{Elasticsearch.Net.MultiSearchRequestParameters,Elasticsearch.Net.MultiSearchRequestParameters})">
            <summary>Represents a GET on /{index}/_msearch
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-multi-search.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to use as default</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.MsearchGet(System.String,System.Func{Elasticsearch.Net.MultiSearchRequestParameters,Elasticsearch.Net.MultiSearchRequestParameters})">
            <summary>Represents a GET on /{index}/_msearch
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-multi-search.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to use as default</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.MsearchGetAsync(System.String,System.Func{Elasticsearch.Net.MultiSearchRequestParameters,Elasticsearch.Net.MultiSearchRequestParameters})">
            <summary>Represents a GET on /{index}/_msearch
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-multi-search.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to use as default</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.MsearchGet``1(System.String,System.String,System.Func{Elasticsearch.Net.MultiSearchRequestParameters,Elasticsearch.Net.MultiSearchRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_msearch
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-multi-search.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to use as default</param>
            <param name="type">A comma-separated list of document types to use as default</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.MsearchGetAsync``1(System.String,System.String,System.Func{Elasticsearch.Net.MultiSearchRequestParameters,Elasticsearch.Net.MultiSearchRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_msearch
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-multi-search.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to use as default</param>
            <param name="type">A comma-separated list of document types to use as default</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.MsearchGet(System.String,System.String,System.Func{Elasticsearch.Net.MultiSearchRequestParameters,Elasticsearch.Net.MultiSearchRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_msearch
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-multi-search.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to use as default</param>
            <param name="type">A comma-separated list of document types to use as default</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.MsearchGetAsync(System.String,System.String,System.Func{Elasticsearch.Net.MultiSearchRequestParameters,Elasticsearch.Net.MultiSearchRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_msearch
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-multi-search.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to use as default</param>
            <param name="type">A comma-separated list of document types to use as default</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.Msearch``1(System.Object,System.Func{Elasticsearch.Net.MultiSearchRequestParameters,Elasticsearch.Net.MultiSearchRequestParameters})">
            <summary>Represents a POST on /_msearch
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-multi-search.html</para>	
            </summary>
            <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.MsearchAsync``1(System.Object,System.Func{Elasticsearch.Net.MultiSearchRequestParameters,Elasticsearch.Net.MultiSearchRequestParameters})">
            <summary>Represents a POST on /_msearch
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-multi-search.html</para>	
            </summary>
            <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.Msearch(System.Object,System.Func{Elasticsearch.Net.MultiSearchRequestParameters,Elasticsearch.Net.MultiSearchRequestParameters})">
            <summary>Represents a POST on /_msearch
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-multi-search.html</para>	
            </summary>
            <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.MsearchAsync(System.Object,System.Func{Elasticsearch.Net.MultiSearchRequestParameters,Elasticsearch.Net.MultiSearchRequestParameters})">
            <summary>Represents a POST on /_msearch
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-multi-search.html</para>	
            </summary>
            <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.Msearch``1(System.String,System.Object,System.Func{Elasticsearch.Net.MultiSearchRequestParameters,Elasticsearch.Net.MultiSearchRequestParameters})">
            <summary>Represents a POST on /{index}/_msearch
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-multi-search.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to use as default</param>
            <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.MsearchAsync``1(System.String,System.Object,System.Func{Elasticsearch.Net.MultiSearchRequestParameters,Elasticsearch.Net.MultiSearchRequestParameters})">
            <summary>Represents a POST on /{index}/_msearch
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-multi-search.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to use as default</param>
            <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.Msearch(System.String,System.Object,System.Func{Elasticsearch.Net.MultiSearchRequestParameters,Elasticsearch.Net.MultiSearchRequestParameters})">
            <summary>Represents a POST on /{index}/_msearch
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-multi-search.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to use as default</param>
            <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.MsearchAsync(System.String,System.Object,System.Func{Elasticsearch.Net.MultiSearchRequestParameters,Elasticsearch.Net.MultiSearchRequestParameters})">
            <summary>Represents a POST on /{index}/_msearch
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-multi-search.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to use as default</param>
            <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.Msearch``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.MultiSearchRequestParameters,Elasticsearch.Net.MultiSearchRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_msearch
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-multi-search.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to use as default</param>
            <param name="type">A comma-separated list of document types to use as default</param>
            <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.MsearchAsync``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.MultiSearchRequestParameters,Elasticsearch.Net.MultiSearchRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_msearch
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-multi-search.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to use as default</param>
            <param name="type">A comma-separated list of document types to use as default</param>
            <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.Msearch(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.MultiSearchRequestParameters,Elasticsearch.Net.MultiSearchRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_msearch
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-multi-search.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to use as default</param>
            <param name="type">A comma-separated list of document types to use as default</param>
            <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.MsearchAsync(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.MultiSearchRequestParameters,Elasticsearch.Net.MultiSearchRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_msearch
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-multi-search.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to use as default</param>
            <param name="type">A comma-separated list of document types to use as default</param>
            <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.MtermvectorsGet``1(System.Func{Elasticsearch.Net.MultiTermVectorsRequestParameters,Elasticsearch.Net.MultiTermVectorsRequestParameters})">
            <summary>Represents a GET on /_mtermvectors
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-termvectors.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.MtermvectorsGetAsync``1(System.Func{Elasticsearch.Net.MultiTermVectorsRequestParameters,Elasticsearch.Net.MultiTermVectorsRequestParameters})">
            <summary>Represents a GET on /_mtermvectors
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-termvectors.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.MtermvectorsGet(System.Func{Elasticsearch.Net.MultiTermVectorsRequestParameters,Elasticsearch.Net.MultiTermVectorsRequestParameters})">
            <summary>Represents a GET on /_mtermvectors
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-termvectors.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.MtermvectorsGetAsync(System.Func{Elasticsearch.Net.MultiTermVectorsRequestParameters,Elasticsearch.Net.MultiTermVectorsRequestParameters})">
            <summary>Represents a GET on /_mtermvectors
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-termvectors.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.MtermvectorsGet``1(System.String,System.Func{Elasticsearch.Net.MultiTermVectorsRequestParameters,Elasticsearch.Net.MultiTermVectorsRequestParameters})">
            <summary>Represents a GET on /{index}/_mtermvectors
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-termvectors.html</para>	
            </summary>
            <param name="index">The index in which the document resides.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.MtermvectorsGetAsync``1(System.String,System.Func{Elasticsearch.Net.MultiTermVectorsRequestParameters,Elasticsearch.Net.MultiTermVectorsRequestParameters})">
            <summary>Represents a GET on /{index}/_mtermvectors
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-termvectors.html</para>	
            </summary>
            <param name="index">The index in which the document resides.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.MtermvectorsGet(System.String,System.Func{Elasticsearch.Net.MultiTermVectorsRequestParameters,Elasticsearch.Net.MultiTermVectorsRequestParameters})">
            <summary>Represents a GET on /{index}/_mtermvectors
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-termvectors.html</para>	
            </summary>
            <param name="index">The index in which the document resides.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.MtermvectorsGetAsync(System.String,System.Func{Elasticsearch.Net.MultiTermVectorsRequestParameters,Elasticsearch.Net.MultiTermVectorsRequestParameters})">
            <summary>Represents a GET on /{index}/_mtermvectors
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-termvectors.html</para>	
            </summary>
            <param name="index">The index in which the document resides.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.MtermvectorsGet``1(System.String,System.String,System.Func{Elasticsearch.Net.MultiTermVectorsRequestParameters,Elasticsearch.Net.MultiTermVectorsRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_mtermvectors
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-termvectors.html</para>	
            </summary>
            <param name="index">The index in which the document resides.</param>
            <param name="type">The type of the document.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.MtermvectorsGetAsync``1(System.String,System.String,System.Func{Elasticsearch.Net.MultiTermVectorsRequestParameters,Elasticsearch.Net.MultiTermVectorsRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_mtermvectors
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-termvectors.html</para>	
            </summary>
            <param name="index">The index in which the document resides.</param>
            <param name="type">The type of the document.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.MtermvectorsGet(System.String,System.String,System.Func{Elasticsearch.Net.MultiTermVectorsRequestParameters,Elasticsearch.Net.MultiTermVectorsRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_mtermvectors
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-termvectors.html</para>	
            </summary>
            <param name="index">The index in which the document resides.</param>
            <param name="type">The type of the document.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.MtermvectorsGetAsync(System.String,System.String,System.Func{Elasticsearch.Net.MultiTermVectorsRequestParameters,Elasticsearch.Net.MultiTermVectorsRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_mtermvectors
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-termvectors.html</para>	
            </summary>
            <param name="index">The index in which the document resides.</param>
            <param name="type">The type of the document.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.Mtermvectors``1(System.Object,System.Func{Elasticsearch.Net.MultiTermVectorsRequestParameters,Elasticsearch.Net.MultiTermVectorsRequestParameters})">
            <summary>Represents a POST on /_mtermvectors
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-termvectors.html</para>	
            </summary>
            <param name="body">Define ids, parameters or a list of parameters per document here. You must at least provide a list of document ids. See documentation.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.MtermvectorsAsync``1(System.Object,System.Func{Elasticsearch.Net.MultiTermVectorsRequestParameters,Elasticsearch.Net.MultiTermVectorsRequestParameters})">
            <summary>Represents a POST on /_mtermvectors
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-termvectors.html</para>	
            </summary>
            <param name="body">Define ids, parameters or a list of parameters per document here. You must at least provide a list of document ids. See documentation.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.Mtermvectors(System.Object,System.Func{Elasticsearch.Net.MultiTermVectorsRequestParameters,Elasticsearch.Net.MultiTermVectorsRequestParameters})">
            <summary>Represents a POST on /_mtermvectors
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-termvectors.html</para>	
            </summary>
            <param name="body">Define ids, parameters or a list of parameters per document here. You must at least provide a list of document ids. See documentation.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.MtermvectorsAsync(System.Object,System.Func{Elasticsearch.Net.MultiTermVectorsRequestParameters,Elasticsearch.Net.MultiTermVectorsRequestParameters})">
            <summary>Represents a POST on /_mtermvectors
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-termvectors.html</para>	
            </summary>
            <param name="body">Define ids, parameters or a list of parameters per document here. You must at least provide a list of document ids. See documentation.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.Mtermvectors``1(System.String,System.Object,System.Func{Elasticsearch.Net.MultiTermVectorsRequestParameters,Elasticsearch.Net.MultiTermVectorsRequestParameters})">
            <summary>Represents a POST on /{index}/_mtermvectors
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-termvectors.html</para>	
            </summary>
            <param name="index">The index in which the document resides.</param>
            <param name="body">Define ids, parameters or a list of parameters per document here. You must at least provide a list of document ids. See documentation.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.MtermvectorsAsync``1(System.String,System.Object,System.Func{Elasticsearch.Net.MultiTermVectorsRequestParameters,Elasticsearch.Net.MultiTermVectorsRequestParameters})">
            <summary>Represents a POST on /{index}/_mtermvectors
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-termvectors.html</para>	
            </summary>
            <param name="index">The index in which the document resides.</param>
            <param name="body">Define ids, parameters or a list of parameters per document here. You must at least provide a list of document ids. See documentation.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.Mtermvectors(System.String,System.Object,System.Func{Elasticsearch.Net.MultiTermVectorsRequestParameters,Elasticsearch.Net.MultiTermVectorsRequestParameters})">
            <summary>Represents a POST on /{index}/_mtermvectors
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-termvectors.html</para>	
            </summary>
            <param name="index">The index in which the document resides.</param>
            <param name="body">Define ids, parameters or a list of parameters per document here. You must at least provide a list of document ids. See documentation.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.MtermvectorsAsync(System.String,System.Object,System.Func{Elasticsearch.Net.MultiTermVectorsRequestParameters,Elasticsearch.Net.MultiTermVectorsRequestParameters})">
            <summary>Represents a POST on /{index}/_mtermvectors
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-termvectors.html</para>	
            </summary>
            <param name="index">The index in which the document resides.</param>
            <param name="body">Define ids, parameters or a list of parameters per document here. You must at least provide a list of document ids. See documentation.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.Mtermvectors``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.MultiTermVectorsRequestParameters,Elasticsearch.Net.MultiTermVectorsRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_mtermvectors
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-termvectors.html</para>	
            </summary>
            <param name="index">The index in which the document resides.</param>
            <param name="type">The type of the document.</param>
            <param name="body">Define ids, parameters or a list of parameters per document here. You must at least provide a list of document ids. See documentation.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.MtermvectorsAsync``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.MultiTermVectorsRequestParameters,Elasticsearch.Net.MultiTermVectorsRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_mtermvectors
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-termvectors.html</para>	
            </summary>
            <param name="index">The index in which the document resides.</param>
            <param name="type">The type of the document.</param>
            <param name="body">Define ids, parameters or a list of parameters per document here. You must at least provide a list of document ids. See documentation.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.Mtermvectors(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.MultiTermVectorsRequestParameters,Elasticsearch.Net.MultiTermVectorsRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_mtermvectors
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-termvectors.html</para>	
            </summary>
            <param name="index">The index in which the document resides.</param>
            <param name="type">The type of the document.</param>
            <param name="body">Define ids, parameters or a list of parameters per document here. You must at least provide a list of document ids. See documentation.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.MtermvectorsAsync(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.MultiTermVectorsRequestParameters,Elasticsearch.Net.MultiTermVectorsRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_mtermvectors
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-termvectors.html</para>	
            </summary>
            <param name="index">The index in which the document resides.</param>
            <param name="type">The type of the document.</param>
            <param name="body">Define ids, parameters or a list of parameters per document here. You must at least provide a list of document ids. See documentation.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.NodesHotThreadsForAll``1(System.Func{Elasticsearch.Net.NodesHotThreadsRequestParameters,Elasticsearch.Net.NodesHotThreadsRequestParameters})">
            <summary>Represents a GET on /_cluster/nodes/hotthreads
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-hot-threads.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.NodesHotThreadsForAllAsync``1(System.Func{Elasticsearch.Net.NodesHotThreadsRequestParameters,Elasticsearch.Net.NodesHotThreadsRequestParameters})">
            <summary>Represents a GET on /_cluster/nodes/hotthreads
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-hot-threads.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.NodesHotThreadsForAll(System.Func{Elasticsearch.Net.NodesHotThreadsRequestParameters,Elasticsearch.Net.NodesHotThreadsRequestParameters})">
            <summary>Represents a GET on /_cluster/nodes/hotthreads
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-hot-threads.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.NodesHotThreadsForAllAsync(System.Func{Elasticsearch.Net.NodesHotThreadsRequestParameters,Elasticsearch.Net.NodesHotThreadsRequestParameters})">
            <summary>Represents a GET on /_cluster/nodes/hotthreads
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-hot-threads.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.NodesHotThreads``1(System.String,System.Func{Elasticsearch.Net.NodesHotThreadsRequestParameters,Elasticsearch.Net.NodesHotThreadsRequestParameters})">
            <summary>Represents a GET on /_cluster/nodes/{node_id}/hotthreads
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-hot-threads.html</para>	
            </summary>
            <param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.NodesHotThreadsAsync``1(System.String,System.Func{Elasticsearch.Net.NodesHotThreadsRequestParameters,Elasticsearch.Net.NodesHotThreadsRequestParameters})">
            <summary>Represents a GET on /_cluster/nodes/{node_id}/hotthreads
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-hot-threads.html</para>	
            </summary>
            <param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.NodesHotThreads(System.String,System.Func{Elasticsearch.Net.NodesHotThreadsRequestParameters,Elasticsearch.Net.NodesHotThreadsRequestParameters})">
            <summary>Represents a GET on /_cluster/nodes/{node_id}/hotthreads
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-hot-threads.html</para>	
            </summary>
            <param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.NodesHotThreadsAsync(System.String,System.Func{Elasticsearch.Net.NodesHotThreadsRequestParameters,Elasticsearch.Net.NodesHotThreadsRequestParameters})">
            <summary>Represents a GET on /_cluster/nodes/{node_id}/hotthreads
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-hot-threads.html</para>	
            </summary>
            <param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.NodesInfoForAll``1(System.Func{Elasticsearch.Net.NodesInfoRequestParameters,Elasticsearch.Net.NodesInfoRequestParameters})">
            <summary>Represents a GET on /_nodes
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-info.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.NodesInfoForAllAsync``1(System.Func{Elasticsearch.Net.NodesInfoRequestParameters,Elasticsearch.Net.NodesInfoRequestParameters})">
            <summary>Represents a GET on /_nodes
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-info.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.NodesInfoForAll(System.Func{Elasticsearch.Net.NodesInfoRequestParameters,Elasticsearch.Net.NodesInfoRequestParameters})">
            <summary>Represents a GET on /_nodes
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-info.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.NodesInfoForAllAsync(System.Func{Elasticsearch.Net.NodesInfoRequestParameters,Elasticsearch.Net.NodesInfoRequestParameters})">
            <summary>Represents a GET on /_nodes
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-info.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.NodesInfo``1(System.String,System.Func{Elasticsearch.Net.NodesInfoRequestParameters,Elasticsearch.Net.NodesInfoRequestParameters})">
            <summary>Represents a GET on /_nodes/{node_id}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-info.html</para>	
            </summary>
            <param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.NodesInfoAsync``1(System.String,System.Func{Elasticsearch.Net.NodesInfoRequestParameters,Elasticsearch.Net.NodesInfoRequestParameters})">
            <summary>Represents a GET on /_nodes/{node_id}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-info.html</para>	
            </summary>
            <param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.NodesInfo(System.String,System.Func{Elasticsearch.Net.NodesInfoRequestParameters,Elasticsearch.Net.NodesInfoRequestParameters})">
            <summary>Represents a GET on /_nodes/{node_id}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-info.html</para>	
            </summary>
            <param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.NodesInfoAsync(System.String,System.Func{Elasticsearch.Net.NodesInfoRequestParameters,Elasticsearch.Net.NodesInfoRequestParameters})">
            <summary>Represents a GET on /_nodes/{node_id}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-info.html</para>	
            </summary>
            <param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.NodesInfoForAll``1(System.String,System.Func{Elasticsearch.Net.NodesInfoRequestParameters,Elasticsearch.Net.NodesInfoRequestParameters})">
            <summary>Represents a GET on /_nodes/{metric}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-info.html</para>	
            </summary>
            <param name="metric">A comma-separated list of metrics you wish returned. Leave empty to return all.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.NodesInfoForAllAsync``1(System.String,System.Func{Elasticsearch.Net.NodesInfoRequestParameters,Elasticsearch.Net.NodesInfoRequestParameters})">
            <summary>Represents a GET on /_nodes/{metric}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-info.html</para>	
            </summary>
            <param name="metric">A comma-separated list of metrics you wish returned. Leave empty to return all.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.NodesInfoForAll(System.String,System.Func{Elasticsearch.Net.NodesInfoRequestParameters,Elasticsearch.Net.NodesInfoRequestParameters})">
            <summary>Represents a GET on /_nodes/{metric}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-info.html</para>	
            </summary>
            <param name="metric">A comma-separated list of metrics you wish returned. Leave empty to return all.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.NodesInfoForAllAsync(System.String,System.Func{Elasticsearch.Net.NodesInfoRequestParameters,Elasticsearch.Net.NodesInfoRequestParameters})">
            <summary>Represents a GET on /_nodes/{metric}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-info.html</para>	
            </summary>
            <param name="metric">A comma-separated list of metrics you wish returned. Leave empty to return all.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.NodesInfo``1(System.String,System.String,System.Func{Elasticsearch.Net.NodesInfoRequestParameters,Elasticsearch.Net.NodesInfoRequestParameters})">
            <summary>Represents a GET on /_nodes/{node_id}/{metric}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-info.html</para>	
            </summary>
            <param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
            <param name="metric">A comma-separated list of metrics you wish returned. Leave empty to return all.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.NodesInfoAsync``1(System.String,System.String,System.Func{Elasticsearch.Net.NodesInfoRequestParameters,Elasticsearch.Net.NodesInfoRequestParameters})">
            <summary>Represents a GET on /_nodes/{node_id}/{metric}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-info.html</para>	
            </summary>
            <param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
            <param name="metric">A comma-separated list of metrics you wish returned. Leave empty to return all.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.NodesInfo(System.String,System.String,System.Func{Elasticsearch.Net.NodesInfoRequestParameters,Elasticsearch.Net.NodesInfoRequestParameters})">
            <summary>Represents a GET on /_nodes/{node_id}/{metric}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-info.html</para>	
            </summary>
            <param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
            <param name="metric">A comma-separated list of metrics you wish returned. Leave empty to return all.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.NodesInfoAsync(System.String,System.String,System.Func{Elasticsearch.Net.NodesInfoRequestParameters,Elasticsearch.Net.NodesInfoRequestParameters})">
            <summary>Represents a GET on /_nodes/{node_id}/{metric}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-info.html</para>	
            </summary>
            <param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
            <param name="metric">A comma-separated list of metrics you wish returned. Leave empty to return all.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.NodesShutdownForAll``1(System.Func{Elasticsearch.Net.NodesShutdownRequestParameters,Elasticsearch.Net.NodesShutdownRequestParameters})">
            <summary>Represents a POST on /_shutdown
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-shutdown.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.NodesShutdownForAllAsync``1(System.Func{Elasticsearch.Net.NodesShutdownRequestParameters,Elasticsearch.Net.NodesShutdownRequestParameters})">
            <summary>Represents a POST on /_shutdown
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-shutdown.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.NodesShutdownForAll(System.Func{Elasticsearch.Net.NodesShutdownRequestParameters,Elasticsearch.Net.NodesShutdownRequestParameters})">
            <summary>Represents a POST on /_shutdown
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-shutdown.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.NodesShutdownForAllAsync(System.Func{Elasticsearch.Net.NodesShutdownRequestParameters,Elasticsearch.Net.NodesShutdownRequestParameters})">
            <summary>Represents a POST on /_shutdown
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-shutdown.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.NodesShutdown``1(System.String,System.Func{Elasticsearch.Net.NodesShutdownRequestParameters,Elasticsearch.Net.NodesShutdownRequestParameters})">
            <summary>Represents a POST on /_cluster/nodes/{node_id}/_shutdown
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-shutdown.html</para>	
            </summary>
            <param name="node_id">A comma-separated list of node IDs or names to perform the operation on; use `_local` to perform the operation on the node you&#39;re connected to, leave empty to perform the operation on all nodes</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.NodesShutdownAsync``1(System.String,System.Func{Elasticsearch.Net.NodesShutdownRequestParameters,Elasticsearch.Net.NodesShutdownRequestParameters})">
            <summary>Represents a POST on /_cluster/nodes/{node_id}/_shutdown
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-shutdown.html</para>	
            </summary>
            <param name="node_id">A comma-separated list of node IDs or names to perform the operation on; use `_local` to perform the operation on the node you&#39;re connected to, leave empty to perform the operation on all nodes</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.NodesShutdown(System.String,System.Func{Elasticsearch.Net.NodesShutdownRequestParameters,Elasticsearch.Net.NodesShutdownRequestParameters})">
            <summary>Represents a POST on /_cluster/nodes/{node_id}/_shutdown
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-shutdown.html</para>	
            </summary>
            <param name="node_id">A comma-separated list of node IDs or names to perform the operation on; use `_local` to perform the operation on the node you&#39;re connected to, leave empty to perform the operation on all nodes</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.NodesShutdownAsync(System.String,System.Func{Elasticsearch.Net.NodesShutdownRequestParameters,Elasticsearch.Net.NodesShutdownRequestParameters})">
            <summary>Represents a POST on /_cluster/nodes/{node_id}/_shutdown
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-shutdown.html</para>	
            </summary>
            <param name="node_id">A comma-separated list of node IDs or names to perform the operation on; use `_local` to perform the operation on the node you&#39;re connected to, leave empty to perform the operation on all nodes</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.NodesStatsForAll``1(System.Func{Elasticsearch.Net.NodesStatsRequestParameters,Elasticsearch.Net.NodesStatsRequestParameters})">
            <summary>Represents a GET on /_nodes/stats
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-stats.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.NodesStatsForAllAsync``1(System.Func{Elasticsearch.Net.NodesStatsRequestParameters,Elasticsearch.Net.NodesStatsRequestParameters})">
            <summary>Represents a GET on /_nodes/stats
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-stats.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.NodesStatsForAll(System.Func{Elasticsearch.Net.NodesStatsRequestParameters,Elasticsearch.Net.NodesStatsRequestParameters})">
            <summary>Represents a GET on /_nodes/stats
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-stats.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.NodesStatsForAllAsync(System.Func{Elasticsearch.Net.NodesStatsRequestParameters,Elasticsearch.Net.NodesStatsRequestParameters})">
            <summary>Represents a GET on /_nodes/stats
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-stats.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.NodesStats``1(System.String,System.Func{Elasticsearch.Net.NodesStatsRequestParameters,Elasticsearch.Net.NodesStatsRequestParameters})">
            <summary>Represents a GET on /_nodes/{node_id}/stats
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-stats.html</para>	
            </summary>
            <param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.NodesStatsAsync``1(System.String,System.Func{Elasticsearch.Net.NodesStatsRequestParameters,Elasticsearch.Net.NodesStatsRequestParameters})">
            <summary>Represents a GET on /_nodes/{node_id}/stats
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-stats.html</para>	
            </summary>
            <param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.NodesStats(System.String,System.Func{Elasticsearch.Net.NodesStatsRequestParameters,Elasticsearch.Net.NodesStatsRequestParameters})">
            <summary>Represents a GET on /_nodes/{node_id}/stats
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-stats.html</para>	
            </summary>
            <param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.NodesStatsAsync(System.String,System.Func{Elasticsearch.Net.NodesStatsRequestParameters,Elasticsearch.Net.NodesStatsRequestParameters})">
            <summary>Represents a GET on /_nodes/{node_id}/stats
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-stats.html</para>	
            </summary>
            <param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.NodesStatsForAll``1(System.String,System.Func{Elasticsearch.Net.NodesStatsRequestParameters,Elasticsearch.Net.NodesStatsRequestParameters})">
            <summary>Represents a GET on /_nodes/stats/{metric}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-stats.html</para>	
            </summary>
            <param name="metric">Limit the information returned to the specified metrics</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.NodesStatsForAllAsync``1(System.String,System.Func{Elasticsearch.Net.NodesStatsRequestParameters,Elasticsearch.Net.NodesStatsRequestParameters})">
            <summary>Represents a GET on /_nodes/stats/{metric}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-stats.html</para>	
            </summary>
            <param name="metric">Limit the information returned to the specified metrics</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.NodesStatsForAll(System.String,System.Func{Elasticsearch.Net.NodesStatsRequestParameters,Elasticsearch.Net.NodesStatsRequestParameters})">
            <summary>Represents a GET on /_nodes/stats/{metric}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-stats.html</para>	
            </summary>
            <param name="metric">Limit the information returned to the specified metrics</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.NodesStatsForAllAsync(System.String,System.Func{Elasticsearch.Net.NodesStatsRequestParameters,Elasticsearch.Net.NodesStatsRequestParameters})">
            <summary>Represents a GET on /_nodes/stats/{metric}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-stats.html</para>	
            </summary>
            <param name="metric">Limit the information returned to the specified metrics</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.NodesStats``1(System.String,System.String,System.Func{Elasticsearch.Net.NodesStatsRequestParameters,Elasticsearch.Net.NodesStatsRequestParameters})">
            <summary>Represents a GET on /_nodes/{node_id}/stats/{metric}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-stats.html</para>	
            </summary>
            <param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
            <param name="metric">Limit the information returned to the specified metrics</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.NodesStatsAsync``1(System.String,System.String,System.Func{Elasticsearch.Net.NodesStatsRequestParameters,Elasticsearch.Net.NodesStatsRequestParameters})">
            <summary>Represents a GET on /_nodes/{node_id}/stats/{metric}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-stats.html</para>	
            </summary>
            <param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
            <param name="metric">Limit the information returned to the specified metrics</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.NodesStats(System.String,System.String,System.Func{Elasticsearch.Net.NodesStatsRequestParameters,Elasticsearch.Net.NodesStatsRequestParameters})">
            <summary>Represents a GET on /_nodes/{node_id}/stats/{metric}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-stats.html</para>	
            </summary>
            <param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
            <param name="metric">Limit the information returned to the specified metrics</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.NodesStatsAsync(System.String,System.String,System.Func{Elasticsearch.Net.NodesStatsRequestParameters,Elasticsearch.Net.NodesStatsRequestParameters})">
            <summary>Represents a GET on /_nodes/{node_id}/stats/{metric}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-stats.html</para>	
            </summary>
            <param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
            <param name="metric">Limit the information returned to the specified metrics</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.NodesStatsForAll``1(System.String,System.String,System.Func{Elasticsearch.Net.NodesStatsRequestParameters,Elasticsearch.Net.NodesStatsRequestParameters})">
            <summary>Represents a GET on /_nodes/stats/{metric}/{index_metric}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-stats.html</para>	
            </summary>
            <param name="metric">Limit the information returned to the specified metrics</param>
            <param name="index_metric">Limit the information returned for `indices` metric to the specific index metrics. Isn&#39;t used if `indices` (or `all`) metric isn&#39;t specified.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.NodesStatsForAllAsync``1(System.String,System.String,System.Func{Elasticsearch.Net.NodesStatsRequestParameters,Elasticsearch.Net.NodesStatsRequestParameters})">
            <summary>Represents a GET on /_nodes/stats/{metric}/{index_metric}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-stats.html</para>	
            </summary>
            <param name="metric">Limit the information returned to the specified metrics</param>
            <param name="index_metric">Limit the information returned for `indices` metric to the specific index metrics. Isn&#39;t used if `indices` (or `all`) metric isn&#39;t specified.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.NodesStatsForAll(System.String,System.String,System.Func{Elasticsearch.Net.NodesStatsRequestParameters,Elasticsearch.Net.NodesStatsRequestParameters})">
            <summary>Represents a GET on /_nodes/stats/{metric}/{index_metric}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-stats.html</para>	
            </summary>
            <param name="metric">Limit the information returned to the specified metrics</param>
            <param name="index_metric">Limit the information returned for `indices` metric to the specific index metrics. Isn&#39;t used if `indices` (or `all`) metric isn&#39;t specified.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.NodesStatsForAllAsync(System.String,System.String,System.Func{Elasticsearch.Net.NodesStatsRequestParameters,Elasticsearch.Net.NodesStatsRequestParameters})">
            <summary>Represents a GET on /_nodes/stats/{metric}/{index_metric}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-stats.html</para>	
            </summary>
            <param name="metric">Limit the information returned to the specified metrics</param>
            <param name="index_metric">Limit the information returned for `indices` metric to the specific index metrics. Isn&#39;t used if `indices` (or `all`) metric isn&#39;t specified.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.NodesStats``1(System.String,System.String,System.String,System.Func{Elasticsearch.Net.NodesStatsRequestParameters,Elasticsearch.Net.NodesStatsRequestParameters})">
            <summary>Represents a GET on /_nodes/{node_id}/stats/{metric}/{index_metric}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-stats.html</para>	
            </summary>
            <param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
            <param name="metric">Limit the information returned to the specified metrics</param>
            <param name="index_metric">Limit the information returned for `indices` metric to the specific index metrics. Isn&#39;t used if `indices` (or `all`) metric isn&#39;t specified.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.NodesStatsAsync``1(System.String,System.String,System.String,System.Func{Elasticsearch.Net.NodesStatsRequestParameters,Elasticsearch.Net.NodesStatsRequestParameters})">
            <summary>Represents a GET on /_nodes/{node_id}/stats/{metric}/{index_metric}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-stats.html</para>	
            </summary>
            <param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
            <param name="metric">Limit the information returned to the specified metrics</param>
            <param name="index_metric">Limit the information returned for `indices` metric to the specific index metrics. Isn&#39;t used if `indices` (or `all`) metric isn&#39;t specified.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.NodesStats(System.String,System.String,System.String,System.Func{Elasticsearch.Net.NodesStatsRequestParameters,Elasticsearch.Net.NodesStatsRequestParameters})">
            <summary>Represents a GET on /_nodes/{node_id}/stats/{metric}/{index_metric}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-stats.html</para>	
            </summary>
            <param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
            <param name="metric">Limit the information returned to the specified metrics</param>
            <param name="index_metric">Limit the information returned for `indices` metric to the specific index metrics. Isn&#39;t used if `indices` (or `all`) metric isn&#39;t specified.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.NodesStatsAsync(System.String,System.String,System.String,System.Func{Elasticsearch.Net.NodesStatsRequestParameters,Elasticsearch.Net.NodesStatsRequestParameters})">
            <summary>Represents a GET on /_nodes/{node_id}/stats/{metric}/{index_metric}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-stats.html</para>	
            </summary>
            <param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
            <param name="metric">Limit the information returned to the specified metrics</param>
            <param name="index_metric">Limit the information returned for `indices` metric to the specific index metrics. Isn&#39;t used if `indices` (or `all`) metric isn&#39;t specified.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.PercolateGet``1(System.String,System.String,System.Func{Elasticsearch.Net.PercolateRequestParameters,Elasticsearch.Net.PercolateRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_percolate
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being percolated.</param>
            <param name="type">The type of the document being percolated.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.PercolateGetAsync``1(System.String,System.String,System.Func{Elasticsearch.Net.PercolateRequestParameters,Elasticsearch.Net.PercolateRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_percolate
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being percolated.</param>
            <param name="type">The type of the document being percolated.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.PercolateGet(System.String,System.String,System.Func{Elasticsearch.Net.PercolateRequestParameters,Elasticsearch.Net.PercolateRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_percolate
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being percolated.</param>
            <param name="type">The type of the document being percolated.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.PercolateGetAsync(System.String,System.String,System.Func{Elasticsearch.Net.PercolateRequestParameters,Elasticsearch.Net.PercolateRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_percolate
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being percolated.</param>
            <param name="type">The type of the document being percolated.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.PercolateGet``1(System.String,System.String,System.String,System.Func{Elasticsearch.Net.PercolateRequestParameters,Elasticsearch.Net.PercolateRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/{id}/_percolate
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being percolated.</param>
            <param name="type">The type of the document being percolated.</param>
            <param name="id">Substitute the document in the request body with a document that is known by the specified id. On top of the id, the index and type parameter will be used to retrieve the document from within the cluster.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.PercolateGetAsync``1(System.String,System.String,System.String,System.Func{Elasticsearch.Net.PercolateRequestParameters,Elasticsearch.Net.PercolateRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/{id}/_percolate
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being percolated.</param>
            <param name="type">The type of the document being percolated.</param>
            <param name="id">Substitute the document in the request body with a document that is known by the specified id. On top of the id, the index and type parameter will be used to retrieve the document from within the cluster.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.PercolateGet(System.String,System.String,System.String,System.Func{Elasticsearch.Net.PercolateRequestParameters,Elasticsearch.Net.PercolateRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/{id}/_percolate
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being percolated.</param>
            <param name="type">The type of the document being percolated.</param>
            <param name="id">Substitute the document in the request body with a document that is known by the specified id. On top of the id, the index and type parameter will be used to retrieve the document from within the cluster.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.PercolateGetAsync(System.String,System.String,System.String,System.Func{Elasticsearch.Net.PercolateRequestParameters,Elasticsearch.Net.PercolateRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/{id}/_percolate
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being percolated.</param>
            <param name="type">The type of the document being percolated.</param>
            <param name="id">Substitute the document in the request body with a document that is known by the specified id. On top of the id, the index and type parameter will be used to retrieve the document from within the cluster.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.Percolate``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.PercolateRequestParameters,Elasticsearch.Net.PercolateRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_percolate
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being percolated.</param>
            <param name="type">The type of the document being percolated.</param>
            <param name="body">The percolator request definition using the percolate DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.PercolateAsync``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.PercolateRequestParameters,Elasticsearch.Net.PercolateRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_percolate
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being percolated.</param>
            <param name="type">The type of the document being percolated.</param>
            <param name="body">The percolator request definition using the percolate DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.Percolate(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.PercolateRequestParameters,Elasticsearch.Net.PercolateRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_percolate
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being percolated.</param>
            <param name="type">The type of the document being percolated.</param>
            <param name="body">The percolator request definition using the percolate DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.PercolateAsync(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.PercolateRequestParameters,Elasticsearch.Net.PercolateRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_percolate
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being percolated.</param>
            <param name="type">The type of the document being percolated.</param>
            <param name="body">The percolator request definition using the percolate DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.Percolate``1(System.String,System.String,System.String,System.Object,System.Func{Elasticsearch.Net.PercolateRequestParameters,Elasticsearch.Net.PercolateRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/{id}/_percolate
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being percolated.</param>
            <param name="type">The type of the document being percolated.</param>
            <param name="id">Substitute the document in the request body with a document that is known by the specified id. On top of the id, the index and type parameter will be used to retrieve the document from within the cluster.</param>
            <param name="body">The percolator request definition using the percolate DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.PercolateAsync``1(System.String,System.String,System.String,System.Object,System.Func{Elasticsearch.Net.PercolateRequestParameters,Elasticsearch.Net.PercolateRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/{id}/_percolate
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being percolated.</param>
            <param name="type">The type of the document being percolated.</param>
            <param name="id">Substitute the document in the request body with a document that is known by the specified id. On top of the id, the index and type parameter will be used to retrieve the document from within the cluster.</param>
            <param name="body">The percolator request definition using the percolate DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.Percolate(System.String,System.String,System.String,System.Object,System.Func{Elasticsearch.Net.PercolateRequestParameters,Elasticsearch.Net.PercolateRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/{id}/_percolate
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being percolated.</param>
            <param name="type">The type of the document being percolated.</param>
            <param name="id">Substitute the document in the request body with a document that is known by the specified id. On top of the id, the index and type parameter will be used to retrieve the document from within the cluster.</param>
            <param name="body">The percolator request definition using the percolate DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.PercolateAsync(System.String,System.String,System.String,System.Object,System.Func{Elasticsearch.Net.PercolateRequestParameters,Elasticsearch.Net.PercolateRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/{id}/_percolate
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being percolated.</param>
            <param name="type">The type of the document being percolated.</param>
            <param name="id">Substitute the document in the request body with a document that is known by the specified id. On top of the id, the index and type parameter will be used to retrieve the document from within the cluster.</param>
            <param name="body">The percolator request definition using the percolate DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.Ping``1(System.Func{Elasticsearch.Net.PingRequestParameters,Elasticsearch.Net.PingRequestParameters})">
            <summary>Represents a HEAD on /
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.PingAsync``1(System.Func{Elasticsearch.Net.PingRequestParameters,Elasticsearch.Net.PingRequestParameters})">
            <summary>Represents a HEAD on /
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.Ping(System.Func{Elasticsearch.Net.PingRequestParameters,Elasticsearch.Net.PingRequestParameters})">
            <summary>Represents a HEAD on /
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.PingAsync(System.Func{Elasticsearch.Net.PingRequestParameters,Elasticsearch.Net.PingRequestParameters})">
            <summary>Represents a HEAD on /
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.ScrollGet``1(System.Func{Elasticsearch.Net.ScrollRequestParameters,Elasticsearch.Net.ScrollRequestParameters})">
            <summary>Represents a GET on /_search/scroll
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-request-scroll.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.ScrollGetAsync``1(System.Func{Elasticsearch.Net.ScrollRequestParameters,Elasticsearch.Net.ScrollRequestParameters})">
            <summary>Represents a GET on /_search/scroll
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-request-scroll.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.ScrollGet(System.Func{Elasticsearch.Net.ScrollRequestParameters,Elasticsearch.Net.ScrollRequestParameters})">
            <summary>Represents a GET on /_search/scroll
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-request-scroll.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.ScrollGetAsync(System.Func{Elasticsearch.Net.ScrollRequestParameters,Elasticsearch.Net.ScrollRequestParameters})">
            <summary>Represents a GET on /_search/scroll
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-request-scroll.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.ScrollGet``1(System.String,System.Func{Elasticsearch.Net.ScrollRequestParameters,Elasticsearch.Net.ScrollRequestParameters})">
            <summary>Represents a GET on /_search/scroll/{scroll_id}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-request-scroll.html</para>	
            </summary>
            <param name="scroll_id">The scroll ID</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.ScrollGetAsync``1(System.String,System.Func{Elasticsearch.Net.ScrollRequestParameters,Elasticsearch.Net.ScrollRequestParameters})">
            <summary>Represents a GET on /_search/scroll/{scroll_id}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-request-scroll.html</para>	
            </summary>
            <param name="scroll_id">The scroll ID</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.ScrollGet(System.String,System.Func{Elasticsearch.Net.ScrollRequestParameters,Elasticsearch.Net.ScrollRequestParameters})">
            <summary>Represents a GET on /_search/scroll/{scroll_id}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-request-scroll.html</para>	
            </summary>
            <param name="scroll_id">The scroll ID</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.ScrollGetAsync(System.String,System.Func{Elasticsearch.Net.ScrollRequestParameters,Elasticsearch.Net.ScrollRequestParameters})">
            <summary>Represents a GET on /_search/scroll/{scroll_id}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-request-scroll.html</para>	
            </summary>
            <param name="scroll_id">The scroll ID</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.Scroll``1(System.Object,System.Func{Elasticsearch.Net.ScrollRequestParameters,Elasticsearch.Net.ScrollRequestParameters})">
            <summary>Represents a POST on /_search/scroll
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-request-scroll.html</para>	
            </summary>
            <param name="body">The scroll ID if not passed by URL or query parameter.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.ScrollAsync``1(System.Object,System.Func{Elasticsearch.Net.ScrollRequestParameters,Elasticsearch.Net.ScrollRequestParameters})">
            <summary>Represents a POST on /_search/scroll
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-request-scroll.html</para>	
            </summary>
            <param name="body">The scroll ID if not passed by URL or query parameter.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.Scroll(System.Object,System.Func{Elasticsearch.Net.ScrollRequestParameters,Elasticsearch.Net.ScrollRequestParameters})">
            <summary>Represents a POST on /_search/scroll
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-request-scroll.html</para>	
            </summary>
            <param name="body">The scroll ID if not passed by URL or query parameter.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.ScrollAsync(System.Object,System.Func{Elasticsearch.Net.ScrollRequestParameters,Elasticsearch.Net.ScrollRequestParameters})">
            <summary>Represents a POST on /_search/scroll
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-request-scroll.html</para>	
            </summary>
            <param name="body">The scroll ID if not passed by URL or query parameter.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.Scroll``1(System.String,System.Object,System.Func{Elasticsearch.Net.ScrollRequestParameters,Elasticsearch.Net.ScrollRequestParameters})">
            <summary>Represents a POST on /_search/scroll/{scroll_id}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-request-scroll.html</para>	
            </summary>
            <param name="scroll_id">The scroll ID</param>
            <param name="body">The scroll ID if not passed by URL or query parameter.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.ScrollAsync``1(System.String,System.Object,System.Func{Elasticsearch.Net.ScrollRequestParameters,Elasticsearch.Net.ScrollRequestParameters})">
            <summary>Represents a POST on /_search/scroll/{scroll_id}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-request-scroll.html</para>	
            </summary>
            <param name="scroll_id">The scroll ID</param>
            <param name="body">The scroll ID if not passed by URL or query parameter.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.Scroll(System.String,System.Object,System.Func{Elasticsearch.Net.ScrollRequestParameters,Elasticsearch.Net.ScrollRequestParameters})">
            <summary>Represents a POST on /_search/scroll/{scroll_id}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-request-scroll.html</para>	
            </summary>
            <param name="scroll_id">The scroll ID</param>
            <param name="body">The scroll ID if not passed by URL or query parameter.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.ScrollAsync(System.String,System.Object,System.Func{Elasticsearch.Net.ScrollRequestParameters,Elasticsearch.Net.ScrollRequestParameters})">
            <summary>Represents a POST on /_search/scroll/{scroll_id}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-request-scroll.html</para>	
            </summary>
            <param name="scroll_id">The scroll ID</param>
            <param name="body">The scroll ID if not passed by URL or query parameter.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SearchGet``1(System.Func{Elasticsearch.Net.SearchRequestParameters,Elasticsearch.Net.SearchRequestParameters})">
            <summary>Represents a GET on /_search
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-search.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SearchGetAsync``1(System.Func{Elasticsearch.Net.SearchRequestParameters,Elasticsearch.Net.SearchRequestParameters})">
            <summary>Represents a GET on /_search
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-search.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SearchGet(System.Func{Elasticsearch.Net.SearchRequestParameters,Elasticsearch.Net.SearchRequestParameters})">
            <summary>Represents a GET on /_search
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-search.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SearchGetAsync(System.Func{Elasticsearch.Net.SearchRequestParameters,Elasticsearch.Net.SearchRequestParameters})">
            <summary>Represents a GET on /_search
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-search.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SearchGet``1(System.String,System.Func{Elasticsearch.Net.SearchRequestParameters,Elasticsearch.Net.SearchRequestParameters})">
            <summary>Represents a GET on /{index}/_search
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-search.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SearchGetAsync``1(System.String,System.Func{Elasticsearch.Net.SearchRequestParameters,Elasticsearch.Net.SearchRequestParameters})">
            <summary>Represents a GET on /{index}/_search
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-search.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SearchGet(System.String,System.Func{Elasticsearch.Net.SearchRequestParameters,Elasticsearch.Net.SearchRequestParameters})">
            <summary>Represents a GET on /{index}/_search
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-search.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SearchGetAsync(System.String,System.Func{Elasticsearch.Net.SearchRequestParameters,Elasticsearch.Net.SearchRequestParameters})">
            <summary>Represents a GET on /{index}/_search
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-search.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SearchGet``1(System.String,System.String,System.Func{Elasticsearch.Net.SearchRequestParameters,Elasticsearch.Net.SearchRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_search
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-search.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
            <param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SearchGetAsync``1(System.String,System.String,System.Func{Elasticsearch.Net.SearchRequestParameters,Elasticsearch.Net.SearchRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_search
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-search.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
            <param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SearchGet(System.String,System.String,System.Func{Elasticsearch.Net.SearchRequestParameters,Elasticsearch.Net.SearchRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_search
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-search.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
            <param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SearchGetAsync(System.String,System.String,System.Func{Elasticsearch.Net.SearchRequestParameters,Elasticsearch.Net.SearchRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_search
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-search.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
            <param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.Search``1(System.Object,System.Func{Elasticsearch.Net.SearchRequestParameters,Elasticsearch.Net.SearchRequestParameters})">
            <summary>Represents a POST on /_search
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-search.html</para>	
            </summary>
            <param name="body">The search definition using the Query DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SearchAsync``1(System.Object,System.Func{Elasticsearch.Net.SearchRequestParameters,Elasticsearch.Net.SearchRequestParameters})">
            <summary>Represents a POST on /_search
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-search.html</para>	
            </summary>
            <param name="body">The search definition using the Query DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.Search(System.Object,System.Func{Elasticsearch.Net.SearchRequestParameters,Elasticsearch.Net.SearchRequestParameters})">
            <summary>Represents a POST on /_search
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-search.html</para>	
            </summary>
            <param name="body">The search definition using the Query DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SearchAsync(System.Object,System.Func{Elasticsearch.Net.SearchRequestParameters,Elasticsearch.Net.SearchRequestParameters})">
            <summary>Represents a POST on /_search
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-search.html</para>	
            </summary>
            <param name="body">The search definition using the Query DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.Search``1(System.String,System.Object,System.Func{Elasticsearch.Net.SearchRequestParameters,Elasticsearch.Net.SearchRequestParameters})">
            <summary>Represents a POST on /{index}/_search
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-search.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
            <param name="body">The search definition using the Query DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SearchAsync``1(System.String,System.Object,System.Func{Elasticsearch.Net.SearchRequestParameters,Elasticsearch.Net.SearchRequestParameters})">
            <summary>Represents a POST on /{index}/_search
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-search.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
            <param name="body">The search definition using the Query DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.Search(System.String,System.Object,System.Func{Elasticsearch.Net.SearchRequestParameters,Elasticsearch.Net.SearchRequestParameters})">
            <summary>Represents a POST on /{index}/_search
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-search.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
            <param name="body">The search definition using the Query DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SearchAsync(System.String,System.Object,System.Func{Elasticsearch.Net.SearchRequestParameters,Elasticsearch.Net.SearchRequestParameters})">
            <summary>Represents a POST on /{index}/_search
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-search.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
            <param name="body">The search definition using the Query DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.Search``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.SearchRequestParameters,Elasticsearch.Net.SearchRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_search
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-search.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
            <param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
            <param name="body">The search definition using the Query DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SearchAsync``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.SearchRequestParameters,Elasticsearch.Net.SearchRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_search
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-search.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
            <param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
            <param name="body">The search definition using the Query DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.Search(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.SearchRequestParameters,Elasticsearch.Net.SearchRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_search
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-search.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
            <param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
            <param name="body">The search definition using the Query DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SearchAsync(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.SearchRequestParameters,Elasticsearch.Net.SearchRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_search
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-search.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
            <param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
            <param name="body">The search definition using the Query DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SearchShardsGet``1(System.Func{Elasticsearch.Net.SearchShardsRequestParameters,Elasticsearch.Net.SearchShardsRequestParameters})">
            <summary>Represents a GET on /_search_shards
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-shards.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SearchShardsGetAsync``1(System.Func{Elasticsearch.Net.SearchShardsRequestParameters,Elasticsearch.Net.SearchShardsRequestParameters})">
            <summary>Represents a GET on /_search_shards
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-shards.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SearchShardsGet(System.Func{Elasticsearch.Net.SearchShardsRequestParameters,Elasticsearch.Net.SearchShardsRequestParameters})">
            <summary>Represents a GET on /_search_shards
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-shards.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SearchShardsGetAsync(System.Func{Elasticsearch.Net.SearchShardsRequestParameters,Elasticsearch.Net.SearchShardsRequestParameters})">
            <summary>Represents a GET on /_search_shards
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-shards.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SearchShardsGet``1(System.String,System.Func{Elasticsearch.Net.SearchShardsRequestParameters,Elasticsearch.Net.SearchShardsRequestParameters})">
            <summary>Represents a GET on /{index}/_search_shards
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-shards.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SearchShardsGetAsync``1(System.String,System.Func{Elasticsearch.Net.SearchShardsRequestParameters,Elasticsearch.Net.SearchShardsRequestParameters})">
            <summary>Represents a GET on /{index}/_search_shards
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-shards.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SearchShardsGet(System.String,System.Func{Elasticsearch.Net.SearchShardsRequestParameters,Elasticsearch.Net.SearchShardsRequestParameters})">
            <summary>Represents a GET on /{index}/_search_shards
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-shards.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SearchShardsGetAsync(System.String,System.Func{Elasticsearch.Net.SearchShardsRequestParameters,Elasticsearch.Net.SearchShardsRequestParameters})">
            <summary>Represents a GET on /{index}/_search_shards
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-shards.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SearchShardsGet``1(System.String,System.String,System.Func{Elasticsearch.Net.SearchShardsRequestParameters,Elasticsearch.Net.SearchShardsRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_search_shards
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-shards.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SearchShardsGetAsync``1(System.String,System.String,System.Func{Elasticsearch.Net.SearchShardsRequestParameters,Elasticsearch.Net.SearchShardsRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_search_shards
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-shards.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SearchShardsGet(System.String,System.String,System.Func{Elasticsearch.Net.SearchShardsRequestParameters,Elasticsearch.Net.SearchShardsRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_search_shards
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-shards.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SearchShardsGetAsync(System.String,System.String,System.Func{Elasticsearch.Net.SearchShardsRequestParameters,Elasticsearch.Net.SearchShardsRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_search_shards
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-shards.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SearchShards``1(System.Func{Elasticsearch.Net.SearchShardsRequestParameters,Elasticsearch.Net.SearchShardsRequestParameters})">
            <summary>Represents a POST on /_search_shards
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-shards.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SearchShardsAsync``1(System.Func{Elasticsearch.Net.SearchShardsRequestParameters,Elasticsearch.Net.SearchShardsRequestParameters})">
            <summary>Represents a POST on /_search_shards
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-shards.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SearchShards(System.Func{Elasticsearch.Net.SearchShardsRequestParameters,Elasticsearch.Net.SearchShardsRequestParameters})">
            <summary>Represents a POST on /_search_shards
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-shards.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SearchShardsAsync(System.Func{Elasticsearch.Net.SearchShardsRequestParameters,Elasticsearch.Net.SearchShardsRequestParameters})">
            <summary>Represents a POST on /_search_shards
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-shards.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SearchShards``1(System.String,System.Func{Elasticsearch.Net.SearchShardsRequestParameters,Elasticsearch.Net.SearchShardsRequestParameters})">
            <summary>Represents a POST on /{index}/_search_shards
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-shards.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SearchShardsAsync``1(System.String,System.Func{Elasticsearch.Net.SearchShardsRequestParameters,Elasticsearch.Net.SearchShardsRequestParameters})">
            <summary>Represents a POST on /{index}/_search_shards
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-shards.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SearchShards(System.String,System.Func{Elasticsearch.Net.SearchShardsRequestParameters,Elasticsearch.Net.SearchShardsRequestParameters})">
            <summary>Represents a POST on /{index}/_search_shards
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-shards.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SearchShardsAsync(System.String,System.Func{Elasticsearch.Net.SearchShardsRequestParameters,Elasticsearch.Net.SearchShardsRequestParameters})">
            <summary>Represents a POST on /{index}/_search_shards
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-shards.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SearchShards``1(System.String,System.String,System.Func{Elasticsearch.Net.SearchShardsRequestParameters,Elasticsearch.Net.SearchShardsRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_search_shards
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-shards.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SearchShardsAsync``1(System.String,System.String,System.Func{Elasticsearch.Net.SearchShardsRequestParameters,Elasticsearch.Net.SearchShardsRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_search_shards
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-shards.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SearchShards(System.String,System.String,System.Func{Elasticsearch.Net.SearchShardsRequestParameters,Elasticsearch.Net.SearchShardsRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_search_shards
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-shards.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SearchShardsAsync(System.String,System.String,System.Func{Elasticsearch.Net.SearchShardsRequestParameters,Elasticsearch.Net.SearchShardsRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_search_shards
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-shards.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SearchTemplateGet``1(System.Func{Elasticsearch.Net.SearchTemplateRequestParameters,Elasticsearch.Net.SearchTemplateRequestParameters})">
            <summary>Represents a GET on /_search/template
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-template.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SearchTemplateGetAsync``1(System.Func{Elasticsearch.Net.SearchTemplateRequestParameters,Elasticsearch.Net.SearchTemplateRequestParameters})">
            <summary>Represents a GET on /_search/template
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-template.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SearchTemplateGet(System.Func{Elasticsearch.Net.SearchTemplateRequestParameters,Elasticsearch.Net.SearchTemplateRequestParameters})">
            <summary>Represents a GET on /_search/template
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-template.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SearchTemplateGetAsync(System.Func{Elasticsearch.Net.SearchTemplateRequestParameters,Elasticsearch.Net.SearchTemplateRequestParameters})">
            <summary>Represents a GET on /_search/template
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-template.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SearchTemplateGet``1(System.String,System.Func{Elasticsearch.Net.SearchTemplateRequestParameters,Elasticsearch.Net.SearchTemplateRequestParameters})">
            <summary>Represents a GET on /{index}/_search/template
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-template.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SearchTemplateGetAsync``1(System.String,System.Func{Elasticsearch.Net.SearchTemplateRequestParameters,Elasticsearch.Net.SearchTemplateRequestParameters})">
            <summary>Represents a GET on /{index}/_search/template
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-template.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SearchTemplateGet(System.String,System.Func{Elasticsearch.Net.SearchTemplateRequestParameters,Elasticsearch.Net.SearchTemplateRequestParameters})">
            <summary>Represents a GET on /{index}/_search/template
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-template.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SearchTemplateGetAsync(System.String,System.Func{Elasticsearch.Net.SearchTemplateRequestParameters,Elasticsearch.Net.SearchTemplateRequestParameters})">
            <summary>Represents a GET on /{index}/_search/template
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-template.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SearchTemplateGet``1(System.String,System.String,System.Func{Elasticsearch.Net.SearchTemplateRequestParameters,Elasticsearch.Net.SearchTemplateRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_search/template
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-template.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
            <param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SearchTemplateGetAsync``1(System.String,System.String,System.Func{Elasticsearch.Net.SearchTemplateRequestParameters,Elasticsearch.Net.SearchTemplateRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_search/template
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-template.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
            <param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SearchTemplateGet(System.String,System.String,System.Func{Elasticsearch.Net.SearchTemplateRequestParameters,Elasticsearch.Net.SearchTemplateRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_search/template
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-template.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
            <param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SearchTemplateGetAsync(System.String,System.String,System.Func{Elasticsearch.Net.SearchTemplateRequestParameters,Elasticsearch.Net.SearchTemplateRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_search/template
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-template.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
            <param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SearchTemplate``1(System.Object,System.Func{Elasticsearch.Net.SearchTemplateRequestParameters,Elasticsearch.Net.SearchTemplateRequestParameters})">
            <summary>Represents a POST on /_search/template
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-template.html</para>	
            </summary>
            <param name="body">The search definition template and its params</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SearchTemplateAsync``1(System.Object,System.Func{Elasticsearch.Net.SearchTemplateRequestParameters,Elasticsearch.Net.SearchTemplateRequestParameters})">
            <summary>Represents a POST on /_search/template
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-template.html</para>	
            </summary>
            <param name="body">The search definition template and its params</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SearchTemplate(System.Object,System.Func{Elasticsearch.Net.SearchTemplateRequestParameters,Elasticsearch.Net.SearchTemplateRequestParameters})">
            <summary>Represents a POST on /_search/template
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-template.html</para>	
            </summary>
            <param name="body">The search definition template and its params</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SearchTemplateAsync(System.Object,System.Func{Elasticsearch.Net.SearchTemplateRequestParameters,Elasticsearch.Net.SearchTemplateRequestParameters})">
            <summary>Represents a POST on /_search/template
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-template.html</para>	
            </summary>
            <param name="body">The search definition template and its params</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SearchTemplate``1(System.String,System.Object,System.Func{Elasticsearch.Net.SearchTemplateRequestParameters,Elasticsearch.Net.SearchTemplateRequestParameters})">
            <summary>Represents a POST on /{index}/_search/template
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-template.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
            <param name="body">The search definition template and its params</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SearchTemplateAsync``1(System.String,System.Object,System.Func{Elasticsearch.Net.SearchTemplateRequestParameters,Elasticsearch.Net.SearchTemplateRequestParameters})">
            <summary>Represents a POST on /{index}/_search/template
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-template.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
            <param name="body">The search definition template and its params</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SearchTemplate(System.String,System.Object,System.Func{Elasticsearch.Net.SearchTemplateRequestParameters,Elasticsearch.Net.SearchTemplateRequestParameters})">
            <summary>Represents a POST on /{index}/_search/template
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-template.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
            <param name="body">The search definition template and its params</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SearchTemplateAsync(System.String,System.Object,System.Func{Elasticsearch.Net.SearchTemplateRequestParameters,Elasticsearch.Net.SearchTemplateRequestParameters})">
            <summary>Represents a POST on /{index}/_search/template
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-template.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
            <param name="body">The search definition template and its params</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SearchTemplate``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.SearchTemplateRequestParameters,Elasticsearch.Net.SearchTemplateRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_search/template
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-template.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
            <param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
            <param name="body">The search definition template and its params</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SearchTemplateAsync``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.SearchTemplateRequestParameters,Elasticsearch.Net.SearchTemplateRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_search/template
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-template.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
            <param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
            <param name="body">The search definition template and its params</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SearchTemplate(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.SearchTemplateRequestParameters,Elasticsearch.Net.SearchTemplateRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_search/template
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-template.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
            <param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
            <param name="body">The search definition template and its params</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SearchTemplateAsync(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.SearchTemplateRequestParameters,Elasticsearch.Net.SearchTemplateRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_search/template
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-template.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
            <param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
            <param name="body">The search definition template and its params</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SnapshotCreate``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.SnapshotRequestParameters,Elasticsearch.Net.SnapshotRequestParameters})">
            <summary>Represents a PUT on /_snapshot/{repository}/{snapshot}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html</para>	
            </summary>
            <param name="repository">A repository name</param>
            <param name="snapshot">A snapshot name</param>
            <param name="body">The snapshot definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SnapshotCreateAsync``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.SnapshotRequestParameters,Elasticsearch.Net.SnapshotRequestParameters})">
            <summary>Represents a PUT on /_snapshot/{repository}/{snapshot}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html</para>	
            </summary>
            <param name="repository">A repository name</param>
            <param name="snapshot">A snapshot name</param>
            <param name="body">The snapshot definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SnapshotCreate(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.SnapshotRequestParameters,Elasticsearch.Net.SnapshotRequestParameters})">
            <summary>Represents a PUT on /_snapshot/{repository}/{snapshot}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html</para>	
            </summary>
            <param name="repository">A repository name</param>
            <param name="snapshot">A snapshot name</param>
            <param name="body">The snapshot definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SnapshotCreateAsync(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.SnapshotRequestParameters,Elasticsearch.Net.SnapshotRequestParameters})">
            <summary>Represents a PUT on /_snapshot/{repository}/{snapshot}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html</para>	
            </summary>
            <param name="repository">A repository name</param>
            <param name="snapshot">A snapshot name</param>
            <param name="body">The snapshot definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SnapshotCreatePost``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.SnapshotRequestParameters,Elasticsearch.Net.SnapshotRequestParameters})">
            <summary>Represents a POST on /_snapshot/{repository}/{snapshot}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html</para>	
            </summary>
            <param name="repository">A repository name</param>
            <param name="snapshot">A snapshot name</param>
            <param name="body">The snapshot definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SnapshotCreatePostAsync``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.SnapshotRequestParameters,Elasticsearch.Net.SnapshotRequestParameters})">
            <summary>Represents a POST on /_snapshot/{repository}/{snapshot}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html</para>	
            </summary>
            <param name="repository">A repository name</param>
            <param name="snapshot">A snapshot name</param>
            <param name="body">The snapshot definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SnapshotCreatePost(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.SnapshotRequestParameters,Elasticsearch.Net.SnapshotRequestParameters})">
            <summary>Represents a POST on /_snapshot/{repository}/{snapshot}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html</para>	
            </summary>
            <param name="repository">A repository name</param>
            <param name="snapshot">A snapshot name</param>
            <param name="body">The snapshot definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SnapshotCreatePostAsync(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.SnapshotRequestParameters,Elasticsearch.Net.SnapshotRequestParameters})">
            <summary>Represents a POST on /_snapshot/{repository}/{snapshot}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html</para>	
            </summary>
            <param name="repository">A repository name</param>
            <param name="snapshot">A snapshot name</param>
            <param name="body">The snapshot definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SnapshotCreateRepository``1(System.String,System.Object,System.Func{Elasticsearch.Net.CreateRepositoryRequestParameters,Elasticsearch.Net.CreateRepositoryRequestParameters})">
            <summary>Represents a PUT on /_snapshot/{repository}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html</para>	
            </summary>
            <param name="repository">A repository name</param>
            <param name="body">The repository definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SnapshotCreateRepositoryAsync``1(System.String,System.Object,System.Func{Elasticsearch.Net.CreateRepositoryRequestParameters,Elasticsearch.Net.CreateRepositoryRequestParameters})">
            <summary>Represents a PUT on /_snapshot/{repository}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html</para>	
            </summary>
            <param name="repository">A repository name</param>
            <param name="body">The repository definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SnapshotCreateRepository(System.String,System.Object,System.Func{Elasticsearch.Net.CreateRepositoryRequestParameters,Elasticsearch.Net.CreateRepositoryRequestParameters})">
            <summary>Represents a PUT on /_snapshot/{repository}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html</para>	
            </summary>
            <param name="repository">A repository name</param>
            <param name="body">The repository definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SnapshotCreateRepositoryAsync(System.String,System.Object,System.Func{Elasticsearch.Net.CreateRepositoryRequestParameters,Elasticsearch.Net.CreateRepositoryRequestParameters})">
            <summary>Represents a PUT on /_snapshot/{repository}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html</para>	
            </summary>
            <param name="repository">A repository name</param>
            <param name="body">The repository definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SnapshotCreateRepositoryPost``1(System.String,System.Object,System.Func{Elasticsearch.Net.CreateRepositoryRequestParameters,Elasticsearch.Net.CreateRepositoryRequestParameters})">
            <summary>Represents a POST on /_snapshot/{repository}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html</para>	
            </summary>
            <param name="repository">A repository name</param>
            <param name="body">The repository definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SnapshotCreateRepositoryPostAsync``1(System.String,System.Object,System.Func{Elasticsearch.Net.CreateRepositoryRequestParameters,Elasticsearch.Net.CreateRepositoryRequestParameters})">
            <summary>Represents a POST on /_snapshot/{repository}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html</para>	
            </summary>
            <param name="repository">A repository name</param>
            <param name="body">The repository definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SnapshotCreateRepositoryPost(System.String,System.Object,System.Func{Elasticsearch.Net.CreateRepositoryRequestParameters,Elasticsearch.Net.CreateRepositoryRequestParameters})">
            <summary>Represents a POST on /_snapshot/{repository}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html</para>	
            </summary>
            <param name="repository">A repository name</param>
            <param name="body">The repository definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SnapshotCreateRepositoryPostAsync(System.String,System.Object,System.Func{Elasticsearch.Net.CreateRepositoryRequestParameters,Elasticsearch.Net.CreateRepositoryRequestParameters})">
            <summary>Represents a POST on /_snapshot/{repository}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html</para>	
            </summary>
            <param name="repository">A repository name</param>
            <param name="body">The repository definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SnapshotDelete``1(System.String,System.String,System.Func{Elasticsearch.Net.DeleteSnapshotRequestParameters,Elasticsearch.Net.DeleteSnapshotRequestParameters})">
            <summary>Represents a DELETE on /_snapshot/{repository}/{snapshot}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html</para>	
            </summary>
            <param name="repository">A repository name</param>
            <param name="snapshot">A snapshot name</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SnapshotDeleteAsync``1(System.String,System.String,System.Func{Elasticsearch.Net.DeleteSnapshotRequestParameters,Elasticsearch.Net.DeleteSnapshotRequestParameters})">
            <summary>Represents a DELETE on /_snapshot/{repository}/{snapshot}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html</para>	
            </summary>
            <param name="repository">A repository name</param>
            <param name="snapshot">A snapshot name</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SnapshotDelete(System.String,System.String,System.Func{Elasticsearch.Net.DeleteSnapshotRequestParameters,Elasticsearch.Net.DeleteSnapshotRequestParameters})">
            <summary>Represents a DELETE on /_snapshot/{repository}/{snapshot}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html</para>	
            </summary>
            <param name="repository">A repository name</param>
            <param name="snapshot">A snapshot name</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SnapshotDeleteAsync(System.String,System.String,System.Func{Elasticsearch.Net.DeleteSnapshotRequestParameters,Elasticsearch.Net.DeleteSnapshotRequestParameters})">
            <summary>Represents a DELETE on /_snapshot/{repository}/{snapshot}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html</para>	
            </summary>
            <param name="repository">A repository name</param>
            <param name="snapshot">A snapshot name</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SnapshotDeleteRepository``1(System.String,System.Func{Elasticsearch.Net.DeleteRepositoryRequestParameters,Elasticsearch.Net.DeleteRepositoryRequestParameters})">
            <summary>Represents a DELETE on /_snapshot/{repository}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html</para>	
            </summary>
            <param name="repository">A comma-separated list of repository names</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SnapshotDeleteRepositoryAsync``1(System.String,System.Func{Elasticsearch.Net.DeleteRepositoryRequestParameters,Elasticsearch.Net.DeleteRepositoryRequestParameters})">
            <summary>Represents a DELETE on /_snapshot/{repository}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html</para>	
            </summary>
            <param name="repository">A comma-separated list of repository names</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SnapshotDeleteRepository(System.String,System.Func{Elasticsearch.Net.DeleteRepositoryRequestParameters,Elasticsearch.Net.DeleteRepositoryRequestParameters})">
            <summary>Represents a DELETE on /_snapshot/{repository}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html</para>	
            </summary>
            <param name="repository">A comma-separated list of repository names</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SnapshotDeleteRepositoryAsync(System.String,System.Func{Elasticsearch.Net.DeleteRepositoryRequestParameters,Elasticsearch.Net.DeleteRepositoryRequestParameters})">
            <summary>Represents a DELETE on /_snapshot/{repository}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html</para>	
            </summary>
            <param name="repository">A comma-separated list of repository names</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SnapshotGet``1(System.String,System.String,System.Func{Elasticsearch.Net.GetSnapshotRequestParameters,Elasticsearch.Net.GetSnapshotRequestParameters})">
            <summary>Represents a GET on /_snapshot/{repository}/{snapshot}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html</para>	
            </summary>
            <param name="repository">A repository name</param>
            <param name="snapshot">A comma-separated list of snapshot names</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SnapshotGetAsync``1(System.String,System.String,System.Func{Elasticsearch.Net.GetSnapshotRequestParameters,Elasticsearch.Net.GetSnapshotRequestParameters})">
            <summary>Represents a GET on /_snapshot/{repository}/{snapshot}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html</para>	
            </summary>
            <param name="repository">A repository name</param>
            <param name="snapshot">A comma-separated list of snapshot names</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SnapshotGet(System.String,System.String,System.Func{Elasticsearch.Net.GetSnapshotRequestParameters,Elasticsearch.Net.GetSnapshotRequestParameters})">
            <summary>Represents a GET on /_snapshot/{repository}/{snapshot}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html</para>	
            </summary>
            <param name="repository">A repository name</param>
            <param name="snapshot">A comma-separated list of snapshot names</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SnapshotGetAsync(System.String,System.String,System.Func{Elasticsearch.Net.GetSnapshotRequestParameters,Elasticsearch.Net.GetSnapshotRequestParameters})">
            <summary>Represents a GET on /_snapshot/{repository}/{snapshot}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html</para>	
            </summary>
            <param name="repository">A repository name</param>
            <param name="snapshot">A comma-separated list of snapshot names</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SnapshotGetRepository``1(System.Func{Elasticsearch.Net.SnapshotGetRepositoryRequestParameters,Elasticsearch.Net.SnapshotGetRepositoryRequestParameters})">
            <summary>Represents a GET on /_snapshot
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SnapshotGetRepositoryAsync``1(System.Func{Elasticsearch.Net.SnapshotGetRepositoryRequestParameters,Elasticsearch.Net.SnapshotGetRepositoryRequestParameters})">
            <summary>Represents a GET on /_snapshot
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SnapshotGetRepository(System.Func{Elasticsearch.Net.SnapshotGetRepositoryRequestParameters,Elasticsearch.Net.SnapshotGetRepositoryRequestParameters})">
            <summary>Represents a GET on /_snapshot
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SnapshotGetRepositoryAsync(System.Func{Elasticsearch.Net.SnapshotGetRepositoryRequestParameters,Elasticsearch.Net.SnapshotGetRepositoryRequestParameters})">
            <summary>Represents a GET on /_snapshot
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SnapshotGetRepository``1(System.String,System.Func{Elasticsearch.Net.SnapshotGetRepositoryRequestParameters,Elasticsearch.Net.SnapshotGetRepositoryRequestParameters})">
            <summary>Represents a GET on /_snapshot/{repository}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html</para>	
            </summary>
            <param name="repository">A comma-separated list of repository names</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SnapshotGetRepositoryAsync``1(System.String,System.Func{Elasticsearch.Net.SnapshotGetRepositoryRequestParameters,Elasticsearch.Net.SnapshotGetRepositoryRequestParameters})">
            <summary>Represents a GET on /_snapshot/{repository}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html</para>	
            </summary>
            <param name="repository">A comma-separated list of repository names</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SnapshotGetRepository(System.String,System.Func{Elasticsearch.Net.SnapshotGetRepositoryRequestParameters,Elasticsearch.Net.SnapshotGetRepositoryRequestParameters})">
            <summary>Represents a GET on /_snapshot/{repository}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html</para>	
            </summary>
            <param name="repository">A comma-separated list of repository names</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SnapshotGetRepositoryAsync(System.String,System.Func{Elasticsearch.Net.SnapshotGetRepositoryRequestParameters,Elasticsearch.Net.SnapshotGetRepositoryRequestParameters})">
            <summary>Represents a GET on /_snapshot/{repository}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html</para>	
            </summary>
            <param name="repository">A comma-separated list of repository names</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SnapshotRestore``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.RestoreRequestParameters,Elasticsearch.Net.RestoreRequestParameters})">
            <summary>Represents a POST on /_snapshot/{repository}/{snapshot}/_restore
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html</para>	
            </summary>
            <param name="repository">A repository name</param>
            <param name="snapshot">A snapshot name</param>
            <param name="body">Details of what to restore</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SnapshotRestoreAsync``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.RestoreRequestParameters,Elasticsearch.Net.RestoreRequestParameters})">
            <summary>Represents a POST on /_snapshot/{repository}/{snapshot}/_restore
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html</para>	
            </summary>
            <param name="repository">A repository name</param>
            <param name="snapshot">A snapshot name</param>
            <param name="body">Details of what to restore</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SnapshotRestore(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.RestoreRequestParameters,Elasticsearch.Net.RestoreRequestParameters})">
            <summary>Represents a POST on /_snapshot/{repository}/{snapshot}/_restore
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html</para>	
            </summary>
            <param name="repository">A repository name</param>
            <param name="snapshot">A snapshot name</param>
            <param name="body">Details of what to restore</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SnapshotRestoreAsync(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.RestoreRequestParameters,Elasticsearch.Net.RestoreRequestParameters})">
            <summary>Represents a POST on /_snapshot/{repository}/{snapshot}/_restore
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html</para>	
            </summary>
            <param name="repository">A repository name</param>
            <param name="snapshot">A snapshot name</param>
            <param name="body">Details of what to restore</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SnapshotStatus``1(System.Func{Elasticsearch.Net.SnapshotStatusRequestParameters,Elasticsearch.Net.SnapshotStatusRequestParameters})">
            <summary>Represents a GET on /_snapshot/_status
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/modules-snapshots.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SnapshotStatusAsync``1(System.Func{Elasticsearch.Net.SnapshotStatusRequestParameters,Elasticsearch.Net.SnapshotStatusRequestParameters})">
            <summary>Represents a GET on /_snapshot/_status
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/modules-snapshots.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SnapshotStatus(System.Func{Elasticsearch.Net.SnapshotStatusRequestParameters,Elasticsearch.Net.SnapshotStatusRequestParameters})">
            <summary>Represents a GET on /_snapshot/_status
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/modules-snapshots.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SnapshotStatusAsync(System.Func{Elasticsearch.Net.SnapshotStatusRequestParameters,Elasticsearch.Net.SnapshotStatusRequestParameters})">
            <summary>Represents a GET on /_snapshot/_status
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/modules-snapshots.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SnapshotStatus``1(System.String,System.Func{Elasticsearch.Net.SnapshotStatusRequestParameters,Elasticsearch.Net.SnapshotStatusRequestParameters})">
            <summary>Represents a GET on /_snapshot/{repository}/_status
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/modules-snapshots.html</para>	
            </summary>
            <param name="repository">A repository name</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SnapshotStatusAsync``1(System.String,System.Func{Elasticsearch.Net.SnapshotStatusRequestParameters,Elasticsearch.Net.SnapshotStatusRequestParameters})">
            <summary>Represents a GET on /_snapshot/{repository}/_status
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/modules-snapshots.html</para>	
            </summary>
            <param name="repository">A repository name</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SnapshotStatus(System.String,System.Func{Elasticsearch.Net.SnapshotStatusRequestParameters,Elasticsearch.Net.SnapshotStatusRequestParameters})">
            <summary>Represents a GET on /_snapshot/{repository}/_status
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/modules-snapshots.html</para>	
            </summary>
            <param name="repository">A repository name</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SnapshotStatusAsync(System.String,System.Func{Elasticsearch.Net.SnapshotStatusRequestParameters,Elasticsearch.Net.SnapshotStatusRequestParameters})">
            <summary>Represents a GET on /_snapshot/{repository}/_status
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/modules-snapshots.html</para>	
            </summary>
            <param name="repository">A repository name</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SnapshotStatus``1(System.String,System.String,System.Func{Elasticsearch.Net.SnapshotStatusRequestParameters,Elasticsearch.Net.SnapshotStatusRequestParameters})">
            <summary>Represents a GET on /_snapshot/{repository}/{snapshot}/_status
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/modules-snapshots.html</para>	
            </summary>
            <param name="repository">A repository name</param>
            <param name="snapshot">A comma-separated list of snapshot names</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SnapshotStatusAsync``1(System.String,System.String,System.Func{Elasticsearch.Net.SnapshotStatusRequestParameters,Elasticsearch.Net.SnapshotStatusRequestParameters})">
            <summary>Represents a GET on /_snapshot/{repository}/{snapshot}/_status
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/modules-snapshots.html</para>	
            </summary>
            <param name="repository">A repository name</param>
            <param name="snapshot">A comma-separated list of snapshot names</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SnapshotStatus(System.String,System.String,System.Func{Elasticsearch.Net.SnapshotStatusRequestParameters,Elasticsearch.Net.SnapshotStatusRequestParameters})">
            <summary>Represents a GET on /_snapshot/{repository}/{snapshot}/_status
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/modules-snapshots.html</para>	
            </summary>
            <param name="repository">A repository name</param>
            <param name="snapshot">A comma-separated list of snapshot names</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SnapshotStatusAsync(System.String,System.String,System.Func{Elasticsearch.Net.SnapshotStatusRequestParameters,Elasticsearch.Net.SnapshotStatusRequestParameters})">
            <summary>Represents a GET on /_snapshot/{repository}/{snapshot}/_status
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/modules-snapshots.html</para>	
            </summary>
            <param name="repository">A repository name</param>
            <param name="snapshot">A comma-separated list of snapshot names</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.Suggest``1(System.Object,System.Func{Elasticsearch.Net.SuggestRequestParameters,Elasticsearch.Net.SuggestRequestParameters})">
            <summary>Represents a POST on /_suggest
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-search.html</para>	
            </summary>
            <param name="body">The request definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SuggestAsync``1(System.Object,System.Func{Elasticsearch.Net.SuggestRequestParameters,Elasticsearch.Net.SuggestRequestParameters})">
            <summary>Represents a POST on /_suggest
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-search.html</para>	
            </summary>
            <param name="body">The request definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.Suggest(System.Object,System.Func{Elasticsearch.Net.SuggestRequestParameters,Elasticsearch.Net.SuggestRequestParameters})">
            <summary>Represents a POST on /_suggest
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-search.html</para>	
            </summary>
            <param name="body">The request definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SuggestAsync(System.Object,System.Func{Elasticsearch.Net.SuggestRequestParameters,Elasticsearch.Net.SuggestRequestParameters})">
            <summary>Represents a POST on /_suggest
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-search.html</para>	
            </summary>
            <param name="body">The request definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.Suggest``1(System.String,System.Object,System.Func{Elasticsearch.Net.SuggestRequestParameters,Elasticsearch.Net.SuggestRequestParameters})">
            <summary>Represents a POST on /{index}/_suggest
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-search.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
            <param name="body">The request definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SuggestAsync``1(System.String,System.Object,System.Func{Elasticsearch.Net.SuggestRequestParameters,Elasticsearch.Net.SuggestRequestParameters})">
            <summary>Represents a POST on /{index}/_suggest
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-search.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
            <param name="body">The request definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.Suggest(System.String,System.Object,System.Func{Elasticsearch.Net.SuggestRequestParameters,Elasticsearch.Net.SuggestRequestParameters})">
            <summary>Represents a POST on /{index}/_suggest
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-search.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
            <param name="body">The request definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SuggestAsync(System.String,System.Object,System.Func{Elasticsearch.Net.SuggestRequestParameters,Elasticsearch.Net.SuggestRequestParameters})">
            <summary>Represents a POST on /{index}/_suggest
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-search.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
            <param name="body">The request definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SuggestGet``1(System.Func{Elasticsearch.Net.SuggestRequestParameters,Elasticsearch.Net.SuggestRequestParameters})">
            <summary>Represents a GET on /_suggest
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-search.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SuggestGetAsync``1(System.Func{Elasticsearch.Net.SuggestRequestParameters,Elasticsearch.Net.SuggestRequestParameters})">
            <summary>Represents a GET on /_suggest
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-search.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SuggestGet(System.Func{Elasticsearch.Net.SuggestRequestParameters,Elasticsearch.Net.SuggestRequestParameters})">
            <summary>Represents a GET on /_suggest
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-search.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SuggestGetAsync(System.Func{Elasticsearch.Net.SuggestRequestParameters,Elasticsearch.Net.SuggestRequestParameters})">
            <summary>Represents a GET on /_suggest
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-search.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SuggestGet``1(System.String,System.Func{Elasticsearch.Net.SuggestRequestParameters,Elasticsearch.Net.SuggestRequestParameters})">
            <summary>Represents a GET on /{index}/_suggest
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-search.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SuggestGetAsync``1(System.String,System.Func{Elasticsearch.Net.SuggestRequestParameters,Elasticsearch.Net.SuggestRequestParameters})">
            <summary>Represents a GET on /{index}/_suggest
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-search.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SuggestGet(System.String,System.Func{Elasticsearch.Net.SuggestRequestParameters,Elasticsearch.Net.SuggestRequestParameters})">
            <summary>Represents a GET on /{index}/_suggest
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-search.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.SuggestGetAsync(System.String,System.Func{Elasticsearch.Net.SuggestRequestParameters,Elasticsearch.Net.SuggestRequestParameters})">
            <summary>Represents a GET on /{index}/_suggest
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-search.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.TermvectorGet``1(System.String,System.String,System.String,System.Func{Elasticsearch.Net.TermvectorRequestParameters,Elasticsearch.Net.TermvectorRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/{id}/_termvector
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-termvectors.html</para>	
            </summary>
            <param name="index">The index in which the document resides.</param>
            <param name="type">The type of the document.</param>
            <param name="id">The id of the document.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.TermvectorGetAsync``1(System.String,System.String,System.String,System.Func{Elasticsearch.Net.TermvectorRequestParameters,Elasticsearch.Net.TermvectorRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/{id}/_termvector
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-termvectors.html</para>	
            </summary>
            <param name="index">The index in which the document resides.</param>
            <param name="type">The type of the document.</param>
            <param name="id">The id of the document.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.TermvectorGet(System.String,System.String,System.String,System.Func{Elasticsearch.Net.TermvectorRequestParameters,Elasticsearch.Net.TermvectorRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/{id}/_termvector
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-termvectors.html</para>	
            </summary>
            <param name="index">The index in which the document resides.</param>
            <param name="type">The type of the document.</param>
            <param name="id">The id of the document.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.TermvectorGetAsync(System.String,System.String,System.String,System.Func{Elasticsearch.Net.TermvectorRequestParameters,Elasticsearch.Net.TermvectorRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/{id}/_termvector
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-termvectors.html</para>	
            </summary>
            <param name="index">The index in which the document resides.</param>
            <param name="type">The type of the document.</param>
            <param name="id">The id of the document.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.Termvector``1(System.String,System.String,System.String,System.Object,System.Func{Elasticsearch.Net.TermvectorRequestParameters,Elasticsearch.Net.TermvectorRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/{id}/_termvector
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-termvectors.html</para>	
            </summary>
            <param name="index">The index in which the document resides.</param>
            <param name="type">The type of the document.</param>
            <param name="id">The id of the document.</param>
            <param name="body">Define parameters. See documentation.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.TermvectorAsync``1(System.String,System.String,System.String,System.Object,System.Func{Elasticsearch.Net.TermvectorRequestParameters,Elasticsearch.Net.TermvectorRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/{id}/_termvector
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-termvectors.html</para>	
            </summary>
            <param name="index">The index in which the document resides.</param>
            <param name="type">The type of the document.</param>
            <param name="id">The id of the document.</param>
            <param name="body">Define parameters. See documentation.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.Termvector(System.String,System.String,System.String,System.Object,System.Func{Elasticsearch.Net.TermvectorRequestParameters,Elasticsearch.Net.TermvectorRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/{id}/_termvector
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-termvectors.html</para>	
            </summary>
            <param name="index">The index in which the document resides.</param>
            <param name="type">The type of the document.</param>
            <param name="id">The id of the document.</param>
            <param name="body">Define parameters. See documentation.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.TermvectorAsync(System.String,System.String,System.String,System.Object,System.Func{Elasticsearch.Net.TermvectorRequestParameters,Elasticsearch.Net.TermvectorRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/{id}/_termvector
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-termvectors.html</para>	
            </summary>
            <param name="index">The index in which the document resides.</param>
            <param name="type">The type of the document.</param>
            <param name="id">The id of the document.</param>
            <param name="body">Define parameters. See documentation.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.Update``1(System.String,System.String,System.String,System.Object,System.Func{Elasticsearch.Net.UpdateRequestParameters,Elasticsearch.Net.UpdateRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/{id}/_update
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-update.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="id">Document ID</param>
            <param name="body">The request definition using either `script` or partial `doc`</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.UpdateAsync``1(System.String,System.String,System.String,System.Object,System.Func{Elasticsearch.Net.UpdateRequestParameters,Elasticsearch.Net.UpdateRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/{id}/_update
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-update.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="id">Document ID</param>
            <param name="body">The request definition using either `script` or partial `doc`</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.Update(System.String,System.String,System.String,System.Object,System.Func{Elasticsearch.Net.UpdateRequestParameters,Elasticsearch.Net.UpdateRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/{id}/_update
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-update.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="id">Document ID</param>
            <param name="body">The request definition using either `script` or partial `doc`</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.IElasticsearchClient.UpdateAsync(System.String,System.String,System.String,System.Object,System.Func{Elasticsearch.Net.UpdateRequestParameters,Elasticsearch.Net.UpdateRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/{id}/_update
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-update.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="id">Document ID</param>
            <param name="body">The request definition using either `script` or partial `doc`</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.AbortBenchmark``1(System.String,System.Func{Elasticsearch.Net.AbortBenchmarkRequestParameters,Elasticsearch.Net.AbortBenchmarkRequestParameters})">
            <summary>Represents a POST on /_bench/abort/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-benchmark.html</para>	
            </summary>
            <param name="name">A benchmark name</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.AbortBenchmarkAsync``1(System.String,System.Func{Elasticsearch.Net.AbortBenchmarkRequestParameters,Elasticsearch.Net.AbortBenchmarkRequestParameters})">
            <summary>Represents a POST on /_bench/abort/{name}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-benchmark.html</para>	
            </summary>
            <param name="name">A benchmark name</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.AbortBenchmark(System.String,System.Func{Elasticsearch.Net.AbortBenchmarkRequestParameters,Elasticsearch.Net.AbortBenchmarkRequestParameters})">
            <summary>Represents a POST on /_bench/abort/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-benchmark.html</para>	
            </summary>
            <param name="name">A benchmark name</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.AbortBenchmarkAsync(System.String,System.Func{Elasticsearch.Net.AbortBenchmarkRequestParameters,Elasticsearch.Net.AbortBenchmarkRequestParameters})">
            <summary>Represents a POST on /_bench/abort/{name}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-benchmark.html</para>	
            </summary>
            <param name="name">A benchmark name</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.Bulk``1(System.Object,System.Func{Elasticsearch.Net.BulkRequestParameters,Elasticsearch.Net.BulkRequestParameters})">
            <summary>Represents a POST on /_bulk
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-bulk.html</para>	
            </summary>
            <param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.BulkAsync``1(System.Object,System.Func{Elasticsearch.Net.BulkRequestParameters,Elasticsearch.Net.BulkRequestParameters})">
            <summary>Represents a POST on /_bulk
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-bulk.html</para>	
            </summary>
            <param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.Bulk(System.Object,System.Func{Elasticsearch.Net.BulkRequestParameters,Elasticsearch.Net.BulkRequestParameters})">
            <summary>Represents a POST on /_bulk
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-bulk.html</para>	
            </summary>
            <param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.BulkAsync(System.Object,System.Func{Elasticsearch.Net.BulkRequestParameters,Elasticsearch.Net.BulkRequestParameters})">
            <summary>Represents a POST on /_bulk
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-bulk.html</para>	
            </summary>
            <param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.Bulk``1(System.String,System.Object,System.Func{Elasticsearch.Net.BulkRequestParameters,Elasticsearch.Net.BulkRequestParameters})">
            <summary>Represents a POST on /{index}/_bulk
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-bulk.html</para>	
            </summary>
            <param name="index">Default index for items which don&#39;t provide one</param>
            <param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.BulkAsync``1(System.String,System.Object,System.Func{Elasticsearch.Net.BulkRequestParameters,Elasticsearch.Net.BulkRequestParameters})">
            <summary>Represents a POST on /{index}/_bulk
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-bulk.html</para>	
            </summary>
            <param name="index">Default index for items which don&#39;t provide one</param>
            <param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.Bulk(System.String,System.Object,System.Func{Elasticsearch.Net.BulkRequestParameters,Elasticsearch.Net.BulkRequestParameters})">
            <summary>Represents a POST on /{index}/_bulk
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-bulk.html</para>	
            </summary>
            <param name="index">Default index for items which don&#39;t provide one</param>
            <param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.BulkAsync(System.String,System.Object,System.Func{Elasticsearch.Net.BulkRequestParameters,Elasticsearch.Net.BulkRequestParameters})">
            <summary>Represents a POST on /{index}/_bulk
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-bulk.html</para>	
            </summary>
            <param name="index">Default index for items which don&#39;t provide one</param>
            <param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.Bulk``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.BulkRequestParameters,Elasticsearch.Net.BulkRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_bulk
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-bulk.html</para>	
            </summary>
            <param name="index">Default index for items which don&#39;t provide one</param>
            <param name="type">Default document type for items which don&#39;t provide one</param>
            <param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.BulkAsync``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.BulkRequestParameters,Elasticsearch.Net.BulkRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_bulk
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-bulk.html</para>	
            </summary>
            <param name="index">Default index for items which don&#39;t provide one</param>
            <param name="type">Default document type for items which don&#39;t provide one</param>
            <param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.Bulk(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.BulkRequestParameters,Elasticsearch.Net.BulkRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_bulk
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-bulk.html</para>	
            </summary>
            <param name="index">Default index for items which don&#39;t provide one</param>
            <param name="type">Default document type for items which don&#39;t provide one</param>
            <param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.BulkAsync(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.BulkRequestParameters,Elasticsearch.Net.BulkRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_bulk
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-bulk.html</para>	
            </summary>
            <param name="index">Default index for items which don&#39;t provide one</param>
            <param name="type">Default document type for items which don&#39;t provide one</param>
            <param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.BulkPut``1(System.Object,System.Func{Elasticsearch.Net.BulkRequestParameters,Elasticsearch.Net.BulkRequestParameters})">
            <summary>Represents a PUT on /_bulk
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-bulk.html</para>	
            </summary>
            <param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.BulkPutAsync``1(System.Object,System.Func{Elasticsearch.Net.BulkRequestParameters,Elasticsearch.Net.BulkRequestParameters})">
            <summary>Represents a PUT on /_bulk
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-bulk.html</para>	
            </summary>
            <param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.BulkPut(System.Object,System.Func{Elasticsearch.Net.BulkRequestParameters,Elasticsearch.Net.BulkRequestParameters})">
            <summary>Represents a PUT on /_bulk
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-bulk.html</para>	
            </summary>
            <param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.BulkPutAsync(System.Object,System.Func{Elasticsearch.Net.BulkRequestParameters,Elasticsearch.Net.BulkRequestParameters})">
            <summary>Represents a PUT on /_bulk
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-bulk.html</para>	
            </summary>
            <param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.BulkPut``1(System.String,System.Object,System.Func{Elasticsearch.Net.BulkRequestParameters,Elasticsearch.Net.BulkRequestParameters})">
            <summary>Represents a PUT on /{index}/_bulk
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-bulk.html</para>	
            </summary>
            <param name="index">Default index for items which don&#39;t provide one</param>
            <param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.BulkPutAsync``1(System.String,System.Object,System.Func{Elasticsearch.Net.BulkRequestParameters,Elasticsearch.Net.BulkRequestParameters})">
            <summary>Represents a PUT on /{index}/_bulk
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-bulk.html</para>	
            </summary>
            <param name="index">Default index for items which don&#39;t provide one</param>
            <param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.BulkPut(System.String,System.Object,System.Func{Elasticsearch.Net.BulkRequestParameters,Elasticsearch.Net.BulkRequestParameters})">
            <summary>Represents a PUT on /{index}/_bulk
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-bulk.html</para>	
            </summary>
            <param name="index">Default index for items which don&#39;t provide one</param>
            <param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.BulkPutAsync(System.String,System.Object,System.Func{Elasticsearch.Net.BulkRequestParameters,Elasticsearch.Net.BulkRequestParameters})">
            <summary>Represents a PUT on /{index}/_bulk
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-bulk.html</para>	
            </summary>
            <param name="index">Default index for items which don&#39;t provide one</param>
            <param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.BulkPut``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.BulkRequestParameters,Elasticsearch.Net.BulkRequestParameters})">
            <summary>Represents a PUT on /{index}/{type}/_bulk
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-bulk.html</para>	
            </summary>
            <param name="index">Default index for items which don&#39;t provide one</param>
            <param name="type">Default document type for items which don&#39;t provide one</param>
            <param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.BulkPutAsync``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.BulkRequestParameters,Elasticsearch.Net.BulkRequestParameters})">
            <summary>Represents a PUT on /{index}/{type}/_bulk
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-bulk.html</para>	
            </summary>
            <param name="index">Default index for items which don&#39;t provide one</param>
            <param name="type">Default document type for items which don&#39;t provide one</param>
            <param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.BulkPut(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.BulkRequestParameters,Elasticsearch.Net.BulkRequestParameters})">
            <summary>Represents a PUT on /{index}/{type}/_bulk
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-bulk.html</para>	
            </summary>
            <param name="index">Default index for items which don&#39;t provide one</param>
            <param name="type">Default document type for items which don&#39;t provide one</param>
            <param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.BulkPutAsync(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.BulkRequestParameters,Elasticsearch.Net.BulkRequestParameters})">
            <summary>Represents a PUT on /{index}/{type}/_bulk
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-bulk.html</para>	
            </summary>
            <param name="index">Default index for items which don&#39;t provide one</param>
            <param name="type">Default document type for items which don&#39;t provide one</param>
            <param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CatAliases``1(System.Func{Elasticsearch.Net.CatAliasesRequestParameters,Elasticsearch.Net.CatAliasesRequestParameters})">
            <summary>Represents a GET on /_cat/aliases
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-aliases.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CatAliasesAsync``1(System.Func{Elasticsearch.Net.CatAliasesRequestParameters,Elasticsearch.Net.CatAliasesRequestParameters})">
            <summary>Represents a GET on /_cat/aliases
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-aliases.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CatAliases(System.Func{Elasticsearch.Net.CatAliasesRequestParameters,Elasticsearch.Net.CatAliasesRequestParameters})">
            <summary>Represents a GET on /_cat/aliases
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-aliases.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CatAliasesAsync(System.Func{Elasticsearch.Net.CatAliasesRequestParameters,Elasticsearch.Net.CatAliasesRequestParameters})">
            <summary>Represents a GET on /_cat/aliases
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-aliases.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CatAliases``1(System.String,System.Func{Elasticsearch.Net.CatAliasesRequestParameters,Elasticsearch.Net.CatAliasesRequestParameters})">
            <summary>Represents a GET on /_cat/aliases/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-aliases.html</para>	
            </summary>
            <param name="name">A comma-separated list of alias names to return</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CatAliasesAsync``1(System.String,System.Func{Elasticsearch.Net.CatAliasesRequestParameters,Elasticsearch.Net.CatAliasesRequestParameters})">
            <summary>Represents a GET on /_cat/aliases/{name}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-aliases.html</para>	
            </summary>
            <param name="name">A comma-separated list of alias names to return</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CatAliases(System.String,System.Func{Elasticsearch.Net.CatAliasesRequestParameters,Elasticsearch.Net.CatAliasesRequestParameters})">
            <summary>Represents a GET on /_cat/aliases/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-aliases.html</para>	
            </summary>
            <param name="name">A comma-separated list of alias names to return</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CatAliasesAsync(System.String,System.Func{Elasticsearch.Net.CatAliasesRequestParameters,Elasticsearch.Net.CatAliasesRequestParameters})">
            <summary>Represents a GET on /_cat/aliases/{name}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-aliases.html</para>	
            </summary>
            <param name="name">A comma-separated list of alias names to return</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CatAllocation``1(System.Func{Elasticsearch.Net.CatAllocationRequestParameters,Elasticsearch.Net.CatAllocationRequestParameters})">
            <summary>Represents a GET on /_cat/allocation
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-allocation.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CatAllocationAsync``1(System.Func{Elasticsearch.Net.CatAllocationRequestParameters,Elasticsearch.Net.CatAllocationRequestParameters})">
            <summary>Represents a GET on /_cat/allocation
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-allocation.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CatAllocation(System.Func{Elasticsearch.Net.CatAllocationRequestParameters,Elasticsearch.Net.CatAllocationRequestParameters})">
            <summary>Represents a GET on /_cat/allocation
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-allocation.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CatAllocationAsync(System.Func{Elasticsearch.Net.CatAllocationRequestParameters,Elasticsearch.Net.CatAllocationRequestParameters})">
            <summary>Represents a GET on /_cat/allocation
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-allocation.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CatAllocation``1(System.String,System.Func{Elasticsearch.Net.CatAllocationRequestParameters,Elasticsearch.Net.CatAllocationRequestParameters})">
            <summary>Represents a GET on /_cat/allocation/{node_id}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-allocation.html</para>	
            </summary>
            <param name="node_id">A comma-separated list of node IDs or names to limit the returned information</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CatAllocationAsync``1(System.String,System.Func{Elasticsearch.Net.CatAllocationRequestParameters,Elasticsearch.Net.CatAllocationRequestParameters})">
            <summary>Represents a GET on /_cat/allocation/{node_id}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-allocation.html</para>	
            </summary>
            <param name="node_id">A comma-separated list of node IDs or names to limit the returned information</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CatAllocation(System.String,System.Func{Elasticsearch.Net.CatAllocationRequestParameters,Elasticsearch.Net.CatAllocationRequestParameters})">
            <summary>Represents a GET on /_cat/allocation/{node_id}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-allocation.html</para>	
            </summary>
            <param name="node_id">A comma-separated list of node IDs or names to limit the returned information</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CatAllocationAsync(System.String,System.Func{Elasticsearch.Net.CatAllocationRequestParameters,Elasticsearch.Net.CatAllocationRequestParameters})">
            <summary>Represents a GET on /_cat/allocation/{node_id}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-allocation.html</para>	
            </summary>
            <param name="node_id">A comma-separated list of node IDs or names to limit the returned information</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CatCount``1(System.Func{Elasticsearch.Net.CatCountRequestParameters,Elasticsearch.Net.CatCountRequestParameters})">
            <summary>Represents a GET on /_cat/count
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-count.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CatCountAsync``1(System.Func{Elasticsearch.Net.CatCountRequestParameters,Elasticsearch.Net.CatCountRequestParameters})">
            <summary>Represents a GET on /_cat/count
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-count.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CatCount(System.Func{Elasticsearch.Net.CatCountRequestParameters,Elasticsearch.Net.CatCountRequestParameters})">
            <summary>Represents a GET on /_cat/count
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-count.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CatCountAsync(System.Func{Elasticsearch.Net.CatCountRequestParameters,Elasticsearch.Net.CatCountRequestParameters})">
            <summary>Represents a GET on /_cat/count
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-count.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CatCount``1(System.String,System.Func{Elasticsearch.Net.CatCountRequestParameters,Elasticsearch.Net.CatCountRequestParameters})">
            <summary>Represents a GET on /_cat/count/{index}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-count.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to limit the returned information</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CatCountAsync``1(System.String,System.Func{Elasticsearch.Net.CatCountRequestParameters,Elasticsearch.Net.CatCountRequestParameters})">
            <summary>Represents a GET on /_cat/count/{index}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-count.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to limit the returned information</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CatCount(System.String,System.Func{Elasticsearch.Net.CatCountRequestParameters,Elasticsearch.Net.CatCountRequestParameters})">
            <summary>Represents a GET on /_cat/count/{index}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-count.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to limit the returned information</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CatCountAsync(System.String,System.Func{Elasticsearch.Net.CatCountRequestParameters,Elasticsearch.Net.CatCountRequestParameters})">
            <summary>Represents a GET on /_cat/count/{index}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-count.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to limit the returned information</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CatFielddata``1(System.Func{Elasticsearch.Net.CatFielddataRequestParameters,Elasticsearch.Net.CatFielddataRequestParameters})">
            <summary>Represents a GET on /_cat/fielddata
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/cat-fielddata.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CatFielddataAsync``1(System.Func{Elasticsearch.Net.CatFielddataRequestParameters,Elasticsearch.Net.CatFielddataRequestParameters})">
            <summary>Represents a GET on /_cat/fielddata
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/cat-fielddata.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CatFielddata(System.Func{Elasticsearch.Net.CatFielddataRequestParameters,Elasticsearch.Net.CatFielddataRequestParameters})">
            <summary>Represents a GET on /_cat/fielddata
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/cat-fielddata.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CatFielddataAsync(System.Func{Elasticsearch.Net.CatFielddataRequestParameters,Elasticsearch.Net.CatFielddataRequestParameters})">
            <summary>Represents a GET on /_cat/fielddata
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/cat-fielddata.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CatHealth``1(System.Func{Elasticsearch.Net.CatHealthRequestParameters,Elasticsearch.Net.CatHealthRequestParameters})">
            <summary>Represents a GET on /_cat/health
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-health.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CatHealthAsync``1(System.Func{Elasticsearch.Net.CatHealthRequestParameters,Elasticsearch.Net.CatHealthRequestParameters})">
            <summary>Represents a GET on /_cat/health
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-health.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CatHealth(System.Func{Elasticsearch.Net.CatHealthRequestParameters,Elasticsearch.Net.CatHealthRequestParameters})">
            <summary>Represents a GET on /_cat/health
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-health.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CatHealthAsync(System.Func{Elasticsearch.Net.CatHealthRequestParameters,Elasticsearch.Net.CatHealthRequestParameters})">
            <summary>Represents a GET on /_cat/health
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-health.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CatHelp``1(System.Func{Elasticsearch.Net.CatHelpRequestParameters,Elasticsearch.Net.CatHelpRequestParameters})">
            <summary>Represents a GET on /_cat
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CatHelpAsync``1(System.Func{Elasticsearch.Net.CatHelpRequestParameters,Elasticsearch.Net.CatHelpRequestParameters})">
            <summary>Represents a GET on /_cat
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CatHelp(System.Func{Elasticsearch.Net.CatHelpRequestParameters,Elasticsearch.Net.CatHelpRequestParameters})">
            <summary>Represents a GET on /_cat
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CatHelpAsync(System.Func{Elasticsearch.Net.CatHelpRequestParameters,Elasticsearch.Net.CatHelpRequestParameters})">
            <summary>Represents a GET on /_cat
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CatIndices``1(System.Func{Elasticsearch.Net.CatIndicesRequestParameters,Elasticsearch.Net.CatIndicesRequestParameters})">
            <summary>Represents a GET on /_cat/indices
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-indices.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CatIndicesAsync``1(System.Func{Elasticsearch.Net.CatIndicesRequestParameters,Elasticsearch.Net.CatIndicesRequestParameters})">
            <summary>Represents a GET on /_cat/indices
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-indices.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CatIndices(System.Func{Elasticsearch.Net.CatIndicesRequestParameters,Elasticsearch.Net.CatIndicesRequestParameters})">
            <summary>Represents a GET on /_cat/indices
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-indices.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CatIndicesAsync(System.Func{Elasticsearch.Net.CatIndicesRequestParameters,Elasticsearch.Net.CatIndicesRequestParameters})">
            <summary>Represents a GET on /_cat/indices
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-indices.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CatIndices``1(System.String,System.Func{Elasticsearch.Net.CatIndicesRequestParameters,Elasticsearch.Net.CatIndicesRequestParameters})">
            <summary>Represents a GET on /_cat/indices/{index}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-indices.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to limit the returned information</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CatIndicesAsync``1(System.String,System.Func{Elasticsearch.Net.CatIndicesRequestParameters,Elasticsearch.Net.CatIndicesRequestParameters})">
            <summary>Represents a GET on /_cat/indices/{index}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-indices.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to limit the returned information</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CatIndices(System.String,System.Func{Elasticsearch.Net.CatIndicesRequestParameters,Elasticsearch.Net.CatIndicesRequestParameters})">
            <summary>Represents a GET on /_cat/indices/{index}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-indices.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to limit the returned information</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CatIndicesAsync(System.String,System.Func{Elasticsearch.Net.CatIndicesRequestParameters,Elasticsearch.Net.CatIndicesRequestParameters})">
            <summary>Represents a GET on /_cat/indices/{index}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-indices.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to limit the returned information</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CatMaster``1(System.Func{Elasticsearch.Net.CatMasterRequestParameters,Elasticsearch.Net.CatMasterRequestParameters})">
            <summary>Represents a GET on /_cat/master
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-master.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CatMasterAsync``1(System.Func{Elasticsearch.Net.CatMasterRequestParameters,Elasticsearch.Net.CatMasterRequestParameters})">
            <summary>Represents a GET on /_cat/master
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-master.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CatMaster(System.Func{Elasticsearch.Net.CatMasterRequestParameters,Elasticsearch.Net.CatMasterRequestParameters})">
            <summary>Represents a GET on /_cat/master
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-master.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CatMasterAsync(System.Func{Elasticsearch.Net.CatMasterRequestParameters,Elasticsearch.Net.CatMasterRequestParameters})">
            <summary>Represents a GET on /_cat/master
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-master.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CatNodes``1(System.Func{Elasticsearch.Net.CatNodesRequestParameters,Elasticsearch.Net.CatNodesRequestParameters})">
            <summary>Represents a GET on /_cat/nodes
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-nodes.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CatNodesAsync``1(System.Func{Elasticsearch.Net.CatNodesRequestParameters,Elasticsearch.Net.CatNodesRequestParameters})">
            <summary>Represents a GET on /_cat/nodes
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-nodes.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CatNodes(System.Func{Elasticsearch.Net.CatNodesRequestParameters,Elasticsearch.Net.CatNodesRequestParameters})">
            <summary>Represents a GET on /_cat/nodes
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-nodes.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CatNodesAsync(System.Func{Elasticsearch.Net.CatNodesRequestParameters,Elasticsearch.Net.CatNodesRequestParameters})">
            <summary>Represents a GET on /_cat/nodes
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-nodes.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CatPendingTasks``1(System.Func{Elasticsearch.Net.CatPendingTasksRequestParameters,Elasticsearch.Net.CatPendingTasksRequestParameters})">
            <summary>Represents a GET on /_cat/pending_tasks
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-pending-tasks.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CatPendingTasksAsync``1(System.Func{Elasticsearch.Net.CatPendingTasksRequestParameters,Elasticsearch.Net.CatPendingTasksRequestParameters})">
            <summary>Represents a GET on /_cat/pending_tasks
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-pending-tasks.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CatPendingTasks(System.Func{Elasticsearch.Net.CatPendingTasksRequestParameters,Elasticsearch.Net.CatPendingTasksRequestParameters})">
            <summary>Represents a GET on /_cat/pending_tasks
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-pending-tasks.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CatPendingTasksAsync(System.Func{Elasticsearch.Net.CatPendingTasksRequestParameters,Elasticsearch.Net.CatPendingTasksRequestParameters})">
            <summary>Represents a GET on /_cat/pending_tasks
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-pending-tasks.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CatPlugins``1(System.Func{Elasticsearch.Net.CatPluginsRequestParameters,Elasticsearch.Net.CatPluginsRequestParameters})">
            <summary>Represents a GET on /_cat/plugins
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/cat-plugins.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CatPluginsAsync``1(System.Func{Elasticsearch.Net.CatPluginsRequestParameters,Elasticsearch.Net.CatPluginsRequestParameters})">
            <summary>Represents a GET on /_cat/plugins
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/cat-plugins.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CatPlugins(System.Func{Elasticsearch.Net.CatPluginsRequestParameters,Elasticsearch.Net.CatPluginsRequestParameters})">
            <summary>Represents a GET on /_cat/plugins
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/cat-plugins.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CatPluginsAsync(System.Func{Elasticsearch.Net.CatPluginsRequestParameters,Elasticsearch.Net.CatPluginsRequestParameters})">
            <summary>Represents a GET on /_cat/plugins
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/cat-plugins.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CatRecovery``1(System.Func{Elasticsearch.Net.CatRecoveryRequestParameters,Elasticsearch.Net.CatRecoveryRequestParameters})">
            <summary>Represents a GET on /_cat/recovery
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-recovery.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CatRecoveryAsync``1(System.Func{Elasticsearch.Net.CatRecoveryRequestParameters,Elasticsearch.Net.CatRecoveryRequestParameters})">
            <summary>Represents a GET on /_cat/recovery
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-recovery.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CatRecovery(System.Func{Elasticsearch.Net.CatRecoveryRequestParameters,Elasticsearch.Net.CatRecoveryRequestParameters})">
            <summary>Represents a GET on /_cat/recovery
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-recovery.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CatRecoveryAsync(System.Func{Elasticsearch.Net.CatRecoveryRequestParameters,Elasticsearch.Net.CatRecoveryRequestParameters})">
            <summary>Represents a GET on /_cat/recovery
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-recovery.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CatRecovery``1(System.String,System.Func{Elasticsearch.Net.CatRecoveryRequestParameters,Elasticsearch.Net.CatRecoveryRequestParameters})">
            <summary>Represents a GET on /_cat/recovery/{index}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-recovery.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to limit the returned information</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CatRecoveryAsync``1(System.String,System.Func{Elasticsearch.Net.CatRecoveryRequestParameters,Elasticsearch.Net.CatRecoveryRequestParameters})">
            <summary>Represents a GET on /_cat/recovery/{index}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-recovery.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to limit the returned information</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CatRecovery(System.String,System.Func{Elasticsearch.Net.CatRecoveryRequestParameters,Elasticsearch.Net.CatRecoveryRequestParameters})">
            <summary>Represents a GET on /_cat/recovery/{index}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-recovery.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to limit the returned information</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CatRecoveryAsync(System.String,System.Func{Elasticsearch.Net.CatRecoveryRequestParameters,Elasticsearch.Net.CatRecoveryRequestParameters})">
            <summary>Represents a GET on /_cat/recovery/{index}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-recovery.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to limit the returned information</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CatShards``1(System.Func{Elasticsearch.Net.CatShardsRequestParameters,Elasticsearch.Net.CatShardsRequestParameters})">
            <summary>Represents a GET on /_cat/shards
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-shards.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CatShardsAsync``1(System.Func{Elasticsearch.Net.CatShardsRequestParameters,Elasticsearch.Net.CatShardsRequestParameters})">
            <summary>Represents a GET on /_cat/shards
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-shards.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CatShards(System.Func{Elasticsearch.Net.CatShardsRequestParameters,Elasticsearch.Net.CatShardsRequestParameters})">
            <summary>Represents a GET on /_cat/shards
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-shards.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CatShardsAsync(System.Func{Elasticsearch.Net.CatShardsRequestParameters,Elasticsearch.Net.CatShardsRequestParameters})">
            <summary>Represents a GET on /_cat/shards
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-shards.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CatShards``1(System.String,System.Func{Elasticsearch.Net.CatShardsRequestParameters,Elasticsearch.Net.CatShardsRequestParameters})">
            <summary>Represents a GET on /_cat/shards/{index}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-shards.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to limit the returned information</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CatShardsAsync``1(System.String,System.Func{Elasticsearch.Net.CatShardsRequestParameters,Elasticsearch.Net.CatShardsRequestParameters})">
            <summary>Represents a GET on /_cat/shards/{index}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-shards.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to limit the returned information</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CatShards(System.String,System.Func{Elasticsearch.Net.CatShardsRequestParameters,Elasticsearch.Net.CatShardsRequestParameters})">
            <summary>Represents a GET on /_cat/shards/{index}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-shards.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to limit the returned information</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CatShardsAsync(System.String,System.Func{Elasticsearch.Net.CatShardsRequestParameters,Elasticsearch.Net.CatShardsRequestParameters})">
            <summary>Represents a GET on /_cat/shards/{index}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-shards.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to limit the returned information</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CatThreadPool``1(System.Func{Elasticsearch.Net.CatThreadPoolRequestParameters,Elasticsearch.Net.CatThreadPoolRequestParameters})">
            <summary>Represents a GET on /_cat/thread_pool
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/cat-thread-pool.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CatThreadPoolAsync``1(System.Func{Elasticsearch.Net.CatThreadPoolRequestParameters,Elasticsearch.Net.CatThreadPoolRequestParameters})">
            <summary>Represents a GET on /_cat/thread_pool
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/cat-thread-pool.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CatThreadPool(System.Func{Elasticsearch.Net.CatThreadPoolRequestParameters,Elasticsearch.Net.CatThreadPoolRequestParameters})">
            <summary>Represents a GET on /_cat/thread_pool
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/cat-thread-pool.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CatThreadPoolAsync(System.Func{Elasticsearch.Net.CatThreadPoolRequestParameters,Elasticsearch.Net.CatThreadPoolRequestParameters})">
            <summary>Represents a GET on /_cat/thread_pool
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/cat-thread-pool.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.ClearScroll``1(System.String,System.Object,System.Func{Elasticsearch.Net.ClearScrollRequestParameters,Elasticsearch.Net.ClearScrollRequestParameters})">
            <summary>Represents a DELETE on /_search/scroll/{scroll_id}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-request-scroll.html</para>	
            </summary>
            <param name="scroll_id">A comma-separated list of scroll IDs to clear</param>
            <param name="body">A comma-separated list of scroll IDs to clear if none was specified via the scroll_id parameter</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.ClearScrollAsync``1(System.String,System.Object,System.Func{Elasticsearch.Net.ClearScrollRequestParameters,Elasticsearch.Net.ClearScrollRequestParameters})">
            <summary>Represents a DELETE on /_search/scroll/{scroll_id}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-request-scroll.html</para>	
            </summary>
            <param name="scroll_id">A comma-separated list of scroll IDs to clear</param>
            <param name="body">A comma-separated list of scroll IDs to clear if none was specified via the scroll_id parameter</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.ClearScroll(System.String,System.Object,System.Func{Elasticsearch.Net.ClearScrollRequestParameters,Elasticsearch.Net.ClearScrollRequestParameters})">
            <summary>Represents a DELETE on /_search/scroll/{scroll_id}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-request-scroll.html</para>	
            </summary>
            <param name="scroll_id">A comma-separated list of scroll IDs to clear</param>
            <param name="body">A comma-separated list of scroll IDs to clear if none was specified via the scroll_id parameter</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.ClearScrollAsync(System.String,System.Object,System.Func{Elasticsearch.Net.ClearScrollRequestParameters,Elasticsearch.Net.ClearScrollRequestParameters})">
            <summary>Represents a DELETE on /_search/scroll/{scroll_id}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-request-scroll.html</para>	
            </summary>
            <param name="scroll_id">A comma-separated list of scroll IDs to clear</param>
            <param name="body">A comma-separated list of scroll IDs to clear if none was specified via the scroll_id parameter</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.ClearScroll``1(System.Object,System.Func{Elasticsearch.Net.ClearScrollRequestParameters,Elasticsearch.Net.ClearScrollRequestParameters})">
            <summary>Represents a DELETE on /_search/scroll
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-request-scroll.html</para>	
            </summary>
            <param name="body">A comma-separated list of scroll IDs to clear if none was specified via the scroll_id parameter</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.ClearScrollAsync``1(System.Object,System.Func{Elasticsearch.Net.ClearScrollRequestParameters,Elasticsearch.Net.ClearScrollRequestParameters})">
            <summary>Represents a DELETE on /_search/scroll
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-request-scroll.html</para>	
            </summary>
            <param name="body">A comma-separated list of scroll IDs to clear if none was specified via the scroll_id parameter</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.ClearScroll(System.Object,System.Func{Elasticsearch.Net.ClearScrollRequestParameters,Elasticsearch.Net.ClearScrollRequestParameters})">
            <summary>Represents a DELETE on /_search/scroll
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-request-scroll.html</para>	
            </summary>
            <param name="body">A comma-separated list of scroll IDs to clear if none was specified via the scroll_id parameter</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.ClearScrollAsync(System.Object,System.Func{Elasticsearch.Net.ClearScrollRequestParameters,Elasticsearch.Net.ClearScrollRequestParameters})">
            <summary>Represents a DELETE on /_search/scroll
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-request-scroll.html</para>	
            </summary>
            <param name="body">A comma-separated list of scroll IDs to clear if none was specified via the scroll_id parameter</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.ClusterGetSettings``1(System.Func{Elasticsearch.Net.ClusterGetSettingsRequestParameters,Elasticsearch.Net.ClusterGetSettingsRequestParameters})">
            <summary>Represents a GET on /_cluster/settings
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-update-settings.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.ClusterGetSettingsAsync``1(System.Func{Elasticsearch.Net.ClusterGetSettingsRequestParameters,Elasticsearch.Net.ClusterGetSettingsRequestParameters})">
            <summary>Represents a GET on /_cluster/settings
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-update-settings.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.ClusterGetSettings(System.Func{Elasticsearch.Net.ClusterGetSettingsRequestParameters,Elasticsearch.Net.ClusterGetSettingsRequestParameters})">
            <summary>Represents a GET on /_cluster/settings
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-update-settings.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.ClusterGetSettingsAsync(System.Func{Elasticsearch.Net.ClusterGetSettingsRequestParameters,Elasticsearch.Net.ClusterGetSettingsRequestParameters})">
            <summary>Represents a GET on /_cluster/settings
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-update-settings.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.ClusterHealth``1(System.Func{Elasticsearch.Net.ClusterHealthRequestParameters,Elasticsearch.Net.ClusterHealthRequestParameters})">
            <summary>Represents a GET on /_cluster/health
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-health.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.ClusterHealthAsync``1(System.Func{Elasticsearch.Net.ClusterHealthRequestParameters,Elasticsearch.Net.ClusterHealthRequestParameters})">
            <summary>Represents a GET on /_cluster/health
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-health.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.ClusterHealth(System.Func{Elasticsearch.Net.ClusterHealthRequestParameters,Elasticsearch.Net.ClusterHealthRequestParameters})">
            <summary>Represents a GET on /_cluster/health
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-health.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.ClusterHealthAsync(System.Func{Elasticsearch.Net.ClusterHealthRequestParameters,Elasticsearch.Net.ClusterHealthRequestParameters})">
            <summary>Represents a GET on /_cluster/health
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-health.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.ClusterHealth``1(System.String,System.Func{Elasticsearch.Net.ClusterHealthRequestParameters,Elasticsearch.Net.ClusterHealthRequestParameters})">
            <summary>Represents a GET on /_cluster/health/{index}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-health.html</para>	
            </summary>
            <param name="index">Limit the information returned to a specific index</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.ClusterHealthAsync``1(System.String,System.Func{Elasticsearch.Net.ClusterHealthRequestParameters,Elasticsearch.Net.ClusterHealthRequestParameters})">
            <summary>Represents a GET on /_cluster/health/{index}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-health.html</para>	
            </summary>
            <param name="index">Limit the information returned to a specific index</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.ClusterHealth(System.String,System.Func{Elasticsearch.Net.ClusterHealthRequestParameters,Elasticsearch.Net.ClusterHealthRequestParameters})">
            <summary>Represents a GET on /_cluster/health/{index}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-health.html</para>	
            </summary>
            <param name="index">Limit the information returned to a specific index</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.ClusterHealthAsync(System.String,System.Func{Elasticsearch.Net.ClusterHealthRequestParameters,Elasticsearch.Net.ClusterHealthRequestParameters})">
            <summary>Represents a GET on /_cluster/health/{index}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-health.html</para>	
            </summary>
            <param name="index">Limit the information returned to a specific index</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.ClusterPendingTasks``1(System.Func{Elasticsearch.Net.ClusterPendingTasksRequestParameters,Elasticsearch.Net.ClusterPendingTasksRequestParameters})">
            <summary>Represents a GET on /_cluster/pending_tasks
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-pending.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.ClusterPendingTasksAsync``1(System.Func{Elasticsearch.Net.ClusterPendingTasksRequestParameters,Elasticsearch.Net.ClusterPendingTasksRequestParameters})">
            <summary>Represents a GET on /_cluster/pending_tasks
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-pending.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.ClusterPendingTasks(System.Func{Elasticsearch.Net.ClusterPendingTasksRequestParameters,Elasticsearch.Net.ClusterPendingTasksRequestParameters})">
            <summary>Represents a GET on /_cluster/pending_tasks
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-pending.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.ClusterPendingTasksAsync(System.Func{Elasticsearch.Net.ClusterPendingTasksRequestParameters,Elasticsearch.Net.ClusterPendingTasksRequestParameters})">
            <summary>Represents a GET on /_cluster/pending_tasks
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-pending.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.ClusterPutSettings``1(System.Object,System.Func{Elasticsearch.Net.ClusterSettingsRequestParameters,Elasticsearch.Net.ClusterSettingsRequestParameters})">
            <summary>Represents a PUT on /_cluster/settings
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-update-settings.html</para>	
            </summary>
            <param name="body">The settings to be updated. Can be either `transient` or `persistent` (survives cluster restart).</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.ClusterPutSettingsAsync``1(System.Object,System.Func{Elasticsearch.Net.ClusterSettingsRequestParameters,Elasticsearch.Net.ClusterSettingsRequestParameters})">
            <summary>Represents a PUT on /_cluster/settings
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-update-settings.html</para>	
            </summary>
            <param name="body">The settings to be updated. Can be either `transient` or `persistent` (survives cluster restart).</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.ClusterPutSettings(System.Object,System.Func{Elasticsearch.Net.ClusterSettingsRequestParameters,Elasticsearch.Net.ClusterSettingsRequestParameters})">
            <summary>Represents a PUT on /_cluster/settings
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-update-settings.html</para>	
            </summary>
            <param name="body">The settings to be updated. Can be either `transient` or `persistent` (survives cluster restart).</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.ClusterPutSettingsAsync(System.Object,System.Func{Elasticsearch.Net.ClusterSettingsRequestParameters,Elasticsearch.Net.ClusterSettingsRequestParameters})">
            <summary>Represents a PUT on /_cluster/settings
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-update-settings.html</para>	
            </summary>
            <param name="body">The settings to be updated. Can be either `transient` or `persistent` (survives cluster restart).</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.ClusterReroute``1(System.Object,System.Func{Elasticsearch.Net.ClusterRerouteRequestParameters,Elasticsearch.Net.ClusterRerouteRequestParameters})">
            <summary>Represents a POST on /_cluster/reroute
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-reroute.html</para>	
            </summary>
            <param name="body">The definition of `commands` to perform (`move`, `cancel`, `allocate`)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.ClusterRerouteAsync``1(System.Object,System.Func{Elasticsearch.Net.ClusterRerouteRequestParameters,Elasticsearch.Net.ClusterRerouteRequestParameters})">
            <summary>Represents a POST on /_cluster/reroute
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-reroute.html</para>	
            </summary>
            <param name="body">The definition of `commands` to perform (`move`, `cancel`, `allocate`)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.ClusterReroute(System.Object,System.Func{Elasticsearch.Net.ClusterRerouteRequestParameters,Elasticsearch.Net.ClusterRerouteRequestParameters})">
            <summary>Represents a POST on /_cluster/reroute
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-reroute.html</para>	
            </summary>
            <param name="body">The definition of `commands` to perform (`move`, `cancel`, `allocate`)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.ClusterRerouteAsync(System.Object,System.Func{Elasticsearch.Net.ClusterRerouteRequestParameters,Elasticsearch.Net.ClusterRerouteRequestParameters})">
            <summary>Represents a POST on /_cluster/reroute
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-reroute.html</para>	
            </summary>
            <param name="body">The definition of `commands` to perform (`move`, `cancel`, `allocate`)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.ClusterState``1(System.Func{Elasticsearch.Net.ClusterStateRequestParameters,Elasticsearch.Net.ClusterStateRequestParameters})">
            <summary>Represents a GET on /_cluster/state
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-state.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.ClusterStateAsync``1(System.Func{Elasticsearch.Net.ClusterStateRequestParameters,Elasticsearch.Net.ClusterStateRequestParameters})">
            <summary>Represents a GET on /_cluster/state
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-state.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.ClusterState(System.Func{Elasticsearch.Net.ClusterStateRequestParameters,Elasticsearch.Net.ClusterStateRequestParameters})">
            <summary>Represents a GET on /_cluster/state
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-state.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.ClusterStateAsync(System.Func{Elasticsearch.Net.ClusterStateRequestParameters,Elasticsearch.Net.ClusterStateRequestParameters})">
            <summary>Represents a GET on /_cluster/state
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-state.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.ClusterState``1(System.String,System.Func{Elasticsearch.Net.ClusterStateRequestParameters,Elasticsearch.Net.ClusterStateRequestParameters})">
            <summary>Represents a GET on /_cluster/state/{metric}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-state.html</para>	
            </summary>
            <param name="metric">Limit the information returned to the specified metrics</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.ClusterStateAsync``1(System.String,System.Func{Elasticsearch.Net.ClusterStateRequestParameters,Elasticsearch.Net.ClusterStateRequestParameters})">
            <summary>Represents a GET on /_cluster/state/{metric}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-state.html</para>	
            </summary>
            <param name="metric">Limit the information returned to the specified metrics</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.ClusterState(System.String,System.Func{Elasticsearch.Net.ClusterStateRequestParameters,Elasticsearch.Net.ClusterStateRequestParameters})">
            <summary>Represents a GET on /_cluster/state/{metric}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-state.html</para>	
            </summary>
            <param name="metric">Limit the information returned to the specified metrics</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.ClusterStateAsync(System.String,System.Func{Elasticsearch.Net.ClusterStateRequestParameters,Elasticsearch.Net.ClusterStateRequestParameters})">
            <summary>Represents a GET on /_cluster/state/{metric}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-state.html</para>	
            </summary>
            <param name="metric">Limit the information returned to the specified metrics</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.ClusterState``1(System.String,System.String,System.Func{Elasticsearch.Net.ClusterStateRequestParameters,Elasticsearch.Net.ClusterStateRequestParameters})">
            <summary>Represents a GET on /_cluster/state/{metric}/{index}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-state.html</para>	
            </summary>
            <param name="metric">Limit the information returned to the specified metrics</param>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.ClusterStateAsync``1(System.String,System.String,System.Func{Elasticsearch.Net.ClusterStateRequestParameters,Elasticsearch.Net.ClusterStateRequestParameters})">
            <summary>Represents a GET on /_cluster/state/{metric}/{index}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-state.html</para>	
            </summary>
            <param name="metric">Limit the information returned to the specified metrics</param>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.ClusterState(System.String,System.String,System.Func{Elasticsearch.Net.ClusterStateRequestParameters,Elasticsearch.Net.ClusterStateRequestParameters})">
            <summary>Represents a GET on /_cluster/state/{metric}/{index}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-state.html</para>	
            </summary>
            <param name="metric">Limit the information returned to the specified metrics</param>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.ClusterStateAsync(System.String,System.String,System.Func{Elasticsearch.Net.ClusterStateRequestParameters,Elasticsearch.Net.ClusterStateRequestParameters})">
            <summary>Represents a GET on /_cluster/state/{metric}/{index}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-state.html</para>	
            </summary>
            <param name="metric">Limit the information returned to the specified metrics</param>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.ClusterStats``1(System.Func{Elasticsearch.Net.ClusterStatsRequestParameters,Elasticsearch.Net.ClusterStatsRequestParameters})">
            <summary>Represents a GET on /_cluster/stats
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-stats.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.ClusterStatsAsync``1(System.Func{Elasticsearch.Net.ClusterStatsRequestParameters,Elasticsearch.Net.ClusterStatsRequestParameters})">
            <summary>Represents a GET on /_cluster/stats
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-stats.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.ClusterStats(System.Func{Elasticsearch.Net.ClusterStatsRequestParameters,Elasticsearch.Net.ClusterStatsRequestParameters})">
            <summary>Represents a GET on /_cluster/stats
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-stats.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.ClusterStatsAsync(System.Func{Elasticsearch.Net.ClusterStatsRequestParameters,Elasticsearch.Net.ClusterStatsRequestParameters})">
            <summary>Represents a GET on /_cluster/stats
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-stats.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.ClusterStats``1(System.String,System.Func{Elasticsearch.Net.ClusterStatsRequestParameters,Elasticsearch.Net.ClusterStatsRequestParameters})">
            <summary>Represents a GET on /_cluster/stats/nodes/{node_id}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-stats.html</para>	
            </summary>
            <param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.ClusterStatsAsync``1(System.String,System.Func{Elasticsearch.Net.ClusterStatsRequestParameters,Elasticsearch.Net.ClusterStatsRequestParameters})">
            <summary>Represents a GET on /_cluster/stats/nodes/{node_id}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-stats.html</para>	
            </summary>
            <param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.ClusterStats(System.String,System.Func{Elasticsearch.Net.ClusterStatsRequestParameters,Elasticsearch.Net.ClusterStatsRequestParameters})">
            <summary>Represents a GET on /_cluster/stats/nodes/{node_id}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-stats.html</para>	
            </summary>
            <param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.ClusterStatsAsync(System.String,System.Func{Elasticsearch.Net.ClusterStatsRequestParameters,Elasticsearch.Net.ClusterStatsRequestParameters})">
            <summary>Represents a GET on /_cluster/stats/nodes/{node_id}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-stats.html</para>	
            </summary>
            <param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.Count``1(System.Object,System.Func{Elasticsearch.Net.CountRequestParameters,Elasticsearch.Net.CountRequestParameters})">
            <summary>Represents a POST on /_count
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-count.html</para>	
            </summary>
            <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CountAsync``1(System.Object,System.Func{Elasticsearch.Net.CountRequestParameters,Elasticsearch.Net.CountRequestParameters})">
            <summary>Represents a POST on /_count
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-count.html</para>	
            </summary>
            <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.Count(System.Object,System.Func{Elasticsearch.Net.CountRequestParameters,Elasticsearch.Net.CountRequestParameters})">
            <summary>Represents a POST on /_count
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-count.html</para>	
            </summary>
            <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CountAsync(System.Object,System.Func{Elasticsearch.Net.CountRequestParameters,Elasticsearch.Net.CountRequestParameters})">
            <summary>Represents a POST on /_count
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-count.html</para>	
            </summary>
            <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.Count``1(System.String,System.Object,System.Func{Elasticsearch.Net.CountRequestParameters,Elasticsearch.Net.CountRequestParameters})">
            <summary>Represents a POST on /{index}/_count
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-count.html</para>	
            </summary>
            <param name="index">A comma-separated list of indices to restrict the results</param>
            <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CountAsync``1(System.String,System.Object,System.Func{Elasticsearch.Net.CountRequestParameters,Elasticsearch.Net.CountRequestParameters})">
            <summary>Represents a POST on /{index}/_count
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-count.html</para>	
            </summary>
            <param name="index">A comma-separated list of indices to restrict the results</param>
            <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.Count(System.String,System.Object,System.Func{Elasticsearch.Net.CountRequestParameters,Elasticsearch.Net.CountRequestParameters})">
            <summary>Represents a POST on /{index}/_count
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-count.html</para>	
            </summary>
            <param name="index">A comma-separated list of indices to restrict the results</param>
            <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CountAsync(System.String,System.Object,System.Func{Elasticsearch.Net.CountRequestParameters,Elasticsearch.Net.CountRequestParameters})">
            <summary>Represents a POST on /{index}/_count
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-count.html</para>	
            </summary>
            <param name="index">A comma-separated list of indices to restrict the results</param>
            <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.Count``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.CountRequestParameters,Elasticsearch.Net.CountRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_count
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-count.html</para>	
            </summary>
            <param name="index">A comma-separated list of indices to restrict the results</param>
            <param name="type">A comma-separated list of types to restrict the results</param>
            <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CountAsync``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.CountRequestParameters,Elasticsearch.Net.CountRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_count
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-count.html</para>	
            </summary>
            <param name="index">A comma-separated list of indices to restrict the results</param>
            <param name="type">A comma-separated list of types to restrict the results</param>
            <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.Count(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.CountRequestParameters,Elasticsearch.Net.CountRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_count
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-count.html</para>	
            </summary>
            <param name="index">A comma-separated list of indices to restrict the results</param>
            <param name="type">A comma-separated list of types to restrict the results</param>
            <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CountAsync(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.CountRequestParameters,Elasticsearch.Net.CountRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_count
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-count.html</para>	
            </summary>
            <param name="index">A comma-separated list of indices to restrict the results</param>
            <param name="type">A comma-separated list of types to restrict the results</param>
            <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CountGet``1(System.Func{Elasticsearch.Net.CountRequestParameters,Elasticsearch.Net.CountRequestParameters})">
            <summary>Represents a GET on /_count
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-count.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CountGetAsync``1(System.Func{Elasticsearch.Net.CountRequestParameters,Elasticsearch.Net.CountRequestParameters})">
            <summary>Represents a GET on /_count
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-count.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CountGet(System.Func{Elasticsearch.Net.CountRequestParameters,Elasticsearch.Net.CountRequestParameters})">
            <summary>Represents a GET on /_count
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-count.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CountGetAsync(System.Func{Elasticsearch.Net.CountRequestParameters,Elasticsearch.Net.CountRequestParameters})">
            <summary>Represents a GET on /_count
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-count.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CountGet``1(System.String,System.Func{Elasticsearch.Net.CountRequestParameters,Elasticsearch.Net.CountRequestParameters})">
            <summary>Represents a GET on /{index}/_count
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-count.html</para>	
            </summary>
            <param name="index">A comma-separated list of indices to restrict the results</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CountGetAsync``1(System.String,System.Func{Elasticsearch.Net.CountRequestParameters,Elasticsearch.Net.CountRequestParameters})">
            <summary>Represents a GET on /{index}/_count
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-count.html</para>	
            </summary>
            <param name="index">A comma-separated list of indices to restrict the results</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CountGet(System.String,System.Func{Elasticsearch.Net.CountRequestParameters,Elasticsearch.Net.CountRequestParameters})">
            <summary>Represents a GET on /{index}/_count
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-count.html</para>	
            </summary>
            <param name="index">A comma-separated list of indices to restrict the results</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CountGetAsync(System.String,System.Func{Elasticsearch.Net.CountRequestParameters,Elasticsearch.Net.CountRequestParameters})">
            <summary>Represents a GET on /{index}/_count
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-count.html</para>	
            </summary>
            <param name="index">A comma-separated list of indices to restrict the results</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CountGet``1(System.String,System.String,System.Func{Elasticsearch.Net.CountRequestParameters,Elasticsearch.Net.CountRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_count
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-count.html</para>	
            </summary>
            <param name="index">A comma-separated list of indices to restrict the results</param>
            <param name="type">A comma-separated list of types to restrict the results</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CountGetAsync``1(System.String,System.String,System.Func{Elasticsearch.Net.CountRequestParameters,Elasticsearch.Net.CountRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_count
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-count.html</para>	
            </summary>
            <param name="index">A comma-separated list of indices to restrict the results</param>
            <param name="type">A comma-separated list of types to restrict the results</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CountGet(System.String,System.String,System.Func{Elasticsearch.Net.CountRequestParameters,Elasticsearch.Net.CountRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_count
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-count.html</para>	
            </summary>
            <param name="index">A comma-separated list of indices to restrict the results</param>
            <param name="type">A comma-separated list of types to restrict the results</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CountGetAsync(System.String,System.String,System.Func{Elasticsearch.Net.CountRequestParameters,Elasticsearch.Net.CountRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_count
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-count.html</para>	
            </summary>
            <param name="index">A comma-separated list of indices to restrict the results</param>
            <param name="type">A comma-separated list of types to restrict the results</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CountPercolateGet``1(System.String,System.String,System.Func{Elasticsearch.Net.PercolateCountRequestParameters,Elasticsearch.Net.PercolateCountRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_percolate/count
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being count percolated.</param>
            <param name="type">The type of the document being count percolated.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CountPercolateGetAsync``1(System.String,System.String,System.Func{Elasticsearch.Net.PercolateCountRequestParameters,Elasticsearch.Net.PercolateCountRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_percolate/count
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being count percolated.</param>
            <param name="type">The type of the document being count percolated.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CountPercolateGet(System.String,System.String,System.Func{Elasticsearch.Net.PercolateCountRequestParameters,Elasticsearch.Net.PercolateCountRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_percolate/count
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being count percolated.</param>
            <param name="type">The type of the document being count percolated.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CountPercolateGetAsync(System.String,System.String,System.Func{Elasticsearch.Net.PercolateCountRequestParameters,Elasticsearch.Net.PercolateCountRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_percolate/count
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being count percolated.</param>
            <param name="type">The type of the document being count percolated.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CountPercolateGet``1(System.String,System.String,System.String,System.Func{Elasticsearch.Net.PercolateCountRequestParameters,Elasticsearch.Net.PercolateCountRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/{id}/_percolate/count
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being count percolated.</param>
            <param name="type">The type of the document being count percolated.</param>
            <param name="id">Substitute the document in the request body with a document that is known by the specified id. On top of the id, the index and type parameter will be used to retrieve the document from within the cluster.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CountPercolateGetAsync``1(System.String,System.String,System.String,System.Func{Elasticsearch.Net.PercolateCountRequestParameters,Elasticsearch.Net.PercolateCountRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/{id}/_percolate/count
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being count percolated.</param>
            <param name="type">The type of the document being count percolated.</param>
            <param name="id">Substitute the document in the request body with a document that is known by the specified id. On top of the id, the index and type parameter will be used to retrieve the document from within the cluster.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CountPercolateGet(System.String,System.String,System.String,System.Func{Elasticsearch.Net.PercolateCountRequestParameters,Elasticsearch.Net.PercolateCountRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/{id}/_percolate/count
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being count percolated.</param>
            <param name="type">The type of the document being count percolated.</param>
            <param name="id">Substitute the document in the request body with a document that is known by the specified id. On top of the id, the index and type parameter will be used to retrieve the document from within the cluster.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CountPercolateGetAsync(System.String,System.String,System.String,System.Func{Elasticsearch.Net.PercolateCountRequestParameters,Elasticsearch.Net.PercolateCountRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/{id}/_percolate/count
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being count percolated.</param>
            <param name="type">The type of the document being count percolated.</param>
            <param name="id">Substitute the document in the request body with a document that is known by the specified id. On top of the id, the index and type parameter will be used to retrieve the document from within the cluster.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CountPercolate``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.PercolateCountRequestParameters,Elasticsearch.Net.PercolateCountRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_percolate/count
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being count percolated.</param>
            <param name="type">The type of the document being count percolated.</param>
            <param name="body">The count percolator request definition using the percolate DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CountPercolateAsync``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.PercolateCountRequestParameters,Elasticsearch.Net.PercolateCountRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_percolate/count
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being count percolated.</param>
            <param name="type">The type of the document being count percolated.</param>
            <param name="body">The count percolator request definition using the percolate DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CountPercolate(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.PercolateCountRequestParameters,Elasticsearch.Net.PercolateCountRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_percolate/count
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being count percolated.</param>
            <param name="type">The type of the document being count percolated.</param>
            <param name="body">The count percolator request definition using the percolate DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CountPercolateAsync(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.PercolateCountRequestParameters,Elasticsearch.Net.PercolateCountRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_percolate/count
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being count percolated.</param>
            <param name="type">The type of the document being count percolated.</param>
            <param name="body">The count percolator request definition using the percolate DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CountPercolate``1(System.String,System.String,System.String,System.Object,System.Func{Elasticsearch.Net.PercolateCountRequestParameters,Elasticsearch.Net.PercolateCountRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/{id}/_percolate/count
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being count percolated.</param>
            <param name="type">The type of the document being count percolated.</param>
            <param name="id">Substitute the document in the request body with a document that is known by the specified id. On top of the id, the index and type parameter will be used to retrieve the document from within the cluster.</param>
            <param name="body">The count percolator request definition using the percolate DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CountPercolateAsync``1(System.String,System.String,System.String,System.Object,System.Func{Elasticsearch.Net.PercolateCountRequestParameters,Elasticsearch.Net.PercolateCountRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/{id}/_percolate/count
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being count percolated.</param>
            <param name="type">The type of the document being count percolated.</param>
            <param name="id">Substitute the document in the request body with a document that is known by the specified id. On top of the id, the index and type parameter will be used to retrieve the document from within the cluster.</param>
            <param name="body">The count percolator request definition using the percolate DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CountPercolate(System.String,System.String,System.String,System.Object,System.Func{Elasticsearch.Net.PercolateCountRequestParameters,Elasticsearch.Net.PercolateCountRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/{id}/_percolate/count
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being count percolated.</param>
            <param name="type">The type of the document being count percolated.</param>
            <param name="id">Substitute the document in the request body with a document that is known by the specified id. On top of the id, the index and type parameter will be used to retrieve the document from within the cluster.</param>
            <param name="body">The count percolator request definition using the percolate DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.CountPercolateAsync(System.String,System.String,System.String,System.Object,System.Func{Elasticsearch.Net.PercolateCountRequestParameters,Elasticsearch.Net.PercolateCountRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/{id}/_percolate/count
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being count percolated.</param>
            <param name="type">The type of the document being count percolated.</param>
            <param name="id">Substitute the document in the request body with a document that is known by the specified id. On top of the id, the index and type parameter will be used to retrieve the document from within the cluster.</param>
            <param name="body">The count percolator request definition using the percolate DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.Delete``1(System.String,System.String,System.String,System.Func{Elasticsearch.Net.DeleteRequestParameters,Elasticsearch.Net.DeleteRequestParameters})">
            <summary>Represents a DELETE on /{index}/{type}/{id}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-delete.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="id">The document ID</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.DeleteAsync``1(System.String,System.String,System.String,System.Func{Elasticsearch.Net.DeleteRequestParameters,Elasticsearch.Net.DeleteRequestParameters})">
            <summary>Represents a DELETE on /{index}/{type}/{id}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-delete.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="id">The document ID</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.Delete(System.String,System.String,System.String,System.Func{Elasticsearch.Net.DeleteRequestParameters,Elasticsearch.Net.DeleteRequestParameters})">
            <summary>Represents a DELETE on /{index}/{type}/{id}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-delete.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="id">The document ID</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.DeleteAsync(System.String,System.String,System.String,System.Func{Elasticsearch.Net.DeleteRequestParameters,Elasticsearch.Net.DeleteRequestParameters})">
            <summary>Represents a DELETE on /{index}/{type}/{id}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-delete.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="id">The document ID</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.DeleteByQuery``1(System.String,System.Object,System.Func{Elasticsearch.Net.DeleteByQueryRequestParameters,Elasticsearch.Net.DeleteByQueryRequestParameters})">
            <summary>Represents a DELETE on /{index}/_query
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-delete-by-query.html</para>	
            </summary>
            <param name="index">A comma-separated list of indices to restrict the operation; use `_all` to perform the operation on all indices</param>
            <param name="body">A query to restrict the operation specified with the Query DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.DeleteByQueryAsync``1(System.String,System.Object,System.Func{Elasticsearch.Net.DeleteByQueryRequestParameters,Elasticsearch.Net.DeleteByQueryRequestParameters})">
            <summary>Represents a DELETE on /{index}/_query
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-delete-by-query.html</para>	
            </summary>
            <param name="index">A comma-separated list of indices to restrict the operation; use `_all` to perform the operation on all indices</param>
            <param name="body">A query to restrict the operation specified with the Query DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.DeleteByQuery(System.String,System.Object,System.Func{Elasticsearch.Net.DeleteByQueryRequestParameters,Elasticsearch.Net.DeleteByQueryRequestParameters})">
            <summary>Represents a DELETE on /{index}/_query
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-delete-by-query.html</para>	
            </summary>
            <param name="index">A comma-separated list of indices to restrict the operation; use `_all` to perform the operation on all indices</param>
            <param name="body">A query to restrict the operation specified with the Query DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.DeleteByQueryAsync(System.String,System.Object,System.Func{Elasticsearch.Net.DeleteByQueryRequestParameters,Elasticsearch.Net.DeleteByQueryRequestParameters})">
            <summary>Represents a DELETE on /{index}/_query
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-delete-by-query.html</para>	
            </summary>
            <param name="index">A comma-separated list of indices to restrict the operation; use `_all` to perform the operation on all indices</param>
            <param name="body">A query to restrict the operation specified with the Query DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.DeleteByQuery``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.DeleteByQueryRequestParameters,Elasticsearch.Net.DeleteByQueryRequestParameters})">
            <summary>Represents a DELETE on /{index}/{type}/_query
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-delete-by-query.html</para>	
            </summary>
            <param name="index">A comma-separated list of indices to restrict the operation; use `_all` to perform the operation on all indices</param>
            <param name="type">A comma-separated list of types to restrict the operation</param>
            <param name="body">A query to restrict the operation specified with the Query DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.DeleteByQueryAsync``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.DeleteByQueryRequestParameters,Elasticsearch.Net.DeleteByQueryRequestParameters})">
            <summary>Represents a DELETE on /{index}/{type}/_query
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-delete-by-query.html</para>	
            </summary>
            <param name="index">A comma-separated list of indices to restrict the operation; use `_all` to perform the operation on all indices</param>
            <param name="type">A comma-separated list of types to restrict the operation</param>
            <param name="body">A query to restrict the operation specified with the Query DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.DeleteByQuery(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.DeleteByQueryRequestParameters,Elasticsearch.Net.DeleteByQueryRequestParameters})">
            <summary>Represents a DELETE on /{index}/{type}/_query
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-delete-by-query.html</para>	
            </summary>
            <param name="index">A comma-separated list of indices to restrict the operation; use `_all` to perform the operation on all indices</param>
            <param name="type">A comma-separated list of types to restrict the operation</param>
            <param name="body">A query to restrict the operation specified with the Query DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.DeleteByQueryAsync(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.DeleteByQueryRequestParameters,Elasticsearch.Net.DeleteByQueryRequestParameters})">
            <summary>Represents a DELETE on /{index}/{type}/_query
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-delete-by-query.html</para>	
            </summary>
            <param name="index">A comma-separated list of indices to restrict the operation; use `_all` to perform the operation on all indices</param>
            <param name="type">A comma-separated list of types to restrict the operation</param>
            <param name="body">A query to restrict the operation specified with the Query DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.Exists``1(System.String,System.String,System.String,System.Func{Elasticsearch.Net.DocumentExistsRequestParameters,Elasticsearch.Net.DocumentExistsRequestParameters})">
            <summary>Represents a HEAD on /{index}/{type}/{id}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-get.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document (use `_all` to fetch the first document matching the ID across all types)</param>
            <param name="id">The document ID</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.ExistsAsync``1(System.String,System.String,System.String,System.Func{Elasticsearch.Net.DocumentExistsRequestParameters,Elasticsearch.Net.DocumentExistsRequestParameters})">
            <summary>Represents a HEAD on /{index}/{type}/{id}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-get.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document (use `_all` to fetch the first document matching the ID across all types)</param>
            <param name="id">The document ID</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.Exists(System.String,System.String,System.String,System.Func{Elasticsearch.Net.DocumentExistsRequestParameters,Elasticsearch.Net.DocumentExistsRequestParameters})">
            <summary>Represents a HEAD on /{index}/{type}/{id}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-get.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document (use `_all` to fetch the first document matching the ID across all types)</param>
            <param name="id">The document ID</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.ExistsAsync(System.String,System.String,System.String,System.Func{Elasticsearch.Net.DocumentExistsRequestParameters,Elasticsearch.Net.DocumentExistsRequestParameters})">
            <summary>Represents a HEAD on /{index}/{type}/{id}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-get.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document (use `_all` to fetch the first document matching the ID across all types)</param>
            <param name="id">The document ID</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.ExplainGet``1(System.String,System.String,System.String,System.Func{Elasticsearch.Net.ExplainRequestParameters,Elasticsearch.Net.ExplainRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/{id}/_explain
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-explain.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="id">The document ID</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.ExplainGetAsync``1(System.String,System.String,System.String,System.Func{Elasticsearch.Net.ExplainRequestParameters,Elasticsearch.Net.ExplainRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/{id}/_explain
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-explain.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="id">The document ID</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.ExplainGet(System.String,System.String,System.String,System.Func{Elasticsearch.Net.ExplainRequestParameters,Elasticsearch.Net.ExplainRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/{id}/_explain
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-explain.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="id">The document ID</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.ExplainGetAsync(System.String,System.String,System.String,System.Func{Elasticsearch.Net.ExplainRequestParameters,Elasticsearch.Net.ExplainRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/{id}/_explain
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-explain.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="id">The document ID</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.Explain``1(System.String,System.String,System.String,System.Object,System.Func{Elasticsearch.Net.ExplainRequestParameters,Elasticsearch.Net.ExplainRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/{id}/_explain
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-explain.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="id">The document ID</param>
            <param name="body">The query definition using the Query DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.ExplainAsync``1(System.String,System.String,System.String,System.Object,System.Func{Elasticsearch.Net.ExplainRequestParameters,Elasticsearch.Net.ExplainRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/{id}/_explain
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-explain.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="id">The document ID</param>
            <param name="body">The query definition using the Query DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.Explain(System.String,System.String,System.String,System.Object,System.Func{Elasticsearch.Net.ExplainRequestParameters,Elasticsearch.Net.ExplainRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/{id}/_explain
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-explain.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="id">The document ID</param>
            <param name="body">The query definition using the Query DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.ExplainAsync(System.String,System.String,System.String,System.Object,System.Func{Elasticsearch.Net.ExplainRequestParameters,Elasticsearch.Net.ExplainRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/{id}/_explain
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-explain.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="id">The document ID</param>
            <param name="body">The query definition using the Query DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.Get``1(System.String,System.String,System.String,System.Func{Elasticsearch.Net.GetRequestParameters,Elasticsearch.Net.GetRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/{id}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-get.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document (use `_all` to fetch the first document matching the ID across all types)</param>
            <param name="id">The document ID</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.GetAsync``1(System.String,System.String,System.String,System.Func{Elasticsearch.Net.GetRequestParameters,Elasticsearch.Net.GetRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/{id}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-get.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document (use `_all` to fetch the first document matching the ID across all types)</param>
            <param name="id">The document ID</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.Get(System.String,System.String,System.String,System.Func{Elasticsearch.Net.GetRequestParameters,Elasticsearch.Net.GetRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/{id}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-get.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document (use `_all` to fetch the first document matching the ID across all types)</param>
            <param name="id">The document ID</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.GetAsync(System.String,System.String,System.String,System.Func{Elasticsearch.Net.GetRequestParameters,Elasticsearch.Net.GetRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/{id}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-get.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document (use `_all` to fetch the first document matching the ID across all types)</param>
            <param name="id">The document ID</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.GetSource``1(System.String,System.String,System.String,System.Func{Elasticsearch.Net.SourceRequestParameters,Elasticsearch.Net.SourceRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/{id}/_source
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-get.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document; use `_all` to fetch the first document matching the ID across all types</param>
            <param name="id">The document ID</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.GetSourceAsync``1(System.String,System.String,System.String,System.Func{Elasticsearch.Net.SourceRequestParameters,Elasticsearch.Net.SourceRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/{id}/_source
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-get.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document; use `_all` to fetch the first document matching the ID across all types</param>
            <param name="id">The document ID</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.GetSource(System.String,System.String,System.String,System.Func{Elasticsearch.Net.SourceRequestParameters,Elasticsearch.Net.SourceRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/{id}/_source
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-get.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document; use `_all` to fetch the first document matching the ID across all types</param>
            <param name="id">The document ID</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.GetSourceAsync(System.String,System.String,System.String,System.Func{Elasticsearch.Net.SourceRequestParameters,Elasticsearch.Net.SourceRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/{id}/_source
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-get.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document; use `_all` to fetch the first document matching the ID across all types</param>
            <param name="id">The document ID</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.Index``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.IndexRequestParameters,Elasticsearch.Net.IndexRequestParameters})">
            <summary>Represents a POST on /{index}/{type}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-index_.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="body">The document</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndexAsync``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.IndexRequestParameters,Elasticsearch.Net.IndexRequestParameters})">
            <summary>Represents a POST on /{index}/{type}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-index_.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="body">The document</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.Index(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.IndexRequestParameters,Elasticsearch.Net.IndexRequestParameters})">
            <summary>Represents a POST on /{index}/{type}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-index_.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="body">The document</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndexAsync(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.IndexRequestParameters,Elasticsearch.Net.IndexRequestParameters})">
            <summary>Represents a POST on /{index}/{type}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-index_.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="body">The document</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.Index``1(System.String,System.String,System.String,System.Object,System.Func{Elasticsearch.Net.IndexRequestParameters,Elasticsearch.Net.IndexRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/{id}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-index_.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="id">Document ID</param>
            <param name="body">The document</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndexAsync``1(System.String,System.String,System.String,System.Object,System.Func{Elasticsearch.Net.IndexRequestParameters,Elasticsearch.Net.IndexRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/{id}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-index_.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="id">Document ID</param>
            <param name="body">The document</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.Index(System.String,System.String,System.String,System.Object,System.Func{Elasticsearch.Net.IndexRequestParameters,Elasticsearch.Net.IndexRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/{id}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-index_.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="id">Document ID</param>
            <param name="body">The document</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndexAsync(System.String,System.String,System.String,System.Object,System.Func{Elasticsearch.Net.IndexRequestParameters,Elasticsearch.Net.IndexRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/{id}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-index_.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="id">Document ID</param>
            <param name="body">The document</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndexPut``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.IndexRequestParameters,Elasticsearch.Net.IndexRequestParameters})">
            <summary>Represents a PUT on /{index}/{type}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-index_.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="body">The document</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndexPutAsync``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.IndexRequestParameters,Elasticsearch.Net.IndexRequestParameters})">
            <summary>Represents a PUT on /{index}/{type}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-index_.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="body">The document</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndexPut(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.IndexRequestParameters,Elasticsearch.Net.IndexRequestParameters})">
            <summary>Represents a PUT on /{index}/{type}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-index_.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="body">The document</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndexPutAsync(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.IndexRequestParameters,Elasticsearch.Net.IndexRequestParameters})">
            <summary>Represents a PUT on /{index}/{type}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-index_.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="body">The document</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndexPut``1(System.String,System.String,System.String,System.Object,System.Func{Elasticsearch.Net.IndexRequestParameters,Elasticsearch.Net.IndexRequestParameters})">
            <summary>Represents a PUT on /{index}/{type}/{id}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-index_.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="id">Document ID</param>
            <param name="body">The document</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndexPutAsync``1(System.String,System.String,System.String,System.Object,System.Func{Elasticsearch.Net.IndexRequestParameters,Elasticsearch.Net.IndexRequestParameters})">
            <summary>Represents a PUT on /{index}/{type}/{id}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-index_.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="id">Document ID</param>
            <param name="body">The document</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndexPut(System.String,System.String,System.String,System.Object,System.Func{Elasticsearch.Net.IndexRequestParameters,Elasticsearch.Net.IndexRequestParameters})">
            <summary>Represents a PUT on /{index}/{type}/{id}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-index_.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="id">Document ID</param>
            <param name="body">The document</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndexPutAsync(System.String,System.String,System.String,System.Object,System.Func{Elasticsearch.Net.IndexRequestParameters,Elasticsearch.Net.IndexRequestParameters})">
            <summary>Represents a PUT on /{index}/{type}/{id}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-index_.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="id">Document ID</param>
            <param name="body">The document</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesAnalyzeGetForAll``1(System.Func{Elasticsearch.Net.AnalyzeRequestParameters,Elasticsearch.Net.AnalyzeRequestParameters})">
            <summary>Represents a GET on /_analyze
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-analyze.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesAnalyzeGetForAllAsync``1(System.Func{Elasticsearch.Net.AnalyzeRequestParameters,Elasticsearch.Net.AnalyzeRequestParameters})">
            <summary>Represents a GET on /_analyze
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-analyze.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesAnalyzeGetForAll(System.Func{Elasticsearch.Net.AnalyzeRequestParameters,Elasticsearch.Net.AnalyzeRequestParameters})">
            <summary>Represents a GET on /_analyze
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-analyze.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesAnalyzeGetForAllAsync(System.Func{Elasticsearch.Net.AnalyzeRequestParameters,Elasticsearch.Net.AnalyzeRequestParameters})">
            <summary>Represents a GET on /_analyze
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-analyze.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesAnalyzeGet``1(System.String,System.Func{Elasticsearch.Net.AnalyzeRequestParameters,Elasticsearch.Net.AnalyzeRequestParameters})">
            <summary>Represents a GET on /{index}/_analyze
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-analyze.html</para>	
            </summary>
            <param name="index">The name of the index to scope the operation</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesAnalyzeGetAsync``1(System.String,System.Func{Elasticsearch.Net.AnalyzeRequestParameters,Elasticsearch.Net.AnalyzeRequestParameters})">
            <summary>Represents a GET on /{index}/_analyze
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-analyze.html</para>	
            </summary>
            <param name="index">The name of the index to scope the operation</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesAnalyzeGet(System.String,System.Func{Elasticsearch.Net.AnalyzeRequestParameters,Elasticsearch.Net.AnalyzeRequestParameters})">
            <summary>Represents a GET on /{index}/_analyze
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-analyze.html</para>	
            </summary>
            <param name="index">The name of the index to scope the operation</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesAnalyzeGetAsync(System.String,System.Func{Elasticsearch.Net.AnalyzeRequestParameters,Elasticsearch.Net.AnalyzeRequestParameters})">
            <summary>Represents a GET on /{index}/_analyze
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-analyze.html</para>	
            </summary>
            <param name="index">The name of the index to scope the operation</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesAnalyzeForAll``1(System.Object,System.Func{Elasticsearch.Net.AnalyzeRequestParameters,Elasticsearch.Net.AnalyzeRequestParameters})">
            <summary>Represents a POST on /_analyze
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-analyze.html</para>	
            </summary>
            <param name="body">The text on which the analysis should be performed</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesAnalyzeForAllAsync``1(System.Object,System.Func{Elasticsearch.Net.AnalyzeRequestParameters,Elasticsearch.Net.AnalyzeRequestParameters})">
            <summary>Represents a POST on /_analyze
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-analyze.html</para>	
            </summary>
            <param name="body">The text on which the analysis should be performed</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesAnalyzeForAll(System.Object,System.Func{Elasticsearch.Net.AnalyzeRequestParameters,Elasticsearch.Net.AnalyzeRequestParameters})">
            <summary>Represents a POST on /_analyze
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-analyze.html</para>	
            </summary>
            <param name="body">The text on which the analysis should be performed</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesAnalyzeForAllAsync(System.Object,System.Func{Elasticsearch.Net.AnalyzeRequestParameters,Elasticsearch.Net.AnalyzeRequestParameters})">
            <summary>Represents a POST on /_analyze
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-analyze.html</para>	
            </summary>
            <param name="body">The text on which the analysis should be performed</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesAnalyze``1(System.String,System.Object,System.Func{Elasticsearch.Net.AnalyzeRequestParameters,Elasticsearch.Net.AnalyzeRequestParameters})">
            <summary>Represents a POST on /{index}/_analyze
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-analyze.html</para>	
            </summary>
            <param name="index">The name of the index to scope the operation</param>
            <param name="body">The text on which the analysis should be performed</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesAnalyzeAsync``1(System.String,System.Object,System.Func{Elasticsearch.Net.AnalyzeRequestParameters,Elasticsearch.Net.AnalyzeRequestParameters})">
            <summary>Represents a POST on /{index}/_analyze
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-analyze.html</para>	
            </summary>
            <param name="index">The name of the index to scope the operation</param>
            <param name="body">The text on which the analysis should be performed</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesAnalyze(System.String,System.Object,System.Func{Elasticsearch.Net.AnalyzeRequestParameters,Elasticsearch.Net.AnalyzeRequestParameters})">
            <summary>Represents a POST on /{index}/_analyze
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-analyze.html</para>	
            </summary>
            <param name="index">The name of the index to scope the operation</param>
            <param name="body">The text on which the analysis should be performed</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesAnalyzeAsync(System.String,System.Object,System.Func{Elasticsearch.Net.AnalyzeRequestParameters,Elasticsearch.Net.AnalyzeRequestParameters})">
            <summary>Represents a POST on /{index}/_analyze
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-analyze.html</para>	
            </summary>
            <param name="index">The name of the index to scope the operation</param>
            <param name="body">The text on which the analysis should be performed</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesClearCacheForAll``1(System.Func{Elasticsearch.Net.ClearCacheRequestParameters,Elasticsearch.Net.ClearCacheRequestParameters})">
            <summary>Represents a POST on /_cache/clear
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-clearcache.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesClearCacheForAllAsync``1(System.Func{Elasticsearch.Net.ClearCacheRequestParameters,Elasticsearch.Net.ClearCacheRequestParameters})">
            <summary>Represents a POST on /_cache/clear
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-clearcache.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesClearCacheForAll(System.Func{Elasticsearch.Net.ClearCacheRequestParameters,Elasticsearch.Net.ClearCacheRequestParameters})">
            <summary>Represents a POST on /_cache/clear
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-clearcache.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesClearCacheForAllAsync(System.Func{Elasticsearch.Net.ClearCacheRequestParameters,Elasticsearch.Net.ClearCacheRequestParameters})">
            <summary>Represents a POST on /_cache/clear
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-clearcache.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesClearCache``1(System.String,System.Func{Elasticsearch.Net.ClearCacheRequestParameters,Elasticsearch.Net.ClearCacheRequestParameters})">
            <summary>Represents a POST on /{index}/_cache/clear
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-clearcache.html</para>	
            </summary>
            <param name="index">A comma-separated list of index name to limit the operation</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesClearCacheAsync``1(System.String,System.Func{Elasticsearch.Net.ClearCacheRequestParameters,Elasticsearch.Net.ClearCacheRequestParameters})">
            <summary>Represents a POST on /{index}/_cache/clear
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-clearcache.html</para>	
            </summary>
            <param name="index">A comma-separated list of index name to limit the operation</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesClearCache(System.String,System.Func{Elasticsearch.Net.ClearCacheRequestParameters,Elasticsearch.Net.ClearCacheRequestParameters})">
            <summary>Represents a POST on /{index}/_cache/clear
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-clearcache.html</para>	
            </summary>
            <param name="index">A comma-separated list of index name to limit the operation</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesClearCacheAsync(System.String,System.Func{Elasticsearch.Net.ClearCacheRequestParameters,Elasticsearch.Net.ClearCacheRequestParameters})">
            <summary>Represents a POST on /{index}/_cache/clear
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-clearcache.html</para>	
            </summary>
            <param name="index">A comma-separated list of index name to limit the operation</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesClearCacheGetForAll``1(System.Func{Elasticsearch.Net.ClearCacheRequestParameters,Elasticsearch.Net.ClearCacheRequestParameters})">
            <summary>Represents a GET on /_cache/clear
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-clearcache.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesClearCacheGetForAllAsync``1(System.Func{Elasticsearch.Net.ClearCacheRequestParameters,Elasticsearch.Net.ClearCacheRequestParameters})">
            <summary>Represents a GET on /_cache/clear
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-clearcache.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesClearCacheGetForAll(System.Func{Elasticsearch.Net.ClearCacheRequestParameters,Elasticsearch.Net.ClearCacheRequestParameters})">
            <summary>Represents a GET on /_cache/clear
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-clearcache.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesClearCacheGetForAllAsync(System.Func{Elasticsearch.Net.ClearCacheRequestParameters,Elasticsearch.Net.ClearCacheRequestParameters})">
            <summary>Represents a GET on /_cache/clear
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-clearcache.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesClearCacheGet``1(System.String,System.Func{Elasticsearch.Net.ClearCacheRequestParameters,Elasticsearch.Net.ClearCacheRequestParameters})">
            <summary>Represents a GET on /{index}/_cache/clear
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-clearcache.html</para>	
            </summary>
            <param name="index">A comma-separated list of index name to limit the operation</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesClearCacheGetAsync``1(System.String,System.Func{Elasticsearch.Net.ClearCacheRequestParameters,Elasticsearch.Net.ClearCacheRequestParameters})">
            <summary>Represents a GET on /{index}/_cache/clear
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-clearcache.html</para>	
            </summary>
            <param name="index">A comma-separated list of index name to limit the operation</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesClearCacheGet(System.String,System.Func{Elasticsearch.Net.ClearCacheRequestParameters,Elasticsearch.Net.ClearCacheRequestParameters})">
            <summary>Represents a GET on /{index}/_cache/clear
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-clearcache.html</para>	
            </summary>
            <param name="index">A comma-separated list of index name to limit the operation</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesClearCacheGetAsync(System.String,System.Func{Elasticsearch.Net.ClearCacheRequestParameters,Elasticsearch.Net.ClearCacheRequestParameters})">
            <summary>Represents a GET on /{index}/_cache/clear
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-clearcache.html</para>	
            </summary>
            <param name="index">A comma-separated list of index name to limit the operation</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesClose``1(System.String,System.Func{Elasticsearch.Net.CloseIndexRequestParameters,Elasticsearch.Net.CloseIndexRequestParameters})">
            <summary>Represents a POST on /{index}/_close
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-open-close.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesCloseAsync``1(System.String,System.Func{Elasticsearch.Net.CloseIndexRequestParameters,Elasticsearch.Net.CloseIndexRequestParameters})">
            <summary>Represents a POST on /{index}/_close
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-open-close.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesClose(System.String,System.Func{Elasticsearch.Net.CloseIndexRequestParameters,Elasticsearch.Net.CloseIndexRequestParameters})">
            <summary>Represents a POST on /{index}/_close
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-open-close.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesCloseAsync(System.String,System.Func{Elasticsearch.Net.CloseIndexRequestParameters,Elasticsearch.Net.CloseIndexRequestParameters})">
            <summary>Represents a POST on /{index}/_close
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-open-close.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesCreate``1(System.String,System.Object,System.Func{Elasticsearch.Net.CreateIndexRequestParameters,Elasticsearch.Net.CreateIndexRequestParameters})">
            <summary>Represents a PUT on /{index}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-create-index.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="body">The configuration for the index (`settings` and `mappings`)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesCreateAsync``1(System.String,System.Object,System.Func{Elasticsearch.Net.CreateIndexRequestParameters,Elasticsearch.Net.CreateIndexRequestParameters})">
            <summary>Represents a PUT on /{index}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-create-index.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="body">The configuration for the index (`settings` and `mappings`)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesCreate(System.String,System.Object,System.Func{Elasticsearch.Net.CreateIndexRequestParameters,Elasticsearch.Net.CreateIndexRequestParameters})">
            <summary>Represents a PUT on /{index}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-create-index.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="body">The configuration for the index (`settings` and `mappings`)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesCreateAsync(System.String,System.Object,System.Func{Elasticsearch.Net.CreateIndexRequestParameters,Elasticsearch.Net.CreateIndexRequestParameters})">
            <summary>Represents a PUT on /{index}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-create-index.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="body">The configuration for the index (`settings` and `mappings`)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesCreatePost``1(System.String,System.Object,System.Func{Elasticsearch.Net.CreateIndexRequestParameters,Elasticsearch.Net.CreateIndexRequestParameters})">
            <summary>Represents a POST on /{index}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-create-index.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="body">The configuration for the index (`settings` and `mappings`)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesCreatePostAsync``1(System.String,System.Object,System.Func{Elasticsearch.Net.CreateIndexRequestParameters,Elasticsearch.Net.CreateIndexRequestParameters})">
            <summary>Represents a POST on /{index}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-create-index.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="body">The configuration for the index (`settings` and `mappings`)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesCreatePost(System.String,System.Object,System.Func{Elasticsearch.Net.CreateIndexRequestParameters,Elasticsearch.Net.CreateIndexRequestParameters})">
            <summary>Represents a POST on /{index}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-create-index.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="body">The configuration for the index (`settings` and `mappings`)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesCreatePostAsync(System.String,System.Object,System.Func{Elasticsearch.Net.CreateIndexRequestParameters,Elasticsearch.Net.CreateIndexRequestParameters})">
            <summary>Represents a POST on /{index}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-create-index.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="body">The configuration for the index (`settings` and `mappings`)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesDelete``1(System.String,System.Func{Elasticsearch.Net.DeleteIndexRequestParameters,Elasticsearch.Net.DeleteIndexRequestParameters})">
            <summary>Represents a DELETE on /{index}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-delete-index.html</para>	
            </summary>
            <param name="index">A comma-separated list of indices to delete; use `_all` or `*` string to delete all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesDeleteAsync``1(System.String,System.Func{Elasticsearch.Net.DeleteIndexRequestParameters,Elasticsearch.Net.DeleteIndexRequestParameters})">
            <summary>Represents a DELETE on /{index}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-delete-index.html</para>	
            </summary>
            <param name="index">A comma-separated list of indices to delete; use `_all` or `*` string to delete all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesDelete(System.String,System.Func{Elasticsearch.Net.DeleteIndexRequestParameters,Elasticsearch.Net.DeleteIndexRequestParameters})">
            <summary>Represents a DELETE on /{index}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-delete-index.html</para>	
            </summary>
            <param name="index">A comma-separated list of indices to delete; use `_all` or `*` string to delete all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesDeleteAsync(System.String,System.Func{Elasticsearch.Net.DeleteIndexRequestParameters,Elasticsearch.Net.DeleteIndexRequestParameters})">
            <summary>Represents a DELETE on /{index}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-delete-index.html</para>	
            </summary>
            <param name="index">A comma-separated list of indices to delete; use `_all` or `*` string to delete all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesDeleteAlias``1(System.String,System.String,System.Func{Elasticsearch.Net.IndicesDeleteAliasRequestParameters,Elasticsearch.Net.IndicesDeleteAliasRequestParameters})">
            <summary>Represents a DELETE on /{index}/_alias/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names (supports wildcards); use `_all` for all indices</param>
            <param name="name">A comma-separated list of aliases to delete (supports wildcards); use `_all` to delete all aliases for the specified indices.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesDeleteAliasAsync``1(System.String,System.String,System.Func{Elasticsearch.Net.IndicesDeleteAliasRequestParameters,Elasticsearch.Net.IndicesDeleteAliasRequestParameters})">
            <summary>Represents a DELETE on /{index}/_alias/{name}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names (supports wildcards); use `_all` for all indices</param>
            <param name="name">A comma-separated list of aliases to delete (supports wildcards); use `_all` to delete all aliases for the specified indices.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesDeleteAlias(System.String,System.String,System.Func{Elasticsearch.Net.IndicesDeleteAliasRequestParameters,Elasticsearch.Net.IndicesDeleteAliasRequestParameters})">
            <summary>Represents a DELETE on /{index}/_alias/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names (supports wildcards); use `_all` for all indices</param>
            <param name="name">A comma-separated list of aliases to delete (supports wildcards); use `_all` to delete all aliases for the specified indices.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesDeleteAliasAsync(System.String,System.String,System.Func{Elasticsearch.Net.IndicesDeleteAliasRequestParameters,Elasticsearch.Net.IndicesDeleteAliasRequestParameters})">
            <summary>Represents a DELETE on /{index}/_alias/{name}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names (supports wildcards); use `_all` for all indices</param>
            <param name="name">A comma-separated list of aliases to delete (supports wildcards); use `_all` to delete all aliases for the specified indices.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesDeleteMapping``1(System.String,System.String,System.Func{Elasticsearch.Net.DeleteMappingRequestParameters,Elasticsearch.Net.DeleteMappingRequestParameters})">
            <summary>Represents a DELETE on /{index}/{type}/_mapping
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-delete-mapping.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names (supports wildcards); use `_all` for all indices</param>
            <param name="type">A comma-separated list of document types to delete (supports wildcards); use `_all` to delete all document types in the specified indices.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesDeleteMappingAsync``1(System.String,System.String,System.Func{Elasticsearch.Net.DeleteMappingRequestParameters,Elasticsearch.Net.DeleteMappingRequestParameters})">
            <summary>Represents a DELETE on /{index}/{type}/_mapping
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-delete-mapping.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names (supports wildcards); use `_all` for all indices</param>
            <param name="type">A comma-separated list of document types to delete (supports wildcards); use `_all` to delete all document types in the specified indices.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesDeleteMapping(System.String,System.String,System.Func{Elasticsearch.Net.DeleteMappingRequestParameters,Elasticsearch.Net.DeleteMappingRequestParameters})">
            <summary>Represents a DELETE on /{index}/{type}/_mapping
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-delete-mapping.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names (supports wildcards); use `_all` for all indices</param>
            <param name="type">A comma-separated list of document types to delete (supports wildcards); use `_all` to delete all document types in the specified indices.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesDeleteMappingAsync(System.String,System.String,System.Func{Elasticsearch.Net.DeleteMappingRequestParameters,Elasticsearch.Net.DeleteMappingRequestParameters})">
            <summary>Represents a DELETE on /{index}/{type}/_mapping
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-delete-mapping.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names (supports wildcards); use `_all` for all indices</param>
            <param name="type">A comma-separated list of document types to delete (supports wildcards); use `_all` to delete all document types in the specified indices.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesDeleteTemplateForAll``1(System.String,System.Func{Elasticsearch.Net.DeleteTemplateRequestParameters,Elasticsearch.Net.DeleteTemplateRequestParameters})">
            <summary>Represents a DELETE on /_template/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-templates.html</para>	
            </summary>
            <param name="name">The name of the template</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesDeleteTemplateForAllAsync``1(System.String,System.Func{Elasticsearch.Net.DeleteTemplateRequestParameters,Elasticsearch.Net.DeleteTemplateRequestParameters})">
            <summary>Represents a DELETE on /_template/{name}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-templates.html</para>	
            </summary>
            <param name="name">The name of the template</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesDeleteTemplateForAll(System.String,System.Func{Elasticsearch.Net.DeleteTemplateRequestParameters,Elasticsearch.Net.DeleteTemplateRequestParameters})">
            <summary>Represents a DELETE on /_template/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-templates.html</para>	
            </summary>
            <param name="name">The name of the template</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesDeleteTemplateForAllAsync(System.String,System.Func{Elasticsearch.Net.DeleteTemplateRequestParameters,Elasticsearch.Net.DeleteTemplateRequestParameters})">
            <summary>Represents a DELETE on /_template/{name}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-templates.html</para>	
            </summary>
            <param name="name">The name of the template</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesDeleteWarmer``1(System.String,System.String,System.Func{Elasticsearch.Net.DeleteWarmerRequestParameters,Elasticsearch.Net.DeleteWarmerRequestParameters})">
            <summary>Represents a DELETE on /{index}/_warmer/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to delete warmers from (supports wildcards); use `_all` to perform the operation on all indices.</param>
            <param name="name">A comma-separated list of warmer names to delete (supports wildcards); use `_all` to delete all warmers in the specified indices. You must specify a name either in the uri or in the parameters.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesDeleteWarmerAsync``1(System.String,System.String,System.Func{Elasticsearch.Net.DeleteWarmerRequestParameters,Elasticsearch.Net.DeleteWarmerRequestParameters})">
            <summary>Represents a DELETE on /{index}/_warmer/{name}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to delete warmers from (supports wildcards); use `_all` to perform the operation on all indices.</param>
            <param name="name">A comma-separated list of warmer names to delete (supports wildcards); use `_all` to delete all warmers in the specified indices. You must specify a name either in the uri or in the parameters.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesDeleteWarmer(System.String,System.String,System.Func{Elasticsearch.Net.DeleteWarmerRequestParameters,Elasticsearch.Net.DeleteWarmerRequestParameters})">
            <summary>Represents a DELETE on /{index}/_warmer/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to delete warmers from (supports wildcards); use `_all` to perform the operation on all indices.</param>
            <param name="name">A comma-separated list of warmer names to delete (supports wildcards); use `_all` to delete all warmers in the specified indices. You must specify a name either in the uri or in the parameters.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesDeleteWarmerAsync(System.String,System.String,System.Func{Elasticsearch.Net.DeleteWarmerRequestParameters,Elasticsearch.Net.DeleteWarmerRequestParameters})">
            <summary>Represents a DELETE on /{index}/_warmer/{name}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to delete warmers from (supports wildcards); use `_all` to perform the operation on all indices.</param>
            <param name="name">A comma-separated list of warmer names to delete (supports wildcards); use `_all` to delete all warmers in the specified indices. You must specify a name either in the uri or in the parameters.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesExists``1(System.String,System.Func{Elasticsearch.Net.IndexExistsRequestParameters,Elasticsearch.Net.IndexExistsRequestParameters})">
            <summary>Represents a HEAD on /{index}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-settings.html</para>	
            </summary>
            <param name="index">A comma-separated list of indices to check</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesExistsAsync``1(System.String,System.Func{Elasticsearch.Net.IndexExistsRequestParameters,Elasticsearch.Net.IndexExistsRequestParameters})">
            <summary>Represents a HEAD on /{index}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-settings.html</para>	
            </summary>
            <param name="index">A comma-separated list of indices to check</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesExists(System.String,System.Func{Elasticsearch.Net.IndexExistsRequestParameters,Elasticsearch.Net.IndexExistsRequestParameters})">
            <summary>Represents a HEAD on /{index}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-settings.html</para>	
            </summary>
            <param name="index">A comma-separated list of indices to check</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesExistsAsync(System.String,System.Func{Elasticsearch.Net.IndexExistsRequestParameters,Elasticsearch.Net.IndexExistsRequestParameters})">
            <summary>Represents a HEAD on /{index}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-settings.html</para>	
            </summary>
            <param name="index">A comma-separated list of indices to check</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesExistsAliasForAll``1(System.String,System.Func{Elasticsearch.Net.IndicesExistsAliasRequestParameters,Elasticsearch.Net.IndicesExistsAliasRequestParameters})">
            <summary>Represents a HEAD on /_alias/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="name">A comma-separated list of alias names to return</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesExistsAliasForAllAsync``1(System.String,System.Func{Elasticsearch.Net.IndicesExistsAliasRequestParameters,Elasticsearch.Net.IndicesExistsAliasRequestParameters})">
            <summary>Represents a HEAD on /_alias/{name}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="name">A comma-separated list of alias names to return</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesExistsAliasForAll(System.String,System.Func{Elasticsearch.Net.IndicesExistsAliasRequestParameters,Elasticsearch.Net.IndicesExistsAliasRequestParameters})">
            <summary>Represents a HEAD on /_alias/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="name">A comma-separated list of alias names to return</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesExistsAliasForAllAsync(System.String,System.Func{Elasticsearch.Net.IndicesExistsAliasRequestParameters,Elasticsearch.Net.IndicesExistsAliasRequestParameters})">
            <summary>Represents a HEAD on /_alias/{name}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="name">A comma-separated list of alias names to return</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesExistsAlias``1(System.String,System.String,System.Func{Elasticsearch.Net.IndicesExistsAliasRequestParameters,Elasticsearch.Net.IndicesExistsAliasRequestParameters})">
            <summary>Represents a HEAD on /{index}/_alias/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to filter aliases</param>
            <param name="name">A comma-separated list of alias names to return</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesExistsAliasAsync``1(System.String,System.String,System.Func{Elasticsearch.Net.IndicesExistsAliasRequestParameters,Elasticsearch.Net.IndicesExistsAliasRequestParameters})">
            <summary>Represents a HEAD on /{index}/_alias/{name}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to filter aliases</param>
            <param name="name">A comma-separated list of alias names to return</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesExistsAlias(System.String,System.String,System.Func{Elasticsearch.Net.IndicesExistsAliasRequestParameters,Elasticsearch.Net.IndicesExistsAliasRequestParameters})">
            <summary>Represents a HEAD on /{index}/_alias/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to filter aliases</param>
            <param name="name">A comma-separated list of alias names to return</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesExistsAliasAsync(System.String,System.String,System.Func{Elasticsearch.Net.IndicesExistsAliasRequestParameters,Elasticsearch.Net.IndicesExistsAliasRequestParameters})">
            <summary>Represents a HEAD on /{index}/_alias/{name}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to filter aliases</param>
            <param name="name">A comma-separated list of alias names to return</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesExistsAlias``1(System.String,System.Func{Elasticsearch.Net.IndicesExistsAliasRequestParameters,Elasticsearch.Net.IndicesExistsAliasRequestParameters})">
            <summary>Represents a HEAD on /{index}/_alias
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to filter aliases</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesExistsAliasAsync``1(System.String,System.Func{Elasticsearch.Net.IndicesExistsAliasRequestParameters,Elasticsearch.Net.IndicesExistsAliasRequestParameters})">
            <summary>Represents a HEAD on /{index}/_alias
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to filter aliases</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesExistsAlias(System.String,System.Func{Elasticsearch.Net.IndicesExistsAliasRequestParameters,Elasticsearch.Net.IndicesExistsAliasRequestParameters})">
            <summary>Represents a HEAD on /{index}/_alias
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to filter aliases</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesExistsAliasAsync(System.String,System.Func{Elasticsearch.Net.IndicesExistsAliasRequestParameters,Elasticsearch.Net.IndicesExistsAliasRequestParameters})">
            <summary>Represents a HEAD on /{index}/_alias
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to filter aliases</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesExistsTemplateForAll``1(System.String,System.Func{Elasticsearch.Net.IndicesExistsTemplateRequestParameters,Elasticsearch.Net.IndicesExistsTemplateRequestParameters})">
            <summary>Represents a HEAD on /_template/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-templates.html</para>	
            </summary>
            <param name="name">The name of the template</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesExistsTemplateForAllAsync``1(System.String,System.Func{Elasticsearch.Net.IndicesExistsTemplateRequestParameters,Elasticsearch.Net.IndicesExistsTemplateRequestParameters})">
            <summary>Represents a HEAD on /_template/{name}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-templates.html</para>	
            </summary>
            <param name="name">The name of the template</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesExistsTemplateForAll(System.String,System.Func{Elasticsearch.Net.IndicesExistsTemplateRequestParameters,Elasticsearch.Net.IndicesExistsTemplateRequestParameters})">
            <summary>Represents a HEAD on /_template/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-templates.html</para>	
            </summary>
            <param name="name">The name of the template</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesExistsTemplateForAllAsync(System.String,System.Func{Elasticsearch.Net.IndicesExistsTemplateRequestParameters,Elasticsearch.Net.IndicesExistsTemplateRequestParameters})">
            <summary>Represents a HEAD on /_template/{name}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-templates.html</para>	
            </summary>
            <param name="name">The name of the template</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesExistsType``1(System.String,System.String,System.Func{Elasticsearch.Net.IndicesExistsTypeRequestParameters,Elasticsearch.Net.IndicesExistsTypeRequestParameters})">
            <summary>Represents a HEAD on /{index}/{type}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-types-exists.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` to check the types across all indices</param>
            <param name="type">A comma-separated list of document types to check</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesExistsTypeAsync``1(System.String,System.String,System.Func{Elasticsearch.Net.IndicesExistsTypeRequestParameters,Elasticsearch.Net.IndicesExistsTypeRequestParameters})">
            <summary>Represents a HEAD on /{index}/{type}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-types-exists.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` to check the types across all indices</param>
            <param name="type">A comma-separated list of document types to check</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesExistsType(System.String,System.String,System.Func{Elasticsearch.Net.IndicesExistsTypeRequestParameters,Elasticsearch.Net.IndicesExistsTypeRequestParameters})">
            <summary>Represents a HEAD on /{index}/{type}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-types-exists.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` to check the types across all indices</param>
            <param name="type">A comma-separated list of document types to check</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesExistsTypeAsync(System.String,System.String,System.Func{Elasticsearch.Net.IndicesExistsTypeRequestParameters,Elasticsearch.Net.IndicesExistsTypeRequestParameters})">
            <summary>Represents a HEAD on /{index}/{type}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-types-exists.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` to check the types across all indices</param>
            <param name="type">A comma-separated list of document types to check</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesFlushForAll``1(System.Func{Elasticsearch.Net.FlushRequestParameters,Elasticsearch.Net.FlushRequestParameters})">
            <summary>Represents a POST on /_flush
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-flush.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesFlushForAllAsync``1(System.Func{Elasticsearch.Net.FlushRequestParameters,Elasticsearch.Net.FlushRequestParameters})">
            <summary>Represents a POST on /_flush
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-flush.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesFlushForAll(System.Func{Elasticsearch.Net.FlushRequestParameters,Elasticsearch.Net.FlushRequestParameters})">
            <summary>Represents a POST on /_flush
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-flush.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesFlushForAllAsync(System.Func{Elasticsearch.Net.FlushRequestParameters,Elasticsearch.Net.FlushRequestParameters})">
            <summary>Represents a POST on /_flush
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-flush.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesFlush``1(System.String,System.Func{Elasticsearch.Net.FlushRequestParameters,Elasticsearch.Net.FlushRequestParameters})">
            <summary>Represents a POST on /{index}/_flush
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-flush.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string for all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesFlushAsync``1(System.String,System.Func{Elasticsearch.Net.FlushRequestParameters,Elasticsearch.Net.FlushRequestParameters})">
            <summary>Represents a POST on /{index}/_flush
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-flush.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string for all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesFlush(System.String,System.Func{Elasticsearch.Net.FlushRequestParameters,Elasticsearch.Net.FlushRequestParameters})">
            <summary>Represents a POST on /{index}/_flush
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-flush.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string for all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesFlushAsync(System.String,System.Func{Elasticsearch.Net.FlushRequestParameters,Elasticsearch.Net.FlushRequestParameters})">
            <summary>Represents a POST on /{index}/_flush
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-flush.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string for all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesFlushGetForAll``1(System.Func{Elasticsearch.Net.FlushRequestParameters,Elasticsearch.Net.FlushRequestParameters})">
            <summary>Represents a GET on /_flush
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-flush.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesFlushGetForAllAsync``1(System.Func{Elasticsearch.Net.FlushRequestParameters,Elasticsearch.Net.FlushRequestParameters})">
            <summary>Represents a GET on /_flush
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-flush.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesFlushGetForAll(System.Func{Elasticsearch.Net.FlushRequestParameters,Elasticsearch.Net.FlushRequestParameters})">
            <summary>Represents a GET on /_flush
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-flush.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesFlushGetForAllAsync(System.Func{Elasticsearch.Net.FlushRequestParameters,Elasticsearch.Net.FlushRequestParameters})">
            <summary>Represents a GET on /_flush
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-flush.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesFlushGet``1(System.String,System.Func{Elasticsearch.Net.FlushRequestParameters,Elasticsearch.Net.FlushRequestParameters})">
            <summary>Represents a GET on /{index}/_flush
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-flush.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string for all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesFlushGetAsync``1(System.String,System.Func{Elasticsearch.Net.FlushRequestParameters,Elasticsearch.Net.FlushRequestParameters})">
            <summary>Represents a GET on /{index}/_flush
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-flush.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string for all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesFlushGet(System.String,System.Func{Elasticsearch.Net.FlushRequestParameters,Elasticsearch.Net.FlushRequestParameters})">
            <summary>Represents a GET on /{index}/_flush
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-flush.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string for all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesFlushGetAsync(System.String,System.Func{Elasticsearch.Net.FlushRequestParameters,Elasticsearch.Net.FlushRequestParameters})">
            <summary>Represents a GET on /{index}/_flush
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-flush.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string for all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetAliasForAll``1(System.Func{Elasticsearch.Net.GetAliasRequestParameters,Elasticsearch.Net.GetAliasRequestParameters})">
            <summary>Represents a GET on /_alias
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetAliasForAllAsync``1(System.Func{Elasticsearch.Net.GetAliasRequestParameters,Elasticsearch.Net.GetAliasRequestParameters})">
            <summary>Represents a GET on /_alias
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetAliasForAll(System.Func{Elasticsearch.Net.GetAliasRequestParameters,Elasticsearch.Net.GetAliasRequestParameters})">
            <summary>Represents a GET on /_alias
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetAliasForAllAsync(System.Func{Elasticsearch.Net.GetAliasRequestParameters,Elasticsearch.Net.GetAliasRequestParameters})">
            <summary>Represents a GET on /_alias
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetAliasForAll``1(System.String,System.Func{Elasticsearch.Net.GetAliasRequestParameters,Elasticsearch.Net.GetAliasRequestParameters})">
            <summary>Represents a GET on /_alias/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="name">A comma-separated list of alias names to return</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetAliasForAllAsync``1(System.String,System.Func{Elasticsearch.Net.GetAliasRequestParameters,Elasticsearch.Net.GetAliasRequestParameters})">
            <summary>Represents a GET on /_alias/{name}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="name">A comma-separated list of alias names to return</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetAliasForAll(System.String,System.Func{Elasticsearch.Net.GetAliasRequestParameters,Elasticsearch.Net.GetAliasRequestParameters})">
            <summary>Represents a GET on /_alias/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="name">A comma-separated list of alias names to return</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetAliasForAllAsync(System.String,System.Func{Elasticsearch.Net.GetAliasRequestParameters,Elasticsearch.Net.GetAliasRequestParameters})">
            <summary>Represents a GET on /_alias/{name}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="name">A comma-separated list of alias names to return</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetAlias``1(System.String,System.String,System.Func{Elasticsearch.Net.GetAliasRequestParameters,Elasticsearch.Net.GetAliasRequestParameters})">
            <summary>Represents a GET on /{index}/_alias/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to filter aliases</param>
            <param name="name">A comma-separated list of alias names to return</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetAliasAsync``1(System.String,System.String,System.Func{Elasticsearch.Net.GetAliasRequestParameters,Elasticsearch.Net.GetAliasRequestParameters})">
            <summary>Represents a GET on /{index}/_alias/{name}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to filter aliases</param>
            <param name="name">A comma-separated list of alias names to return</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetAlias(System.String,System.String,System.Func{Elasticsearch.Net.GetAliasRequestParameters,Elasticsearch.Net.GetAliasRequestParameters})">
            <summary>Represents a GET on /{index}/_alias/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to filter aliases</param>
            <param name="name">A comma-separated list of alias names to return</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetAliasAsync(System.String,System.String,System.Func{Elasticsearch.Net.GetAliasRequestParameters,Elasticsearch.Net.GetAliasRequestParameters})">
            <summary>Represents a GET on /{index}/_alias/{name}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to filter aliases</param>
            <param name="name">A comma-separated list of alias names to return</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetAlias``1(System.String,System.Func{Elasticsearch.Net.GetAliasRequestParameters,Elasticsearch.Net.GetAliasRequestParameters})">
            <summary>Represents a GET on /{index}/_alias
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to filter aliases</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetAliasAsync``1(System.String,System.Func{Elasticsearch.Net.GetAliasRequestParameters,Elasticsearch.Net.GetAliasRequestParameters})">
            <summary>Represents a GET on /{index}/_alias
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to filter aliases</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetAlias(System.String,System.Func{Elasticsearch.Net.GetAliasRequestParameters,Elasticsearch.Net.GetAliasRequestParameters})">
            <summary>Represents a GET on /{index}/_alias
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to filter aliases</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetAliasAsync(System.String,System.Func{Elasticsearch.Net.GetAliasRequestParameters,Elasticsearch.Net.GetAliasRequestParameters})">
            <summary>Represents a GET on /{index}/_alias
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to filter aliases</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetAliasesForAll``1(System.Func{Elasticsearch.Net.GetAliasesRequestParameters,Elasticsearch.Net.GetAliasesRequestParameters})">
            <summary>Represents a GET on /_aliases
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetAliasesForAllAsync``1(System.Func{Elasticsearch.Net.GetAliasesRequestParameters,Elasticsearch.Net.GetAliasesRequestParameters})">
            <summary>Represents a GET on /_aliases
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetAliasesForAll(System.Func{Elasticsearch.Net.GetAliasesRequestParameters,Elasticsearch.Net.GetAliasesRequestParameters})">
            <summary>Represents a GET on /_aliases
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetAliasesForAllAsync(System.Func{Elasticsearch.Net.GetAliasesRequestParameters,Elasticsearch.Net.GetAliasesRequestParameters})">
            <summary>Represents a GET on /_aliases
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetAliases``1(System.String,System.Func{Elasticsearch.Net.GetAliasesRequestParameters,Elasticsearch.Net.GetAliasesRequestParameters})">
            <summary>Represents a GET on /{index}/_aliases
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to filter aliases</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetAliasesAsync``1(System.String,System.Func{Elasticsearch.Net.GetAliasesRequestParameters,Elasticsearch.Net.GetAliasesRequestParameters})">
            <summary>Represents a GET on /{index}/_aliases
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to filter aliases</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetAliases(System.String,System.Func{Elasticsearch.Net.GetAliasesRequestParameters,Elasticsearch.Net.GetAliasesRequestParameters})">
            <summary>Represents a GET on /{index}/_aliases
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to filter aliases</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetAliasesAsync(System.String,System.Func{Elasticsearch.Net.GetAliasesRequestParameters,Elasticsearch.Net.GetAliasesRequestParameters})">
            <summary>Represents a GET on /{index}/_aliases
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to filter aliases</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetAliases``1(System.String,System.String,System.Func{Elasticsearch.Net.GetAliasesRequestParameters,Elasticsearch.Net.GetAliasesRequestParameters})">
            <summary>Represents a GET on /{index}/_aliases/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to filter aliases</param>
            <param name="name">A comma-separated list of alias names to filter</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetAliasesAsync``1(System.String,System.String,System.Func{Elasticsearch.Net.GetAliasesRequestParameters,Elasticsearch.Net.GetAliasesRequestParameters})">
            <summary>Represents a GET on /{index}/_aliases/{name}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to filter aliases</param>
            <param name="name">A comma-separated list of alias names to filter</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetAliases(System.String,System.String,System.Func{Elasticsearch.Net.GetAliasesRequestParameters,Elasticsearch.Net.GetAliasesRequestParameters})">
            <summary>Represents a GET on /{index}/_aliases/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to filter aliases</param>
            <param name="name">A comma-separated list of alias names to filter</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetAliasesAsync(System.String,System.String,System.Func{Elasticsearch.Net.GetAliasesRequestParameters,Elasticsearch.Net.GetAliasesRequestParameters})">
            <summary>Represents a GET on /{index}/_aliases/{name}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to filter aliases</param>
            <param name="name">A comma-separated list of alias names to filter</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetAliasesForAll``1(System.String,System.Func{Elasticsearch.Net.GetAliasesRequestParameters,Elasticsearch.Net.GetAliasesRequestParameters})">
            <summary>Represents a GET on /_aliases/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="name">A comma-separated list of alias names to filter</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetAliasesForAllAsync``1(System.String,System.Func{Elasticsearch.Net.GetAliasesRequestParameters,Elasticsearch.Net.GetAliasesRequestParameters})">
            <summary>Represents a GET on /_aliases/{name}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="name">A comma-separated list of alias names to filter</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetAliasesForAll(System.String,System.Func{Elasticsearch.Net.GetAliasesRequestParameters,Elasticsearch.Net.GetAliasesRequestParameters})">
            <summary>Represents a GET on /_aliases/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="name">A comma-separated list of alias names to filter</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetAliasesForAllAsync(System.String,System.Func{Elasticsearch.Net.GetAliasesRequestParameters,Elasticsearch.Net.GetAliasesRequestParameters})">
            <summary>Represents a GET on /_aliases/{name}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="name">A comma-separated list of alias names to filter</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetFieldMappingForAll``1(System.String,System.Func{Elasticsearch.Net.IndicesGetFieldMappingRequestParameters,Elasticsearch.Net.IndicesGetFieldMappingRequestParameters})">
            <summary>Represents a GET on /_mapping/field/{field}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-field-mapping.html</para>	
            </summary>
            <param name="field">A comma-separated list of fields</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetFieldMappingForAllAsync``1(System.String,System.Func{Elasticsearch.Net.IndicesGetFieldMappingRequestParameters,Elasticsearch.Net.IndicesGetFieldMappingRequestParameters})">
            <summary>Represents a GET on /_mapping/field/{field}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-field-mapping.html</para>	
            </summary>
            <param name="field">A comma-separated list of fields</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetFieldMappingForAll(System.String,System.Func{Elasticsearch.Net.IndicesGetFieldMappingRequestParameters,Elasticsearch.Net.IndicesGetFieldMappingRequestParameters})">
            <summary>Represents a GET on /_mapping/field/{field}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-field-mapping.html</para>	
            </summary>
            <param name="field">A comma-separated list of fields</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetFieldMappingForAllAsync(System.String,System.Func{Elasticsearch.Net.IndicesGetFieldMappingRequestParameters,Elasticsearch.Net.IndicesGetFieldMappingRequestParameters})">
            <summary>Represents a GET on /_mapping/field/{field}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-field-mapping.html</para>	
            </summary>
            <param name="field">A comma-separated list of fields</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetFieldMapping``1(System.String,System.String,System.Func{Elasticsearch.Net.IndicesGetFieldMappingRequestParameters,Elasticsearch.Net.IndicesGetFieldMappingRequestParameters})">
            <summary>Represents a GET on /{index}/_mapping/field/{field}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-field-mapping.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names</param>
            <param name="field">A comma-separated list of fields</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetFieldMappingAsync``1(System.String,System.String,System.Func{Elasticsearch.Net.IndicesGetFieldMappingRequestParameters,Elasticsearch.Net.IndicesGetFieldMappingRequestParameters})">
            <summary>Represents a GET on /{index}/_mapping/field/{field}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-field-mapping.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names</param>
            <param name="field">A comma-separated list of fields</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetFieldMapping(System.String,System.String,System.Func{Elasticsearch.Net.IndicesGetFieldMappingRequestParameters,Elasticsearch.Net.IndicesGetFieldMappingRequestParameters})">
            <summary>Represents a GET on /{index}/_mapping/field/{field}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-field-mapping.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names</param>
            <param name="field">A comma-separated list of fields</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetFieldMappingAsync(System.String,System.String,System.Func{Elasticsearch.Net.IndicesGetFieldMappingRequestParameters,Elasticsearch.Net.IndicesGetFieldMappingRequestParameters})">
            <summary>Represents a GET on /{index}/_mapping/field/{field}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-field-mapping.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names</param>
            <param name="field">A comma-separated list of fields</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetFieldMappingForAll``1(System.String,System.String,System.Func{Elasticsearch.Net.IndicesGetFieldMappingRequestParameters,Elasticsearch.Net.IndicesGetFieldMappingRequestParameters})">
            <summary>Represents a GET on /_mapping/{type}/field/{field}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-field-mapping.html</para>	
            </summary>
            <param name="type">A comma-separated list of document types</param>
            <param name="field">A comma-separated list of fields</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetFieldMappingForAllAsync``1(System.String,System.String,System.Func{Elasticsearch.Net.IndicesGetFieldMappingRequestParameters,Elasticsearch.Net.IndicesGetFieldMappingRequestParameters})">
            <summary>Represents a GET on /_mapping/{type}/field/{field}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-field-mapping.html</para>	
            </summary>
            <param name="type">A comma-separated list of document types</param>
            <param name="field">A comma-separated list of fields</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetFieldMappingForAll(System.String,System.String,System.Func{Elasticsearch.Net.IndicesGetFieldMappingRequestParameters,Elasticsearch.Net.IndicesGetFieldMappingRequestParameters})">
            <summary>Represents a GET on /_mapping/{type}/field/{field}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-field-mapping.html</para>	
            </summary>
            <param name="type">A comma-separated list of document types</param>
            <param name="field">A comma-separated list of fields</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetFieldMappingForAllAsync(System.String,System.String,System.Func{Elasticsearch.Net.IndicesGetFieldMappingRequestParameters,Elasticsearch.Net.IndicesGetFieldMappingRequestParameters})">
            <summary>Represents a GET on /_mapping/{type}/field/{field}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-field-mapping.html</para>	
            </summary>
            <param name="type">A comma-separated list of document types</param>
            <param name="field">A comma-separated list of fields</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetFieldMapping``1(System.String,System.String,System.String,System.Func{Elasticsearch.Net.IndicesGetFieldMappingRequestParameters,Elasticsearch.Net.IndicesGetFieldMappingRequestParameters})">
            <summary>Represents a GET on /{index}/_mapping/{type}/field/{field}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-field-mapping.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names</param>
            <param name="type">A comma-separated list of document types</param>
            <param name="field">A comma-separated list of fields</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetFieldMappingAsync``1(System.String,System.String,System.String,System.Func{Elasticsearch.Net.IndicesGetFieldMappingRequestParameters,Elasticsearch.Net.IndicesGetFieldMappingRequestParameters})">
            <summary>Represents a GET on /{index}/_mapping/{type}/field/{field}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-field-mapping.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names</param>
            <param name="type">A comma-separated list of document types</param>
            <param name="field">A comma-separated list of fields</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetFieldMapping(System.String,System.String,System.String,System.Func{Elasticsearch.Net.IndicesGetFieldMappingRequestParameters,Elasticsearch.Net.IndicesGetFieldMappingRequestParameters})">
            <summary>Represents a GET on /{index}/_mapping/{type}/field/{field}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-field-mapping.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names</param>
            <param name="type">A comma-separated list of document types</param>
            <param name="field">A comma-separated list of fields</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetFieldMappingAsync(System.String,System.String,System.String,System.Func{Elasticsearch.Net.IndicesGetFieldMappingRequestParameters,Elasticsearch.Net.IndicesGetFieldMappingRequestParameters})">
            <summary>Represents a GET on /{index}/_mapping/{type}/field/{field}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-field-mapping.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names</param>
            <param name="type">A comma-separated list of document types</param>
            <param name="field">A comma-separated list of fields</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetMappingForAll``1(System.Func{Elasticsearch.Net.GetMappingRequestParameters,Elasticsearch.Net.GetMappingRequestParameters})">
            <summary>Represents a GET on /_mapping
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-mapping.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetMappingForAllAsync``1(System.Func{Elasticsearch.Net.GetMappingRequestParameters,Elasticsearch.Net.GetMappingRequestParameters})">
            <summary>Represents a GET on /_mapping
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-mapping.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetMappingForAll(System.Func{Elasticsearch.Net.GetMappingRequestParameters,Elasticsearch.Net.GetMappingRequestParameters})">
            <summary>Represents a GET on /_mapping
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-mapping.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetMappingForAllAsync(System.Func{Elasticsearch.Net.GetMappingRequestParameters,Elasticsearch.Net.GetMappingRequestParameters})">
            <summary>Represents a GET on /_mapping
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-mapping.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetMapping``1(System.String,System.Func{Elasticsearch.Net.GetMappingRequestParameters,Elasticsearch.Net.GetMappingRequestParameters})">
            <summary>Represents a GET on /{index}/_mapping
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-mapping.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetMappingAsync``1(System.String,System.Func{Elasticsearch.Net.GetMappingRequestParameters,Elasticsearch.Net.GetMappingRequestParameters})">
            <summary>Represents a GET on /{index}/_mapping
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-mapping.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetMapping(System.String,System.Func{Elasticsearch.Net.GetMappingRequestParameters,Elasticsearch.Net.GetMappingRequestParameters})">
            <summary>Represents a GET on /{index}/_mapping
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-mapping.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetMappingAsync(System.String,System.Func{Elasticsearch.Net.GetMappingRequestParameters,Elasticsearch.Net.GetMappingRequestParameters})">
            <summary>Represents a GET on /{index}/_mapping
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-mapping.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetMappingForAll``1(System.String,System.Func{Elasticsearch.Net.GetMappingRequestParameters,Elasticsearch.Net.GetMappingRequestParameters})">
            <summary>Represents a GET on /_mapping/{type}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-mapping.html</para>	
            </summary>
            <param name="type">A comma-separated list of document types</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetMappingForAllAsync``1(System.String,System.Func{Elasticsearch.Net.GetMappingRequestParameters,Elasticsearch.Net.GetMappingRequestParameters})">
            <summary>Represents a GET on /_mapping/{type}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-mapping.html</para>	
            </summary>
            <param name="type">A comma-separated list of document types</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetMappingForAll(System.String,System.Func{Elasticsearch.Net.GetMappingRequestParameters,Elasticsearch.Net.GetMappingRequestParameters})">
            <summary>Represents a GET on /_mapping/{type}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-mapping.html</para>	
            </summary>
            <param name="type">A comma-separated list of document types</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetMappingForAllAsync(System.String,System.Func{Elasticsearch.Net.GetMappingRequestParameters,Elasticsearch.Net.GetMappingRequestParameters})">
            <summary>Represents a GET on /_mapping/{type}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-mapping.html</para>	
            </summary>
            <param name="type">A comma-separated list of document types</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetMapping``1(System.String,System.String,System.Func{Elasticsearch.Net.GetMappingRequestParameters,Elasticsearch.Net.GetMappingRequestParameters})">
            <summary>Represents a GET on /{index}/_mapping/{type}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-mapping.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names</param>
            <param name="type">A comma-separated list of document types</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetMappingAsync``1(System.String,System.String,System.Func{Elasticsearch.Net.GetMappingRequestParameters,Elasticsearch.Net.GetMappingRequestParameters})">
            <summary>Represents a GET on /{index}/_mapping/{type}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-mapping.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names</param>
            <param name="type">A comma-separated list of document types</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetMapping(System.String,System.String,System.Func{Elasticsearch.Net.GetMappingRequestParameters,Elasticsearch.Net.GetMappingRequestParameters})">
            <summary>Represents a GET on /{index}/_mapping/{type}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-mapping.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names</param>
            <param name="type">A comma-separated list of document types</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetMappingAsync(System.String,System.String,System.Func{Elasticsearch.Net.GetMappingRequestParameters,Elasticsearch.Net.GetMappingRequestParameters})">
            <summary>Represents a GET on /{index}/_mapping/{type}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-mapping.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names</param>
            <param name="type">A comma-separated list of document types</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetSettingsForAll``1(System.Func{Elasticsearch.Net.GetIndexSettingsRequestParameters,Elasticsearch.Net.GetIndexSettingsRequestParameters})">
            <summary>Represents a GET on /_settings
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-mapping.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetSettingsForAllAsync``1(System.Func{Elasticsearch.Net.GetIndexSettingsRequestParameters,Elasticsearch.Net.GetIndexSettingsRequestParameters})">
            <summary>Represents a GET on /_settings
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-mapping.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetSettingsForAll(System.Func{Elasticsearch.Net.GetIndexSettingsRequestParameters,Elasticsearch.Net.GetIndexSettingsRequestParameters})">
            <summary>Represents a GET on /_settings
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-mapping.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetSettingsForAllAsync(System.Func{Elasticsearch.Net.GetIndexSettingsRequestParameters,Elasticsearch.Net.GetIndexSettingsRequestParameters})">
            <summary>Represents a GET on /_settings
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-mapping.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetSettings``1(System.String,System.Func{Elasticsearch.Net.GetIndexSettingsRequestParameters,Elasticsearch.Net.GetIndexSettingsRequestParameters})">
            <summary>Represents a GET on /{index}/_settings
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-mapping.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetSettingsAsync``1(System.String,System.Func{Elasticsearch.Net.GetIndexSettingsRequestParameters,Elasticsearch.Net.GetIndexSettingsRequestParameters})">
            <summary>Represents a GET on /{index}/_settings
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-mapping.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetSettings(System.String,System.Func{Elasticsearch.Net.GetIndexSettingsRequestParameters,Elasticsearch.Net.GetIndexSettingsRequestParameters})">
            <summary>Represents a GET on /{index}/_settings
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-mapping.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetSettingsAsync(System.String,System.Func{Elasticsearch.Net.GetIndexSettingsRequestParameters,Elasticsearch.Net.GetIndexSettingsRequestParameters})">
            <summary>Represents a GET on /{index}/_settings
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-mapping.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetSettings``1(System.String,System.String,System.Func{Elasticsearch.Net.GetIndexSettingsRequestParameters,Elasticsearch.Net.GetIndexSettingsRequestParameters})">
            <summary>Represents a GET on /{index}/_settings/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-mapping.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="name">The name of the settings that should be included</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetSettingsAsync``1(System.String,System.String,System.Func{Elasticsearch.Net.GetIndexSettingsRequestParameters,Elasticsearch.Net.GetIndexSettingsRequestParameters})">
            <summary>Represents a GET on /{index}/_settings/{name}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-mapping.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="name">The name of the settings that should be included</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetSettings(System.String,System.String,System.Func{Elasticsearch.Net.GetIndexSettingsRequestParameters,Elasticsearch.Net.GetIndexSettingsRequestParameters})">
            <summary>Represents a GET on /{index}/_settings/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-mapping.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="name">The name of the settings that should be included</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetSettingsAsync(System.String,System.String,System.Func{Elasticsearch.Net.GetIndexSettingsRequestParameters,Elasticsearch.Net.GetIndexSettingsRequestParameters})">
            <summary>Represents a GET on /{index}/_settings/{name}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-mapping.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="name">The name of the settings that should be included</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetSettingsForAll``1(System.String,System.Func{Elasticsearch.Net.GetIndexSettingsRequestParameters,Elasticsearch.Net.GetIndexSettingsRequestParameters})">
            <summary>Represents a GET on /_settings/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-mapping.html</para>	
            </summary>
            <param name="name">The name of the settings that should be included</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetSettingsForAllAsync``1(System.String,System.Func{Elasticsearch.Net.GetIndexSettingsRequestParameters,Elasticsearch.Net.GetIndexSettingsRequestParameters})">
            <summary>Represents a GET on /_settings/{name}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-mapping.html</para>	
            </summary>
            <param name="name">The name of the settings that should be included</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetSettingsForAll(System.String,System.Func{Elasticsearch.Net.GetIndexSettingsRequestParameters,Elasticsearch.Net.GetIndexSettingsRequestParameters})">
            <summary>Represents a GET on /_settings/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-mapping.html</para>	
            </summary>
            <param name="name">The name of the settings that should be included</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetSettingsForAllAsync(System.String,System.Func{Elasticsearch.Net.GetIndexSettingsRequestParameters,Elasticsearch.Net.GetIndexSettingsRequestParameters})">
            <summary>Represents a GET on /_settings/{name}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-mapping.html</para>	
            </summary>
            <param name="name">The name of the settings that should be included</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetTemplateForAll``1(System.Func{Elasticsearch.Net.GetTemplateRequestParameters,Elasticsearch.Net.GetTemplateRequestParameters})">
            <summary>Represents a GET on /_template
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-templates.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetTemplateForAllAsync``1(System.Func{Elasticsearch.Net.GetTemplateRequestParameters,Elasticsearch.Net.GetTemplateRequestParameters})">
            <summary>Represents a GET on /_template
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-templates.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetTemplateForAll(System.Func{Elasticsearch.Net.GetTemplateRequestParameters,Elasticsearch.Net.GetTemplateRequestParameters})">
            <summary>Represents a GET on /_template
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-templates.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetTemplateForAllAsync(System.Func{Elasticsearch.Net.GetTemplateRequestParameters,Elasticsearch.Net.GetTemplateRequestParameters})">
            <summary>Represents a GET on /_template
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-templates.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetTemplateForAll``1(System.String,System.Func{Elasticsearch.Net.GetTemplateRequestParameters,Elasticsearch.Net.GetTemplateRequestParameters})">
            <summary>Represents a GET on /_template/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-templates.html</para>	
            </summary>
            <param name="name">The name of the template</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetTemplateForAllAsync``1(System.String,System.Func{Elasticsearch.Net.GetTemplateRequestParameters,Elasticsearch.Net.GetTemplateRequestParameters})">
            <summary>Represents a GET on /_template/{name}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-templates.html</para>	
            </summary>
            <param name="name">The name of the template</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetTemplateForAll(System.String,System.Func{Elasticsearch.Net.GetTemplateRequestParameters,Elasticsearch.Net.GetTemplateRequestParameters})">
            <summary>Represents a GET on /_template/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-templates.html</para>	
            </summary>
            <param name="name">The name of the template</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetTemplateForAllAsync(System.String,System.Func{Elasticsearch.Net.GetTemplateRequestParameters,Elasticsearch.Net.GetTemplateRequestParameters})">
            <summary>Represents a GET on /_template/{name}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-templates.html</para>	
            </summary>
            <param name="name">The name of the template</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetWarmerForAll``1(System.Func{Elasticsearch.Net.GetWarmerRequestParameters,Elasticsearch.Net.GetWarmerRequestParameters})">
            <summary>Represents a GET on /_warmer
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetWarmerForAllAsync``1(System.Func{Elasticsearch.Net.GetWarmerRequestParameters,Elasticsearch.Net.GetWarmerRequestParameters})">
            <summary>Represents a GET on /_warmer
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetWarmerForAll(System.Func{Elasticsearch.Net.GetWarmerRequestParameters,Elasticsearch.Net.GetWarmerRequestParameters})">
            <summary>Represents a GET on /_warmer
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetWarmerForAllAsync(System.Func{Elasticsearch.Net.GetWarmerRequestParameters,Elasticsearch.Net.GetWarmerRequestParameters})">
            <summary>Represents a GET on /_warmer
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetWarmer``1(System.String,System.Func{Elasticsearch.Net.GetWarmerRequestParameters,Elasticsearch.Net.GetWarmerRequestParameters})">
            <summary>Represents a GET on /{index}/_warmer
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to restrict the operation; use `_all` to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetWarmerAsync``1(System.String,System.Func{Elasticsearch.Net.GetWarmerRequestParameters,Elasticsearch.Net.GetWarmerRequestParameters})">
            <summary>Represents a GET on /{index}/_warmer
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to restrict the operation; use `_all` to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetWarmer(System.String,System.Func{Elasticsearch.Net.GetWarmerRequestParameters,Elasticsearch.Net.GetWarmerRequestParameters})">
            <summary>Represents a GET on /{index}/_warmer
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to restrict the operation; use `_all` to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetWarmerAsync(System.String,System.Func{Elasticsearch.Net.GetWarmerRequestParameters,Elasticsearch.Net.GetWarmerRequestParameters})">
            <summary>Represents a GET on /{index}/_warmer
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to restrict the operation; use `_all` to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetWarmer``1(System.String,System.String,System.Func{Elasticsearch.Net.GetWarmerRequestParameters,Elasticsearch.Net.GetWarmerRequestParameters})">
            <summary>Represents a GET on /{index}/_warmer/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to restrict the operation; use `_all` to perform the operation on all indices</param>
            <param name="name">The name of the warmer (supports wildcards); leave empty to get all warmers</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetWarmerAsync``1(System.String,System.String,System.Func{Elasticsearch.Net.GetWarmerRequestParameters,Elasticsearch.Net.GetWarmerRequestParameters})">
            <summary>Represents a GET on /{index}/_warmer/{name}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to restrict the operation; use `_all` to perform the operation on all indices</param>
            <param name="name">The name of the warmer (supports wildcards); leave empty to get all warmers</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetWarmer(System.String,System.String,System.Func{Elasticsearch.Net.GetWarmerRequestParameters,Elasticsearch.Net.GetWarmerRequestParameters})">
            <summary>Represents a GET on /{index}/_warmer/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to restrict the operation; use `_all` to perform the operation on all indices</param>
            <param name="name">The name of the warmer (supports wildcards); leave empty to get all warmers</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetWarmerAsync(System.String,System.String,System.Func{Elasticsearch.Net.GetWarmerRequestParameters,Elasticsearch.Net.GetWarmerRequestParameters})">
            <summary>Represents a GET on /{index}/_warmer/{name}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to restrict the operation; use `_all` to perform the operation on all indices</param>
            <param name="name">The name of the warmer (supports wildcards); leave empty to get all warmers</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetWarmerForAll``1(System.String,System.Func{Elasticsearch.Net.GetWarmerRequestParameters,Elasticsearch.Net.GetWarmerRequestParameters})">
            <summary>Represents a GET on /_warmer/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="name">The name of the warmer (supports wildcards); leave empty to get all warmers</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetWarmerForAllAsync``1(System.String,System.Func{Elasticsearch.Net.GetWarmerRequestParameters,Elasticsearch.Net.GetWarmerRequestParameters})">
            <summary>Represents a GET on /_warmer/{name}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="name">The name of the warmer (supports wildcards); leave empty to get all warmers</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetWarmerForAll(System.String,System.Func{Elasticsearch.Net.GetWarmerRequestParameters,Elasticsearch.Net.GetWarmerRequestParameters})">
            <summary>Represents a GET on /_warmer/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="name">The name of the warmer (supports wildcards); leave empty to get all warmers</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetWarmerForAllAsync(System.String,System.Func{Elasticsearch.Net.GetWarmerRequestParameters,Elasticsearch.Net.GetWarmerRequestParameters})">
            <summary>Represents a GET on /_warmer/{name}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="name">The name of the warmer (supports wildcards); leave empty to get all warmers</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetWarmer``1(System.String,System.String,System.String,System.Func{Elasticsearch.Net.GetWarmerRequestParameters,Elasticsearch.Net.GetWarmerRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_warmer/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to restrict the operation; use `_all` to perform the operation on all indices</param>
            <param name="type">A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types</param>
            <param name="name">The name of the warmer (supports wildcards); leave empty to get all warmers</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetWarmerAsync``1(System.String,System.String,System.String,System.Func{Elasticsearch.Net.GetWarmerRequestParameters,Elasticsearch.Net.GetWarmerRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_warmer/{name}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to restrict the operation; use `_all` to perform the operation on all indices</param>
            <param name="type">A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types</param>
            <param name="name">The name of the warmer (supports wildcards); leave empty to get all warmers</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetWarmer(System.String,System.String,System.String,System.Func{Elasticsearch.Net.GetWarmerRequestParameters,Elasticsearch.Net.GetWarmerRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_warmer/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to restrict the operation; use `_all` to perform the operation on all indices</param>
            <param name="type">A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types</param>
            <param name="name">The name of the warmer (supports wildcards); leave empty to get all warmers</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesGetWarmerAsync(System.String,System.String,System.String,System.Func{Elasticsearch.Net.GetWarmerRequestParameters,Elasticsearch.Net.GetWarmerRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_warmer/{name}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to restrict the operation; use `_all` to perform the operation on all indices</param>
            <param name="type">A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types</param>
            <param name="name">The name of the warmer (supports wildcards); leave empty to get all warmers</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesOpen``1(System.String,System.Func{Elasticsearch.Net.OpenIndexRequestParameters,Elasticsearch.Net.OpenIndexRequestParameters})">
            <summary>Represents a POST on /{index}/_open
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-open-close.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesOpenAsync``1(System.String,System.Func{Elasticsearch.Net.OpenIndexRequestParameters,Elasticsearch.Net.OpenIndexRequestParameters})">
            <summary>Represents a POST on /{index}/_open
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-open-close.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesOpen(System.String,System.Func{Elasticsearch.Net.OpenIndexRequestParameters,Elasticsearch.Net.OpenIndexRequestParameters})">
            <summary>Represents a POST on /{index}/_open
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-open-close.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesOpenAsync(System.String,System.Func{Elasticsearch.Net.OpenIndexRequestParameters,Elasticsearch.Net.OpenIndexRequestParameters})">
            <summary>Represents a POST on /{index}/_open
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-open-close.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesOptimizeForAll``1(System.Func{Elasticsearch.Net.OptimizeRequestParameters,Elasticsearch.Net.OptimizeRequestParameters})">
            <summary>Represents a POST on /_optimize
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-optimize.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesOptimizeForAllAsync``1(System.Func{Elasticsearch.Net.OptimizeRequestParameters,Elasticsearch.Net.OptimizeRequestParameters})">
            <summary>Represents a POST on /_optimize
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-optimize.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesOptimizeForAll(System.Func{Elasticsearch.Net.OptimizeRequestParameters,Elasticsearch.Net.OptimizeRequestParameters})">
            <summary>Represents a POST on /_optimize
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-optimize.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesOptimizeForAllAsync(System.Func{Elasticsearch.Net.OptimizeRequestParameters,Elasticsearch.Net.OptimizeRequestParameters})">
            <summary>Represents a POST on /_optimize
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-optimize.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesOptimize``1(System.String,System.Func{Elasticsearch.Net.OptimizeRequestParameters,Elasticsearch.Net.OptimizeRequestParameters})">
            <summary>Represents a POST on /{index}/_optimize
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-optimize.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesOptimizeAsync``1(System.String,System.Func{Elasticsearch.Net.OptimizeRequestParameters,Elasticsearch.Net.OptimizeRequestParameters})">
            <summary>Represents a POST on /{index}/_optimize
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-optimize.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesOptimize(System.String,System.Func{Elasticsearch.Net.OptimizeRequestParameters,Elasticsearch.Net.OptimizeRequestParameters})">
            <summary>Represents a POST on /{index}/_optimize
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-optimize.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesOptimizeAsync(System.String,System.Func{Elasticsearch.Net.OptimizeRequestParameters,Elasticsearch.Net.OptimizeRequestParameters})">
            <summary>Represents a POST on /{index}/_optimize
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-optimize.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesOptimizeGetForAll``1(System.Func{Elasticsearch.Net.OptimizeRequestParameters,Elasticsearch.Net.OptimizeRequestParameters})">
            <summary>Represents a GET on /_optimize
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-optimize.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesOptimizeGetForAllAsync``1(System.Func{Elasticsearch.Net.OptimizeRequestParameters,Elasticsearch.Net.OptimizeRequestParameters})">
            <summary>Represents a GET on /_optimize
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-optimize.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesOptimizeGetForAll(System.Func{Elasticsearch.Net.OptimizeRequestParameters,Elasticsearch.Net.OptimizeRequestParameters})">
            <summary>Represents a GET on /_optimize
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-optimize.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesOptimizeGetForAllAsync(System.Func{Elasticsearch.Net.OptimizeRequestParameters,Elasticsearch.Net.OptimizeRequestParameters})">
            <summary>Represents a GET on /_optimize
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-optimize.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesOptimizeGet``1(System.String,System.Func{Elasticsearch.Net.OptimizeRequestParameters,Elasticsearch.Net.OptimizeRequestParameters})">
            <summary>Represents a GET on /{index}/_optimize
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-optimize.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesOptimizeGetAsync``1(System.String,System.Func{Elasticsearch.Net.OptimizeRequestParameters,Elasticsearch.Net.OptimizeRequestParameters})">
            <summary>Represents a GET on /{index}/_optimize
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-optimize.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesOptimizeGet(System.String,System.Func{Elasticsearch.Net.OptimizeRequestParameters,Elasticsearch.Net.OptimizeRequestParameters})">
            <summary>Represents a GET on /{index}/_optimize
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-optimize.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesOptimizeGetAsync(System.String,System.Func{Elasticsearch.Net.OptimizeRequestParameters,Elasticsearch.Net.OptimizeRequestParameters})">
            <summary>Represents a GET on /{index}/_optimize
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-optimize.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesPutAlias``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.IndicesPutAliasRequestParameters,Elasticsearch.Net.IndicesPutAliasRequestParameters})">
            <summary>Represents a PUT on /{index}/_alias/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names the alias should point to (supports wildcards); use `_all` or omit to perform the operation on all indices.</param>
            <param name="name">The name of the alias to be created or updated</param>
            <param name="body">The settings for the alias, such as `routing` or `filter`</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesPutAliasAsync``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.IndicesPutAliasRequestParameters,Elasticsearch.Net.IndicesPutAliasRequestParameters})">
            <summary>Represents a PUT on /{index}/_alias/{name}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names the alias should point to (supports wildcards); use `_all` or omit to perform the operation on all indices.</param>
            <param name="name">The name of the alias to be created or updated</param>
            <param name="body">The settings for the alias, such as `routing` or `filter`</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesPutAlias(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.IndicesPutAliasRequestParameters,Elasticsearch.Net.IndicesPutAliasRequestParameters})">
            <summary>Represents a PUT on /{index}/_alias/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names the alias should point to (supports wildcards); use `_all` or omit to perform the operation on all indices.</param>
            <param name="name">The name of the alias to be created or updated</param>
            <param name="body">The settings for the alias, such as `routing` or `filter`</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesPutAliasAsync(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.IndicesPutAliasRequestParameters,Elasticsearch.Net.IndicesPutAliasRequestParameters})">
            <summary>Represents a PUT on /{index}/_alias/{name}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names the alias should point to (supports wildcards); use `_all` or omit to perform the operation on all indices.</param>
            <param name="name">The name of the alias to be created or updated</param>
            <param name="body">The settings for the alias, such as `routing` or `filter`</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesPutAliasForAll``1(System.String,System.Object,System.Func{Elasticsearch.Net.IndicesPutAliasRequestParameters,Elasticsearch.Net.IndicesPutAliasRequestParameters})">
            <summary>Represents a PUT on /_alias/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="name">The name of the alias to be created or updated</param>
            <param name="body">The settings for the alias, such as `routing` or `filter`</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesPutAliasForAllAsync``1(System.String,System.Object,System.Func{Elasticsearch.Net.IndicesPutAliasRequestParameters,Elasticsearch.Net.IndicesPutAliasRequestParameters})">
            <summary>Represents a PUT on /_alias/{name}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="name">The name of the alias to be created or updated</param>
            <param name="body">The settings for the alias, such as `routing` or `filter`</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesPutAliasForAll(System.String,System.Object,System.Func{Elasticsearch.Net.IndicesPutAliasRequestParameters,Elasticsearch.Net.IndicesPutAliasRequestParameters})">
            <summary>Represents a PUT on /_alias/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="name">The name of the alias to be created or updated</param>
            <param name="body">The settings for the alias, such as `routing` or `filter`</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesPutAliasForAllAsync(System.String,System.Object,System.Func{Elasticsearch.Net.IndicesPutAliasRequestParameters,Elasticsearch.Net.IndicesPutAliasRequestParameters})">
            <summary>Represents a PUT on /_alias/{name}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="name">The name of the alias to be created or updated</param>
            <param name="body">The settings for the alias, such as `routing` or `filter`</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesPutAliasPost``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.IndicesPutAliasRequestParameters,Elasticsearch.Net.IndicesPutAliasRequestParameters})">
            <summary>Represents a POST on /{index}/_alias/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names the alias should point to (supports wildcards); use `_all` or omit to perform the operation on all indices.</param>
            <param name="name">The name of the alias to be created or updated</param>
            <param name="body">The settings for the alias, such as `routing` or `filter`</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesPutAliasPostAsync``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.IndicesPutAliasRequestParameters,Elasticsearch.Net.IndicesPutAliasRequestParameters})">
            <summary>Represents a POST on /{index}/_alias/{name}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names the alias should point to (supports wildcards); use `_all` or omit to perform the operation on all indices.</param>
            <param name="name">The name of the alias to be created or updated</param>
            <param name="body">The settings for the alias, such as `routing` or `filter`</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesPutAliasPost(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.IndicesPutAliasRequestParameters,Elasticsearch.Net.IndicesPutAliasRequestParameters})">
            <summary>Represents a POST on /{index}/_alias/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names the alias should point to (supports wildcards); use `_all` or omit to perform the operation on all indices.</param>
            <param name="name">The name of the alias to be created or updated</param>
            <param name="body">The settings for the alias, such as `routing` or `filter`</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesPutAliasPostAsync(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.IndicesPutAliasRequestParameters,Elasticsearch.Net.IndicesPutAliasRequestParameters})">
            <summary>Represents a POST on /{index}/_alias/{name}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names the alias should point to (supports wildcards); use `_all` or omit to perform the operation on all indices.</param>
            <param name="name">The name of the alias to be created or updated</param>
            <param name="body">The settings for the alias, such as `routing` or `filter`</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesPutAliasPostForAll``1(System.String,System.Object,System.Func{Elasticsearch.Net.IndicesPutAliasRequestParameters,Elasticsearch.Net.IndicesPutAliasRequestParameters})">
            <summary>Represents a POST on /_alias/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="name">The name of the alias to be created or updated</param>
            <param name="body">The settings for the alias, such as `routing` or `filter`</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesPutAliasPostForAllAsync``1(System.String,System.Object,System.Func{Elasticsearch.Net.IndicesPutAliasRequestParameters,Elasticsearch.Net.IndicesPutAliasRequestParameters})">
            <summary>Represents a POST on /_alias/{name}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="name">The name of the alias to be created or updated</param>
            <param name="body">The settings for the alias, such as `routing` or `filter`</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesPutAliasPostForAll(System.String,System.Object,System.Func{Elasticsearch.Net.IndicesPutAliasRequestParameters,Elasticsearch.Net.IndicesPutAliasRequestParameters})">
            <summary>Represents a POST on /_alias/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="name">The name of the alias to be created or updated</param>
            <param name="body">The settings for the alias, such as `routing` or `filter`</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesPutAliasPostForAllAsync(System.String,System.Object,System.Func{Elasticsearch.Net.IndicesPutAliasRequestParameters,Elasticsearch.Net.IndicesPutAliasRequestParameters})">
            <summary>Represents a POST on /_alias/{name}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="name">The name of the alias to be created or updated</param>
            <param name="body">The settings for the alias, such as `routing` or `filter`</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesPutMapping``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.PutMappingRequestParameters,Elasticsearch.Net.PutMappingRequestParameters})">
            <summary>Represents a PUT on /{index}/{type}/_mapping
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-put-mapping.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names the mapping should be added to (supports wildcards); use `_all` or omit to add the mapping on all indices.</param>
            <param name="type">The name of the document type</param>
            <param name="body">The mapping definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesPutMappingAsync``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.PutMappingRequestParameters,Elasticsearch.Net.PutMappingRequestParameters})">
            <summary>Represents a PUT on /{index}/{type}/_mapping
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-put-mapping.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names the mapping should be added to (supports wildcards); use `_all` or omit to add the mapping on all indices.</param>
            <param name="type">The name of the document type</param>
            <param name="body">The mapping definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesPutMapping(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.PutMappingRequestParameters,Elasticsearch.Net.PutMappingRequestParameters})">
            <summary>Represents a PUT on /{index}/{type}/_mapping
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-put-mapping.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names the mapping should be added to (supports wildcards); use `_all` or omit to add the mapping on all indices.</param>
            <param name="type">The name of the document type</param>
            <param name="body">The mapping definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesPutMappingAsync(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.PutMappingRequestParameters,Elasticsearch.Net.PutMappingRequestParameters})">
            <summary>Represents a PUT on /{index}/{type}/_mapping
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-put-mapping.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names the mapping should be added to (supports wildcards); use `_all` or omit to add the mapping on all indices.</param>
            <param name="type">The name of the document type</param>
            <param name="body">The mapping definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesPutMappingForAll``1(System.String,System.Object,System.Func{Elasticsearch.Net.PutMappingRequestParameters,Elasticsearch.Net.PutMappingRequestParameters})">
            <summary>Represents a PUT on /_mapping/{type}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-put-mapping.html</para>	
            </summary>
            <param name="type">The name of the document type</param>
            <param name="body">The mapping definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesPutMappingForAllAsync``1(System.String,System.Object,System.Func{Elasticsearch.Net.PutMappingRequestParameters,Elasticsearch.Net.PutMappingRequestParameters})">
            <summary>Represents a PUT on /_mapping/{type}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-put-mapping.html</para>	
            </summary>
            <param name="type">The name of the document type</param>
            <param name="body">The mapping definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesPutMappingForAll(System.String,System.Object,System.Func{Elasticsearch.Net.PutMappingRequestParameters,Elasticsearch.Net.PutMappingRequestParameters})">
            <summary>Represents a PUT on /_mapping/{type}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-put-mapping.html</para>	
            </summary>
            <param name="type">The name of the document type</param>
            <param name="body">The mapping definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesPutMappingForAllAsync(System.String,System.Object,System.Func{Elasticsearch.Net.PutMappingRequestParameters,Elasticsearch.Net.PutMappingRequestParameters})">
            <summary>Represents a PUT on /_mapping/{type}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-put-mapping.html</para>	
            </summary>
            <param name="type">The name of the document type</param>
            <param name="body">The mapping definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesPutMappingPost``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.PutMappingRequestParameters,Elasticsearch.Net.PutMappingRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_mapping
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-put-mapping.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names the mapping should be added to (supports wildcards); use `_all` or omit to add the mapping on all indices.</param>
            <param name="type">The name of the document type</param>
            <param name="body">The mapping definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesPutMappingPostAsync``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.PutMappingRequestParameters,Elasticsearch.Net.PutMappingRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_mapping
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-put-mapping.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names the mapping should be added to (supports wildcards); use `_all` or omit to add the mapping on all indices.</param>
            <param name="type">The name of the document type</param>
            <param name="body">The mapping definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesPutMappingPost(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.PutMappingRequestParameters,Elasticsearch.Net.PutMappingRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_mapping
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-put-mapping.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names the mapping should be added to (supports wildcards); use `_all` or omit to add the mapping on all indices.</param>
            <param name="type">The name of the document type</param>
            <param name="body">The mapping definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesPutMappingPostAsync(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.PutMappingRequestParameters,Elasticsearch.Net.PutMappingRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_mapping
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-put-mapping.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names the mapping should be added to (supports wildcards); use `_all` or omit to add the mapping on all indices.</param>
            <param name="type">The name of the document type</param>
            <param name="body">The mapping definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesPutMappingPostForAll``1(System.String,System.Object,System.Func{Elasticsearch.Net.PutMappingRequestParameters,Elasticsearch.Net.PutMappingRequestParameters})">
            <summary>Represents a POST on /_mapping/{type}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-put-mapping.html</para>	
            </summary>
            <param name="type">The name of the document type</param>
            <param name="body">The mapping definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesPutMappingPostForAllAsync``1(System.String,System.Object,System.Func{Elasticsearch.Net.PutMappingRequestParameters,Elasticsearch.Net.PutMappingRequestParameters})">
            <summary>Represents a POST on /_mapping/{type}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-put-mapping.html</para>	
            </summary>
            <param name="type">The name of the document type</param>
            <param name="body">The mapping definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesPutMappingPostForAll(System.String,System.Object,System.Func{Elasticsearch.Net.PutMappingRequestParameters,Elasticsearch.Net.PutMappingRequestParameters})">
            <summary>Represents a POST on /_mapping/{type}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-put-mapping.html</para>	
            </summary>
            <param name="type">The name of the document type</param>
            <param name="body">The mapping definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesPutMappingPostForAllAsync(System.String,System.Object,System.Func{Elasticsearch.Net.PutMappingRequestParameters,Elasticsearch.Net.PutMappingRequestParameters})">
            <summary>Represents a POST on /_mapping/{type}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-put-mapping.html</para>	
            </summary>
            <param name="type">The name of the document type</param>
            <param name="body">The mapping definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesPutSettingsForAll``1(System.Object,System.Func{Elasticsearch.Net.UpdateSettingsRequestParameters,Elasticsearch.Net.UpdateSettingsRequestParameters})">
            <summary>Represents a PUT on /_settings
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-update-settings.html</para>	
            </summary>
            <param name="body">The index settings to be updated</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesPutSettingsForAllAsync``1(System.Object,System.Func{Elasticsearch.Net.UpdateSettingsRequestParameters,Elasticsearch.Net.UpdateSettingsRequestParameters})">
            <summary>Represents a PUT on /_settings
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-update-settings.html</para>	
            </summary>
            <param name="body">The index settings to be updated</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesPutSettingsForAll(System.Object,System.Func{Elasticsearch.Net.UpdateSettingsRequestParameters,Elasticsearch.Net.UpdateSettingsRequestParameters})">
            <summary>Represents a PUT on /_settings
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-update-settings.html</para>	
            </summary>
            <param name="body">The index settings to be updated</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesPutSettingsForAllAsync(System.Object,System.Func{Elasticsearch.Net.UpdateSettingsRequestParameters,Elasticsearch.Net.UpdateSettingsRequestParameters})">
            <summary>Represents a PUT on /_settings
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-update-settings.html</para>	
            </summary>
            <param name="body">The index settings to be updated</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesPutSettings``1(System.String,System.Object,System.Func{Elasticsearch.Net.UpdateSettingsRequestParameters,Elasticsearch.Net.UpdateSettingsRequestParameters})">
            <summary>Represents a PUT on /{index}/_settings
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-update-settings.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="body">The index settings to be updated</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesPutSettingsAsync``1(System.String,System.Object,System.Func{Elasticsearch.Net.UpdateSettingsRequestParameters,Elasticsearch.Net.UpdateSettingsRequestParameters})">
            <summary>Represents a PUT on /{index}/_settings
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-update-settings.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="body">The index settings to be updated</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesPutSettings(System.String,System.Object,System.Func{Elasticsearch.Net.UpdateSettingsRequestParameters,Elasticsearch.Net.UpdateSettingsRequestParameters})">
            <summary>Represents a PUT on /{index}/_settings
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-update-settings.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="body">The index settings to be updated</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesPutSettingsAsync(System.String,System.Object,System.Func{Elasticsearch.Net.UpdateSettingsRequestParameters,Elasticsearch.Net.UpdateSettingsRequestParameters})">
            <summary>Represents a PUT on /{index}/_settings
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-update-settings.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="body">The index settings to be updated</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesPutTemplateForAll``1(System.String,System.Object,System.Func{Elasticsearch.Net.PutTemplateRequestParameters,Elasticsearch.Net.PutTemplateRequestParameters})">
            <summary>Represents a PUT on /_template/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-templates.html</para>	
            </summary>
            <param name="name">The name of the template</param>
            <param name="body">The template definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesPutTemplateForAllAsync``1(System.String,System.Object,System.Func{Elasticsearch.Net.PutTemplateRequestParameters,Elasticsearch.Net.PutTemplateRequestParameters})">
            <summary>Represents a PUT on /_template/{name}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-templates.html</para>	
            </summary>
            <param name="name">The name of the template</param>
            <param name="body">The template definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesPutTemplateForAll(System.String,System.Object,System.Func{Elasticsearch.Net.PutTemplateRequestParameters,Elasticsearch.Net.PutTemplateRequestParameters})">
            <summary>Represents a PUT on /_template/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-templates.html</para>	
            </summary>
            <param name="name">The name of the template</param>
            <param name="body">The template definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesPutTemplateForAllAsync(System.String,System.Object,System.Func{Elasticsearch.Net.PutTemplateRequestParameters,Elasticsearch.Net.PutTemplateRequestParameters})">
            <summary>Represents a PUT on /_template/{name}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-templates.html</para>	
            </summary>
            <param name="name">The name of the template</param>
            <param name="body">The template definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesPutTemplatePostForAll``1(System.String,System.Object,System.Func{Elasticsearch.Net.PutTemplateRequestParameters,Elasticsearch.Net.PutTemplateRequestParameters})">
            <summary>Represents a POST on /_template/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-templates.html</para>	
            </summary>
            <param name="name">The name of the template</param>
            <param name="body">The template definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesPutTemplatePostForAllAsync``1(System.String,System.Object,System.Func{Elasticsearch.Net.PutTemplateRequestParameters,Elasticsearch.Net.PutTemplateRequestParameters})">
            <summary>Represents a POST on /_template/{name}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-templates.html</para>	
            </summary>
            <param name="name">The name of the template</param>
            <param name="body">The template definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesPutTemplatePostForAll(System.String,System.Object,System.Func{Elasticsearch.Net.PutTemplateRequestParameters,Elasticsearch.Net.PutTemplateRequestParameters})">
            <summary>Represents a POST on /_template/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-templates.html</para>	
            </summary>
            <param name="name">The name of the template</param>
            <param name="body">The template definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesPutTemplatePostForAllAsync(System.String,System.Object,System.Func{Elasticsearch.Net.PutTemplateRequestParameters,Elasticsearch.Net.PutTemplateRequestParameters})">
            <summary>Represents a POST on /_template/{name}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-templates.html</para>	
            </summary>
            <param name="name">The name of the template</param>
            <param name="body">The template definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesPutWarmerForAll``1(System.String,System.Object,System.Func{Elasticsearch.Net.PutWarmerRequestParameters,Elasticsearch.Net.PutWarmerRequestParameters})">
            <summary>Represents a PUT on /_warmer/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="name">The name of the warmer</param>
            <param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesPutWarmerForAllAsync``1(System.String,System.Object,System.Func{Elasticsearch.Net.PutWarmerRequestParameters,Elasticsearch.Net.PutWarmerRequestParameters})">
            <summary>Represents a PUT on /_warmer/{name}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="name">The name of the warmer</param>
            <param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesPutWarmerForAll(System.String,System.Object,System.Func{Elasticsearch.Net.PutWarmerRequestParameters,Elasticsearch.Net.PutWarmerRequestParameters})">
            <summary>Represents a PUT on /_warmer/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="name">The name of the warmer</param>
            <param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesPutWarmerForAllAsync(System.String,System.Object,System.Func{Elasticsearch.Net.PutWarmerRequestParameters,Elasticsearch.Net.PutWarmerRequestParameters})">
            <summary>Represents a PUT on /_warmer/{name}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="name">The name of the warmer</param>
            <param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesPutWarmer``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.PutWarmerRequestParameters,Elasticsearch.Net.PutWarmerRequestParameters})">
            <summary>Represents a PUT on /{index}/_warmer/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to register the warmer for; use `_all` or omit to perform the operation on all indices</param>
            <param name="name">The name of the warmer</param>
            <param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesPutWarmerAsync``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.PutWarmerRequestParameters,Elasticsearch.Net.PutWarmerRequestParameters})">
            <summary>Represents a PUT on /{index}/_warmer/{name}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to register the warmer for; use `_all` or omit to perform the operation on all indices</param>
            <param name="name">The name of the warmer</param>
            <param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesPutWarmer(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.PutWarmerRequestParameters,Elasticsearch.Net.PutWarmerRequestParameters})">
            <summary>Represents a PUT on /{index}/_warmer/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to register the warmer for; use `_all` or omit to perform the operation on all indices</param>
            <param name="name">The name of the warmer</param>
            <param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesPutWarmerAsync(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.PutWarmerRequestParameters,Elasticsearch.Net.PutWarmerRequestParameters})">
            <summary>Represents a PUT on /{index}/_warmer/{name}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to register the warmer for; use `_all` or omit to perform the operation on all indices</param>
            <param name="name">The name of the warmer</param>
            <param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesPutWarmer``1(System.String,System.String,System.String,System.Object,System.Func{Elasticsearch.Net.PutWarmerRequestParameters,Elasticsearch.Net.PutWarmerRequestParameters})">
            <summary>Represents a PUT on /{index}/{type}/_warmer/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to register the warmer for; use `_all` or omit to perform the operation on all indices</param>
            <param name="type">A comma-separated list of document types to register the warmer for; leave empty to perform the operation on all types</param>
            <param name="name">The name of the warmer</param>
            <param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesPutWarmerAsync``1(System.String,System.String,System.String,System.Object,System.Func{Elasticsearch.Net.PutWarmerRequestParameters,Elasticsearch.Net.PutWarmerRequestParameters})">
            <summary>Represents a PUT on /{index}/{type}/_warmer/{name}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to register the warmer for; use `_all` or omit to perform the operation on all indices</param>
            <param name="type">A comma-separated list of document types to register the warmer for; leave empty to perform the operation on all types</param>
            <param name="name">The name of the warmer</param>
            <param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesPutWarmer(System.String,System.String,System.String,System.Object,System.Func{Elasticsearch.Net.PutWarmerRequestParameters,Elasticsearch.Net.PutWarmerRequestParameters})">
            <summary>Represents a PUT on /{index}/{type}/_warmer/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to register the warmer for; use `_all` or omit to perform the operation on all indices</param>
            <param name="type">A comma-separated list of document types to register the warmer for; leave empty to perform the operation on all types</param>
            <param name="name">The name of the warmer</param>
            <param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesPutWarmerAsync(System.String,System.String,System.String,System.Object,System.Func{Elasticsearch.Net.PutWarmerRequestParameters,Elasticsearch.Net.PutWarmerRequestParameters})">
            <summary>Represents a PUT on /{index}/{type}/_warmer/{name}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to register the warmer for; use `_all` or omit to perform the operation on all indices</param>
            <param name="type">A comma-separated list of document types to register the warmer for; leave empty to perform the operation on all types</param>
            <param name="name">The name of the warmer</param>
            <param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesPutWarmerPostForAll``1(System.String,System.Object,System.Func{Elasticsearch.Net.PutWarmerRequestParameters,Elasticsearch.Net.PutWarmerRequestParameters})">
            <summary>Represents a POST on /_warmer/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="name">The name of the warmer</param>
            <param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesPutWarmerPostForAllAsync``1(System.String,System.Object,System.Func{Elasticsearch.Net.PutWarmerRequestParameters,Elasticsearch.Net.PutWarmerRequestParameters})">
            <summary>Represents a POST on /_warmer/{name}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="name">The name of the warmer</param>
            <param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesPutWarmerPostForAll(System.String,System.Object,System.Func{Elasticsearch.Net.PutWarmerRequestParameters,Elasticsearch.Net.PutWarmerRequestParameters})">
            <summary>Represents a POST on /_warmer/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="name">The name of the warmer</param>
            <param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesPutWarmerPostForAllAsync(System.String,System.Object,System.Func{Elasticsearch.Net.PutWarmerRequestParameters,Elasticsearch.Net.PutWarmerRequestParameters})">
            <summary>Represents a POST on /_warmer/{name}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="name">The name of the warmer</param>
            <param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesPutWarmerPost``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.PutWarmerRequestParameters,Elasticsearch.Net.PutWarmerRequestParameters})">
            <summary>Represents a POST on /{index}/_warmer/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to register the warmer for; use `_all` or omit to perform the operation on all indices</param>
            <param name="name">The name of the warmer</param>
            <param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesPutWarmerPostAsync``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.PutWarmerRequestParameters,Elasticsearch.Net.PutWarmerRequestParameters})">
            <summary>Represents a POST on /{index}/_warmer/{name}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to register the warmer for; use `_all` or omit to perform the operation on all indices</param>
            <param name="name">The name of the warmer</param>
            <param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesPutWarmerPost(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.PutWarmerRequestParameters,Elasticsearch.Net.PutWarmerRequestParameters})">
            <summary>Represents a POST on /{index}/_warmer/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to register the warmer for; use `_all` or omit to perform the operation on all indices</param>
            <param name="name">The name of the warmer</param>
            <param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesPutWarmerPostAsync(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.PutWarmerRequestParameters,Elasticsearch.Net.PutWarmerRequestParameters})">
            <summary>Represents a POST on /{index}/_warmer/{name}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to register the warmer for; use `_all` or omit to perform the operation on all indices</param>
            <param name="name">The name of the warmer</param>
            <param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesPutWarmerPost``1(System.String,System.String,System.String,System.Object,System.Func{Elasticsearch.Net.PutWarmerRequestParameters,Elasticsearch.Net.PutWarmerRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_warmer/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to register the warmer for; use `_all` or omit to perform the operation on all indices</param>
            <param name="type">A comma-separated list of document types to register the warmer for; leave empty to perform the operation on all types</param>
            <param name="name">The name of the warmer</param>
            <param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesPutWarmerPostAsync``1(System.String,System.String,System.String,System.Object,System.Func{Elasticsearch.Net.PutWarmerRequestParameters,Elasticsearch.Net.PutWarmerRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_warmer/{name}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to register the warmer for; use `_all` or omit to perform the operation on all indices</param>
            <param name="type">A comma-separated list of document types to register the warmer for; leave empty to perform the operation on all types</param>
            <param name="name">The name of the warmer</param>
            <param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesPutWarmerPost(System.String,System.String,System.String,System.Object,System.Func{Elasticsearch.Net.PutWarmerRequestParameters,Elasticsearch.Net.PutWarmerRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_warmer/{name}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to register the warmer for; use `_all` or omit to perform the operation on all indices</param>
            <param name="type">A comma-separated list of document types to register the warmer for; leave empty to perform the operation on all types</param>
            <param name="name">The name of the warmer</param>
            <param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesPutWarmerPostAsync(System.String,System.String,System.String,System.Object,System.Func{Elasticsearch.Net.PutWarmerRequestParameters,Elasticsearch.Net.PutWarmerRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_warmer/{name}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to register the warmer for; use `_all` or omit to perform the operation on all indices</param>
            <param name="type">A comma-separated list of document types to register the warmer for; leave empty to perform the operation on all types</param>
            <param name="name">The name of the warmer</param>
            <param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesRecoveryForAll``1(System.Func{Elasticsearch.Net.IndicesRecoveryRequestParameters,Elasticsearch.Net.IndicesRecoveryRequestParameters})">
            <summary>Represents a GET on /_recovery
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/indices-recovery.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesRecoveryForAllAsync``1(System.Func{Elasticsearch.Net.IndicesRecoveryRequestParameters,Elasticsearch.Net.IndicesRecoveryRequestParameters})">
            <summary>Represents a GET on /_recovery
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/indices-recovery.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesRecoveryForAll(System.Func{Elasticsearch.Net.IndicesRecoveryRequestParameters,Elasticsearch.Net.IndicesRecoveryRequestParameters})">
            <summary>Represents a GET on /_recovery
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/indices-recovery.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesRecoveryForAllAsync(System.Func{Elasticsearch.Net.IndicesRecoveryRequestParameters,Elasticsearch.Net.IndicesRecoveryRequestParameters})">
            <summary>Represents a GET on /_recovery
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/indices-recovery.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesRecovery``1(System.String,System.Func{Elasticsearch.Net.IndicesRecoveryRequestParameters,Elasticsearch.Net.IndicesRecoveryRequestParameters})">
            <summary>Represents a GET on /{index}/_recovery
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/indices-recovery.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesRecoveryAsync``1(System.String,System.Func{Elasticsearch.Net.IndicesRecoveryRequestParameters,Elasticsearch.Net.IndicesRecoveryRequestParameters})">
            <summary>Represents a GET on /{index}/_recovery
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/indices-recovery.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesRecovery(System.String,System.Func{Elasticsearch.Net.IndicesRecoveryRequestParameters,Elasticsearch.Net.IndicesRecoveryRequestParameters})">
            <summary>Represents a GET on /{index}/_recovery
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/indices-recovery.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesRecoveryAsync(System.String,System.Func{Elasticsearch.Net.IndicesRecoveryRequestParameters,Elasticsearch.Net.IndicesRecoveryRequestParameters})">
            <summary>Represents a GET on /{index}/_recovery
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/indices-recovery.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesRefreshForAll``1(System.Func{Elasticsearch.Net.RefreshRequestParameters,Elasticsearch.Net.RefreshRequestParameters})">
            <summary>Represents a POST on /_refresh
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-refresh.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesRefreshForAllAsync``1(System.Func{Elasticsearch.Net.RefreshRequestParameters,Elasticsearch.Net.RefreshRequestParameters})">
            <summary>Represents a POST on /_refresh
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-refresh.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesRefreshForAll(System.Func{Elasticsearch.Net.RefreshRequestParameters,Elasticsearch.Net.RefreshRequestParameters})">
            <summary>Represents a POST on /_refresh
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-refresh.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesRefreshForAllAsync(System.Func{Elasticsearch.Net.RefreshRequestParameters,Elasticsearch.Net.RefreshRequestParameters})">
            <summary>Represents a POST on /_refresh
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-refresh.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesRefresh``1(System.String,System.Func{Elasticsearch.Net.RefreshRequestParameters,Elasticsearch.Net.RefreshRequestParameters})">
            <summary>Represents a POST on /{index}/_refresh
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-refresh.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesRefreshAsync``1(System.String,System.Func{Elasticsearch.Net.RefreshRequestParameters,Elasticsearch.Net.RefreshRequestParameters})">
            <summary>Represents a POST on /{index}/_refresh
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-refresh.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesRefresh(System.String,System.Func{Elasticsearch.Net.RefreshRequestParameters,Elasticsearch.Net.RefreshRequestParameters})">
            <summary>Represents a POST on /{index}/_refresh
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-refresh.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesRefreshAsync(System.String,System.Func{Elasticsearch.Net.RefreshRequestParameters,Elasticsearch.Net.RefreshRequestParameters})">
            <summary>Represents a POST on /{index}/_refresh
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-refresh.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesRefreshGetForAll``1(System.Func{Elasticsearch.Net.RefreshRequestParameters,Elasticsearch.Net.RefreshRequestParameters})">
            <summary>Represents a GET on /_refresh
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-refresh.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesRefreshGetForAllAsync``1(System.Func{Elasticsearch.Net.RefreshRequestParameters,Elasticsearch.Net.RefreshRequestParameters})">
            <summary>Represents a GET on /_refresh
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-refresh.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesRefreshGetForAll(System.Func{Elasticsearch.Net.RefreshRequestParameters,Elasticsearch.Net.RefreshRequestParameters})">
            <summary>Represents a GET on /_refresh
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-refresh.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesRefreshGetForAllAsync(System.Func{Elasticsearch.Net.RefreshRequestParameters,Elasticsearch.Net.RefreshRequestParameters})">
            <summary>Represents a GET on /_refresh
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-refresh.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesRefreshGet``1(System.String,System.Func{Elasticsearch.Net.RefreshRequestParameters,Elasticsearch.Net.RefreshRequestParameters})">
            <summary>Represents a GET on /{index}/_refresh
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-refresh.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesRefreshGetAsync``1(System.String,System.Func{Elasticsearch.Net.RefreshRequestParameters,Elasticsearch.Net.RefreshRequestParameters})">
            <summary>Represents a GET on /{index}/_refresh
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-refresh.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesRefreshGet(System.String,System.Func{Elasticsearch.Net.RefreshRequestParameters,Elasticsearch.Net.RefreshRequestParameters})">
            <summary>Represents a GET on /{index}/_refresh
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-refresh.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesRefreshGetAsync(System.String,System.Func{Elasticsearch.Net.RefreshRequestParameters,Elasticsearch.Net.RefreshRequestParameters})">
            <summary>Represents a GET on /{index}/_refresh
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-refresh.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesSegmentsForAll``1(System.Func{Elasticsearch.Net.SegmentsRequestParameters,Elasticsearch.Net.SegmentsRequestParameters})">
            <summary>Represents a GET on /_segments
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-segments.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesSegmentsForAllAsync``1(System.Func{Elasticsearch.Net.SegmentsRequestParameters,Elasticsearch.Net.SegmentsRequestParameters})">
            <summary>Represents a GET on /_segments
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-segments.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesSegmentsForAll(System.Func{Elasticsearch.Net.SegmentsRequestParameters,Elasticsearch.Net.SegmentsRequestParameters})">
            <summary>Represents a GET on /_segments
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-segments.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesSegmentsForAllAsync(System.Func{Elasticsearch.Net.SegmentsRequestParameters,Elasticsearch.Net.SegmentsRequestParameters})">
            <summary>Represents a GET on /_segments
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-segments.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesSegments``1(System.String,System.Func{Elasticsearch.Net.SegmentsRequestParameters,Elasticsearch.Net.SegmentsRequestParameters})">
            <summary>Represents a GET on /{index}/_segments
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-segments.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesSegmentsAsync``1(System.String,System.Func{Elasticsearch.Net.SegmentsRequestParameters,Elasticsearch.Net.SegmentsRequestParameters})">
            <summary>Represents a GET on /{index}/_segments
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-segments.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesSegments(System.String,System.Func{Elasticsearch.Net.SegmentsRequestParameters,Elasticsearch.Net.SegmentsRequestParameters})">
            <summary>Represents a GET on /{index}/_segments
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-segments.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesSegmentsAsync(System.String,System.Func{Elasticsearch.Net.SegmentsRequestParameters,Elasticsearch.Net.SegmentsRequestParameters})">
            <summary>Represents a GET on /{index}/_segments
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-segments.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesStatsForAll``1(System.Func{Elasticsearch.Net.IndicesStatsRequestParameters,Elasticsearch.Net.IndicesStatsRequestParameters})">
            <summary>Represents a GET on /_stats
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-stats.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesStatsForAllAsync``1(System.Func{Elasticsearch.Net.IndicesStatsRequestParameters,Elasticsearch.Net.IndicesStatsRequestParameters})">
            <summary>Represents a GET on /_stats
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-stats.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesStatsForAll(System.Func{Elasticsearch.Net.IndicesStatsRequestParameters,Elasticsearch.Net.IndicesStatsRequestParameters})">
            <summary>Represents a GET on /_stats
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-stats.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesStatsForAllAsync(System.Func{Elasticsearch.Net.IndicesStatsRequestParameters,Elasticsearch.Net.IndicesStatsRequestParameters})">
            <summary>Represents a GET on /_stats
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-stats.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesStatsForAll``1(System.String,System.Func{Elasticsearch.Net.IndicesStatsRequestParameters,Elasticsearch.Net.IndicesStatsRequestParameters})">
            <summary>Represents a GET on /_stats/{metric}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-stats.html</para>	
            </summary>
            <param name="metric">Limit the information returned the specific metrics.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesStatsForAllAsync``1(System.String,System.Func{Elasticsearch.Net.IndicesStatsRequestParameters,Elasticsearch.Net.IndicesStatsRequestParameters})">
            <summary>Represents a GET on /_stats/{metric}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-stats.html</para>	
            </summary>
            <param name="metric">Limit the information returned the specific metrics.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesStatsForAll(System.String,System.Func{Elasticsearch.Net.IndicesStatsRequestParameters,Elasticsearch.Net.IndicesStatsRequestParameters})">
            <summary>Represents a GET on /_stats/{metric}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-stats.html</para>	
            </summary>
            <param name="metric">Limit the information returned the specific metrics.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesStatsForAllAsync(System.String,System.Func{Elasticsearch.Net.IndicesStatsRequestParameters,Elasticsearch.Net.IndicesStatsRequestParameters})">
            <summary>Represents a GET on /_stats/{metric}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-stats.html</para>	
            </summary>
            <param name="metric">Limit the information returned the specific metrics.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesStats``1(System.String,System.Func{Elasticsearch.Net.IndicesStatsRequestParameters,Elasticsearch.Net.IndicesStatsRequestParameters})">
            <summary>Represents a GET on /{index}/_stats
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-stats.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesStatsAsync``1(System.String,System.Func{Elasticsearch.Net.IndicesStatsRequestParameters,Elasticsearch.Net.IndicesStatsRequestParameters})">
            <summary>Represents a GET on /{index}/_stats
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-stats.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesStats(System.String,System.Func{Elasticsearch.Net.IndicesStatsRequestParameters,Elasticsearch.Net.IndicesStatsRequestParameters})">
            <summary>Represents a GET on /{index}/_stats
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-stats.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesStatsAsync(System.String,System.Func{Elasticsearch.Net.IndicesStatsRequestParameters,Elasticsearch.Net.IndicesStatsRequestParameters})">
            <summary>Represents a GET on /{index}/_stats
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-stats.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesStats``1(System.String,System.String,System.Func{Elasticsearch.Net.IndicesStatsRequestParameters,Elasticsearch.Net.IndicesStatsRequestParameters})">
            <summary>Represents a GET on /{index}/_stats/{metric}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-stats.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="metric">Limit the information returned the specific metrics.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesStatsAsync``1(System.String,System.String,System.Func{Elasticsearch.Net.IndicesStatsRequestParameters,Elasticsearch.Net.IndicesStatsRequestParameters})">
            <summary>Represents a GET on /{index}/_stats/{metric}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-stats.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="metric">Limit the information returned the specific metrics.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesStats(System.String,System.String,System.Func{Elasticsearch.Net.IndicesStatsRequestParameters,Elasticsearch.Net.IndicesStatsRequestParameters})">
            <summary>Represents a GET on /{index}/_stats/{metric}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-stats.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="metric">Limit the information returned the specific metrics.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesStatsAsync(System.String,System.String,System.Func{Elasticsearch.Net.IndicesStatsRequestParameters,Elasticsearch.Net.IndicesStatsRequestParameters})">
            <summary>Represents a GET on /{index}/_stats/{metric}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-stats.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="metric">Limit the information returned the specific metrics.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesStatusForAll``1(System.Func{Elasticsearch.Net.IndicesStatusRequestParameters,Elasticsearch.Net.IndicesStatusRequestParameters})">
            <summary>Represents a GET on /_status
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-status.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesStatusForAllAsync``1(System.Func{Elasticsearch.Net.IndicesStatusRequestParameters,Elasticsearch.Net.IndicesStatusRequestParameters})">
            <summary>Represents a GET on /_status
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-status.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesStatusForAll(System.Func{Elasticsearch.Net.IndicesStatusRequestParameters,Elasticsearch.Net.IndicesStatusRequestParameters})">
            <summary>Represents a GET on /_status
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-status.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesStatusForAllAsync(System.Func{Elasticsearch.Net.IndicesStatusRequestParameters,Elasticsearch.Net.IndicesStatusRequestParameters})">
            <summary>Represents a GET on /_status
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-status.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesStatus``1(System.String,System.Func{Elasticsearch.Net.IndicesStatusRequestParameters,Elasticsearch.Net.IndicesStatusRequestParameters})">
            <summary>Represents a GET on /{index}/_status
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-status.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesStatusAsync``1(System.String,System.Func{Elasticsearch.Net.IndicesStatusRequestParameters,Elasticsearch.Net.IndicesStatusRequestParameters})">
            <summary>Represents a GET on /{index}/_status
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-status.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesStatus(System.String,System.Func{Elasticsearch.Net.IndicesStatusRequestParameters,Elasticsearch.Net.IndicesStatusRequestParameters})">
            <summary>Represents a GET on /{index}/_status
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-status.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesStatusAsync(System.String,System.Func{Elasticsearch.Net.IndicesStatusRequestParameters,Elasticsearch.Net.IndicesStatusRequestParameters})">
            <summary>Represents a GET on /{index}/_status
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-status.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesUpdateAliasesForAll``1(System.Object,System.Func{Elasticsearch.Net.AliasRequestParameters,Elasticsearch.Net.AliasRequestParameters})">
            <summary>Represents a POST on /_aliases
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="body">The definition of `actions` to perform</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesUpdateAliasesForAllAsync``1(System.Object,System.Func{Elasticsearch.Net.AliasRequestParameters,Elasticsearch.Net.AliasRequestParameters})">
            <summary>Represents a POST on /_aliases
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="body">The definition of `actions` to perform</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesUpdateAliasesForAll(System.Object,System.Func{Elasticsearch.Net.AliasRequestParameters,Elasticsearch.Net.AliasRequestParameters})">
            <summary>Represents a POST on /_aliases
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="body">The definition of `actions` to perform</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesUpdateAliasesForAllAsync(System.Object,System.Func{Elasticsearch.Net.AliasRequestParameters,Elasticsearch.Net.AliasRequestParameters})">
            <summary>Represents a POST on /_aliases
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html</para>	
            </summary>
            <param name="body">The definition of `actions` to perform</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesValidateQueryGetForAll``1(System.Func{Elasticsearch.Net.ValidateQueryRequestParameters,Elasticsearch.Net.ValidateQueryRequestParameters})">
            <summary>Represents a GET on /_validate/query
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-validate.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesValidateQueryGetForAllAsync``1(System.Func{Elasticsearch.Net.ValidateQueryRequestParameters,Elasticsearch.Net.ValidateQueryRequestParameters})">
            <summary>Represents a GET on /_validate/query
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-validate.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesValidateQueryGetForAll(System.Func{Elasticsearch.Net.ValidateQueryRequestParameters,Elasticsearch.Net.ValidateQueryRequestParameters})">
            <summary>Represents a GET on /_validate/query
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-validate.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesValidateQueryGetForAllAsync(System.Func{Elasticsearch.Net.ValidateQueryRequestParameters,Elasticsearch.Net.ValidateQueryRequestParameters})">
            <summary>Represents a GET on /_validate/query
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-validate.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesValidateQueryGet``1(System.String,System.Func{Elasticsearch.Net.ValidateQueryRequestParameters,Elasticsearch.Net.ValidateQueryRequestParameters})">
            <summary>Represents a GET on /{index}/_validate/query
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-validate.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesValidateQueryGetAsync``1(System.String,System.Func{Elasticsearch.Net.ValidateQueryRequestParameters,Elasticsearch.Net.ValidateQueryRequestParameters})">
            <summary>Represents a GET on /{index}/_validate/query
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-validate.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesValidateQueryGet(System.String,System.Func{Elasticsearch.Net.ValidateQueryRequestParameters,Elasticsearch.Net.ValidateQueryRequestParameters})">
            <summary>Represents a GET on /{index}/_validate/query
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-validate.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesValidateQueryGetAsync(System.String,System.Func{Elasticsearch.Net.ValidateQueryRequestParameters,Elasticsearch.Net.ValidateQueryRequestParameters})">
            <summary>Represents a GET on /{index}/_validate/query
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-validate.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesValidateQueryGet``1(System.String,System.String,System.Func{Elasticsearch.Net.ValidateQueryRequestParameters,Elasticsearch.Net.ValidateQueryRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_validate/query
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-validate.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
            <param name="type">A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesValidateQueryGetAsync``1(System.String,System.String,System.Func{Elasticsearch.Net.ValidateQueryRequestParameters,Elasticsearch.Net.ValidateQueryRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_validate/query
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-validate.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
            <param name="type">A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesValidateQueryGet(System.String,System.String,System.Func{Elasticsearch.Net.ValidateQueryRequestParameters,Elasticsearch.Net.ValidateQueryRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_validate/query
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-validate.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
            <param name="type">A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesValidateQueryGetAsync(System.String,System.String,System.Func{Elasticsearch.Net.ValidateQueryRequestParameters,Elasticsearch.Net.ValidateQueryRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_validate/query
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-validate.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
            <param name="type">A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesValidateQueryForAll``1(System.Object,System.Func{Elasticsearch.Net.ValidateQueryRequestParameters,Elasticsearch.Net.ValidateQueryRequestParameters})">
            <summary>Represents a POST on /_validate/query
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-validate.html</para>	
            </summary>
            <param name="body">The query definition specified with the Query DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesValidateQueryForAllAsync``1(System.Object,System.Func{Elasticsearch.Net.ValidateQueryRequestParameters,Elasticsearch.Net.ValidateQueryRequestParameters})">
            <summary>Represents a POST on /_validate/query
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-validate.html</para>	
            </summary>
            <param name="body">The query definition specified with the Query DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesValidateQueryForAll(System.Object,System.Func{Elasticsearch.Net.ValidateQueryRequestParameters,Elasticsearch.Net.ValidateQueryRequestParameters})">
            <summary>Represents a POST on /_validate/query
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-validate.html</para>	
            </summary>
            <param name="body">The query definition specified with the Query DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesValidateQueryForAllAsync(System.Object,System.Func{Elasticsearch.Net.ValidateQueryRequestParameters,Elasticsearch.Net.ValidateQueryRequestParameters})">
            <summary>Represents a POST on /_validate/query
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-validate.html</para>	
            </summary>
            <param name="body">The query definition specified with the Query DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesValidateQuery``1(System.String,System.Object,System.Func{Elasticsearch.Net.ValidateQueryRequestParameters,Elasticsearch.Net.ValidateQueryRequestParameters})">
            <summary>Represents a POST on /{index}/_validate/query
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-validate.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
            <param name="body">The query definition specified with the Query DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesValidateQueryAsync``1(System.String,System.Object,System.Func{Elasticsearch.Net.ValidateQueryRequestParameters,Elasticsearch.Net.ValidateQueryRequestParameters})">
            <summary>Represents a POST on /{index}/_validate/query
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-validate.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
            <param name="body">The query definition specified with the Query DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesValidateQuery(System.String,System.Object,System.Func{Elasticsearch.Net.ValidateQueryRequestParameters,Elasticsearch.Net.ValidateQueryRequestParameters})">
            <summary>Represents a POST on /{index}/_validate/query
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-validate.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
            <param name="body">The query definition specified with the Query DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesValidateQueryAsync(System.String,System.Object,System.Func{Elasticsearch.Net.ValidateQueryRequestParameters,Elasticsearch.Net.ValidateQueryRequestParameters})">
            <summary>Represents a POST on /{index}/_validate/query
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-validate.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
            <param name="body">The query definition specified with the Query DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesValidateQuery``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.ValidateQueryRequestParameters,Elasticsearch.Net.ValidateQueryRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_validate/query
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-validate.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
            <param name="type">A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types</param>
            <param name="body">The query definition specified with the Query DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesValidateQueryAsync``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.ValidateQueryRequestParameters,Elasticsearch.Net.ValidateQueryRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_validate/query
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-validate.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
            <param name="type">A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types</param>
            <param name="body">The query definition specified with the Query DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesValidateQuery(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.ValidateQueryRequestParameters,Elasticsearch.Net.ValidateQueryRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_validate/query
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-validate.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
            <param name="type">A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types</param>
            <param name="body">The query definition specified with the Query DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.IndicesValidateQueryAsync(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.ValidateQueryRequestParameters,Elasticsearch.Net.ValidateQueryRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_validate/query
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-validate.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
            <param name="type">A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types</param>
            <param name="body">The query definition specified with the Query DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.Info``1(System.Func{Elasticsearch.Net.InfoRequestParameters,Elasticsearch.Net.InfoRequestParameters})">
            <summary>Represents a GET on /
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.InfoAsync``1(System.Func{Elasticsearch.Net.InfoRequestParameters,Elasticsearch.Net.InfoRequestParameters})">
            <summary>Represents a GET on /
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.Info(System.Func{Elasticsearch.Net.InfoRequestParameters,Elasticsearch.Net.InfoRequestParameters})">
            <summary>Represents a GET on /
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.InfoAsync(System.Func{Elasticsearch.Net.InfoRequestParameters,Elasticsearch.Net.InfoRequestParameters})">
            <summary>Represents a GET on /
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.ListBenchmarks``1(System.Func{Elasticsearch.Net.ListBenchmarksRequestParameters,Elasticsearch.Net.ListBenchmarksRequestParameters})">
            <summary>Represents a GET on /_bench
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-benchmark.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.ListBenchmarksAsync``1(System.Func{Elasticsearch.Net.ListBenchmarksRequestParameters,Elasticsearch.Net.ListBenchmarksRequestParameters})">
            <summary>Represents a GET on /_bench
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-benchmark.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.ListBenchmarks(System.Func{Elasticsearch.Net.ListBenchmarksRequestParameters,Elasticsearch.Net.ListBenchmarksRequestParameters})">
            <summary>Represents a GET on /_bench
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-benchmark.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.ListBenchmarksAsync(System.Func{Elasticsearch.Net.ListBenchmarksRequestParameters,Elasticsearch.Net.ListBenchmarksRequestParameters})">
            <summary>Represents a GET on /_bench
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-benchmark.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.ListBenchmarks``1(System.String,System.Func{Elasticsearch.Net.ListBenchmarksRequestParameters,Elasticsearch.Net.ListBenchmarksRequestParameters})">
            <summary>Represents a GET on /{index}/_bench
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-benchmark.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.ListBenchmarksAsync``1(System.String,System.Func{Elasticsearch.Net.ListBenchmarksRequestParameters,Elasticsearch.Net.ListBenchmarksRequestParameters})">
            <summary>Represents a GET on /{index}/_bench
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-benchmark.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.ListBenchmarks(System.String,System.Func{Elasticsearch.Net.ListBenchmarksRequestParameters,Elasticsearch.Net.ListBenchmarksRequestParameters})">
            <summary>Represents a GET on /{index}/_bench
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-benchmark.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.ListBenchmarksAsync(System.String,System.Func{Elasticsearch.Net.ListBenchmarksRequestParameters,Elasticsearch.Net.ListBenchmarksRequestParameters})">
            <summary>Represents a GET on /{index}/_bench
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-benchmark.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.ListBenchmarks``1(System.String,System.String,System.Func{Elasticsearch.Net.ListBenchmarksRequestParameters,Elasticsearch.Net.ListBenchmarksRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_bench
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-benchmark.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="type">The name of the document type</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.ListBenchmarksAsync``1(System.String,System.String,System.Func{Elasticsearch.Net.ListBenchmarksRequestParameters,Elasticsearch.Net.ListBenchmarksRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_bench
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-benchmark.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="type">The name of the document type</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.ListBenchmarks(System.String,System.String,System.Func{Elasticsearch.Net.ListBenchmarksRequestParameters,Elasticsearch.Net.ListBenchmarksRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_bench
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-benchmark.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="type">The name of the document type</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.ListBenchmarksAsync(System.String,System.String,System.Func{Elasticsearch.Net.ListBenchmarksRequestParameters,Elasticsearch.Net.ListBenchmarksRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_bench
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-benchmark.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
            <param name="type">The name of the document type</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.MgetGet``1(System.Func{Elasticsearch.Net.MultiGetRequestParameters,Elasticsearch.Net.MultiGetRequestParameters})">
            <summary>Represents a GET on /_mget
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-get.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.MgetGetAsync``1(System.Func{Elasticsearch.Net.MultiGetRequestParameters,Elasticsearch.Net.MultiGetRequestParameters})">
            <summary>Represents a GET on /_mget
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-get.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.MgetGet(System.Func{Elasticsearch.Net.MultiGetRequestParameters,Elasticsearch.Net.MultiGetRequestParameters})">
            <summary>Represents a GET on /_mget
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-get.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.MgetGetAsync(System.Func{Elasticsearch.Net.MultiGetRequestParameters,Elasticsearch.Net.MultiGetRequestParameters})">
            <summary>Represents a GET on /_mget
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-get.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.MgetGet``1(System.String,System.Func{Elasticsearch.Net.MultiGetRequestParameters,Elasticsearch.Net.MultiGetRequestParameters})">
            <summary>Represents a GET on /{index}/_mget
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-get.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.MgetGetAsync``1(System.String,System.Func{Elasticsearch.Net.MultiGetRequestParameters,Elasticsearch.Net.MultiGetRequestParameters})">
            <summary>Represents a GET on /{index}/_mget
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-get.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.MgetGet(System.String,System.Func{Elasticsearch.Net.MultiGetRequestParameters,Elasticsearch.Net.MultiGetRequestParameters})">
            <summary>Represents a GET on /{index}/_mget
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-get.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.MgetGetAsync(System.String,System.Func{Elasticsearch.Net.MultiGetRequestParameters,Elasticsearch.Net.MultiGetRequestParameters})">
            <summary>Represents a GET on /{index}/_mget
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-get.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.MgetGet``1(System.String,System.String,System.Func{Elasticsearch.Net.MultiGetRequestParameters,Elasticsearch.Net.MultiGetRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_mget
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-get.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.MgetGetAsync``1(System.String,System.String,System.Func{Elasticsearch.Net.MultiGetRequestParameters,Elasticsearch.Net.MultiGetRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_mget
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-get.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.MgetGet(System.String,System.String,System.Func{Elasticsearch.Net.MultiGetRequestParameters,Elasticsearch.Net.MultiGetRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_mget
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-get.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.MgetGetAsync(System.String,System.String,System.Func{Elasticsearch.Net.MultiGetRequestParameters,Elasticsearch.Net.MultiGetRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_mget
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-get.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.Mget``1(System.Object,System.Func{Elasticsearch.Net.MultiGetRequestParameters,Elasticsearch.Net.MultiGetRequestParameters})">
            <summary>Represents a POST on /_mget
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-get.html</para>	
            </summary>
            <param name="body">Document identifiers; can be either `docs` (containing full document information) or `ids` (when index and type is provided in the URL.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.MgetAsync``1(System.Object,System.Func{Elasticsearch.Net.MultiGetRequestParameters,Elasticsearch.Net.MultiGetRequestParameters})">
            <summary>Represents a POST on /_mget
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-get.html</para>	
            </summary>
            <param name="body">Document identifiers; can be either `docs` (containing full document information) or `ids` (when index and type is provided in the URL.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.Mget(System.Object,System.Func{Elasticsearch.Net.MultiGetRequestParameters,Elasticsearch.Net.MultiGetRequestParameters})">
            <summary>Represents a POST on /_mget
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-get.html</para>	
            </summary>
            <param name="body">Document identifiers; can be either `docs` (containing full document information) or `ids` (when index and type is provided in the URL.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.MgetAsync(System.Object,System.Func{Elasticsearch.Net.MultiGetRequestParameters,Elasticsearch.Net.MultiGetRequestParameters})">
            <summary>Represents a POST on /_mget
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-get.html</para>	
            </summary>
            <param name="body">Document identifiers; can be either `docs` (containing full document information) or `ids` (when index and type is provided in the URL.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.Mget``1(System.String,System.Object,System.Func{Elasticsearch.Net.MultiGetRequestParameters,Elasticsearch.Net.MultiGetRequestParameters})">
            <summary>Represents a POST on /{index}/_mget
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-get.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="body">Document identifiers; can be either `docs` (containing full document information) or `ids` (when index and type is provided in the URL.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.MgetAsync``1(System.String,System.Object,System.Func{Elasticsearch.Net.MultiGetRequestParameters,Elasticsearch.Net.MultiGetRequestParameters})">
            <summary>Represents a POST on /{index}/_mget
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-get.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="body">Document identifiers; can be either `docs` (containing full document information) or `ids` (when index and type is provided in the URL.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.Mget(System.String,System.Object,System.Func{Elasticsearch.Net.MultiGetRequestParameters,Elasticsearch.Net.MultiGetRequestParameters})">
            <summary>Represents a POST on /{index}/_mget
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-get.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="body">Document identifiers; can be either `docs` (containing full document information) or `ids` (when index and type is provided in the URL.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.MgetAsync(System.String,System.Object,System.Func{Elasticsearch.Net.MultiGetRequestParameters,Elasticsearch.Net.MultiGetRequestParameters})">
            <summary>Represents a POST on /{index}/_mget
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-get.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="body">Document identifiers; can be either `docs` (containing full document information) or `ids` (when index and type is provided in the URL.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.Mget``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.MultiGetRequestParameters,Elasticsearch.Net.MultiGetRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_mget
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-get.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="body">Document identifiers; can be either `docs` (containing full document information) or `ids` (when index and type is provided in the URL.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.MgetAsync``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.MultiGetRequestParameters,Elasticsearch.Net.MultiGetRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_mget
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-get.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="body">Document identifiers; can be either `docs` (containing full document information) or `ids` (when index and type is provided in the URL.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.Mget(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.MultiGetRequestParameters,Elasticsearch.Net.MultiGetRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_mget
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-get.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="body">Document identifiers; can be either `docs` (containing full document information) or `ids` (when index and type is provided in the URL.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.MgetAsync(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.MultiGetRequestParameters,Elasticsearch.Net.MultiGetRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_mget
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-get.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="body">Document identifiers; can be either `docs` (containing full document information) or `ids` (when index and type is provided in the URL.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.MltGet``1(System.String,System.String,System.String,System.Func{Elasticsearch.Net.MoreLikeThisRequestParameters,Elasticsearch.Net.MoreLikeThisRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/{id}/_mlt
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-more-like-this.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document (use `_all` to fetch the first document matching the ID across all types)</param>
            <param name="id">The document ID</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.MltGetAsync``1(System.String,System.String,System.String,System.Func{Elasticsearch.Net.MoreLikeThisRequestParameters,Elasticsearch.Net.MoreLikeThisRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/{id}/_mlt
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-more-like-this.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document (use `_all` to fetch the first document matching the ID across all types)</param>
            <param name="id">The document ID</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.MltGet(System.String,System.String,System.String,System.Func{Elasticsearch.Net.MoreLikeThisRequestParameters,Elasticsearch.Net.MoreLikeThisRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/{id}/_mlt
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-more-like-this.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document (use `_all` to fetch the first document matching the ID across all types)</param>
            <param name="id">The document ID</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.MltGetAsync(System.String,System.String,System.String,System.Func{Elasticsearch.Net.MoreLikeThisRequestParameters,Elasticsearch.Net.MoreLikeThisRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/{id}/_mlt
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-more-like-this.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document (use `_all` to fetch the first document matching the ID across all types)</param>
            <param name="id">The document ID</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.Mlt``1(System.String,System.String,System.String,System.Object,System.Func{Elasticsearch.Net.MoreLikeThisRequestParameters,Elasticsearch.Net.MoreLikeThisRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/{id}/_mlt
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-more-like-this.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document (use `_all` to fetch the first document matching the ID across all types)</param>
            <param name="id">The document ID</param>
            <param name="body">A specific search request definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.MltAsync``1(System.String,System.String,System.String,System.Object,System.Func{Elasticsearch.Net.MoreLikeThisRequestParameters,Elasticsearch.Net.MoreLikeThisRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/{id}/_mlt
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-more-like-this.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document (use `_all` to fetch the first document matching the ID across all types)</param>
            <param name="id">The document ID</param>
            <param name="body">A specific search request definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.Mlt(System.String,System.String,System.String,System.Object,System.Func{Elasticsearch.Net.MoreLikeThisRequestParameters,Elasticsearch.Net.MoreLikeThisRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/{id}/_mlt
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-more-like-this.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document (use `_all` to fetch the first document matching the ID across all types)</param>
            <param name="id">The document ID</param>
            <param name="body">A specific search request definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.MltAsync(System.String,System.String,System.String,System.Object,System.Func{Elasticsearch.Net.MoreLikeThisRequestParameters,Elasticsearch.Net.MoreLikeThisRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/{id}/_mlt
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-more-like-this.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document (use `_all` to fetch the first document matching the ID across all types)</param>
            <param name="id">The document ID</param>
            <param name="body">A specific search request definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.MpercolateGet``1(System.Func{Elasticsearch.Net.MpercolateRequestParameters,Elasticsearch.Net.MpercolateRequestParameters})">
            <summary>Represents a GET on /_mpercolate
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.MpercolateGetAsync``1(System.Func{Elasticsearch.Net.MpercolateRequestParameters,Elasticsearch.Net.MpercolateRequestParameters})">
            <summary>Represents a GET on /_mpercolate
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.MpercolateGet(System.Func{Elasticsearch.Net.MpercolateRequestParameters,Elasticsearch.Net.MpercolateRequestParameters})">
            <summary>Represents a GET on /_mpercolate
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.MpercolateGetAsync(System.Func{Elasticsearch.Net.MpercolateRequestParameters,Elasticsearch.Net.MpercolateRequestParameters})">
            <summary>Represents a GET on /_mpercolate
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.MpercolateGet``1(System.String,System.Func{Elasticsearch.Net.MpercolateRequestParameters,Elasticsearch.Net.MpercolateRequestParameters})">
            <summary>Represents a GET on /{index}/_mpercolate
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being count percolated to use as default</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.MpercolateGetAsync``1(System.String,System.Func{Elasticsearch.Net.MpercolateRequestParameters,Elasticsearch.Net.MpercolateRequestParameters})">
            <summary>Represents a GET on /{index}/_mpercolate
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being count percolated to use as default</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.MpercolateGet(System.String,System.Func{Elasticsearch.Net.MpercolateRequestParameters,Elasticsearch.Net.MpercolateRequestParameters})">
            <summary>Represents a GET on /{index}/_mpercolate
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being count percolated to use as default</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.MpercolateGetAsync(System.String,System.Func{Elasticsearch.Net.MpercolateRequestParameters,Elasticsearch.Net.MpercolateRequestParameters})">
            <summary>Represents a GET on /{index}/_mpercolate
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being count percolated to use as default</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.MpercolateGet``1(System.String,System.String,System.Func{Elasticsearch.Net.MpercolateRequestParameters,Elasticsearch.Net.MpercolateRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_mpercolate
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being count percolated to use as default</param>
            <param name="type">The type of the document being percolated to use as default.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.MpercolateGetAsync``1(System.String,System.String,System.Func{Elasticsearch.Net.MpercolateRequestParameters,Elasticsearch.Net.MpercolateRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_mpercolate
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being count percolated to use as default</param>
            <param name="type">The type of the document being percolated to use as default.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.MpercolateGet(System.String,System.String,System.Func{Elasticsearch.Net.MpercolateRequestParameters,Elasticsearch.Net.MpercolateRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_mpercolate
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being count percolated to use as default</param>
            <param name="type">The type of the document being percolated to use as default.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.MpercolateGetAsync(System.String,System.String,System.Func{Elasticsearch.Net.MpercolateRequestParameters,Elasticsearch.Net.MpercolateRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_mpercolate
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being count percolated to use as default</param>
            <param name="type">The type of the document being percolated to use as default.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.Mpercolate``1(System.Object,System.Func{Elasticsearch.Net.MpercolateRequestParameters,Elasticsearch.Net.MpercolateRequestParameters})">
            <summary>Represents a POST on /_mpercolate
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="body">The percolate request definitions (header &amp; body pair), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.MpercolateAsync``1(System.Object,System.Func{Elasticsearch.Net.MpercolateRequestParameters,Elasticsearch.Net.MpercolateRequestParameters})">
            <summary>Represents a POST on /_mpercolate
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="body">The percolate request definitions (header &amp; body pair), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.Mpercolate(System.Object,System.Func{Elasticsearch.Net.MpercolateRequestParameters,Elasticsearch.Net.MpercolateRequestParameters})">
            <summary>Represents a POST on /_mpercolate
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="body">The percolate request definitions (header &amp; body pair), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.MpercolateAsync(System.Object,System.Func{Elasticsearch.Net.MpercolateRequestParameters,Elasticsearch.Net.MpercolateRequestParameters})">
            <summary>Represents a POST on /_mpercolate
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="body">The percolate request definitions (header &amp; body pair), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.Mpercolate``1(System.String,System.Object,System.Func{Elasticsearch.Net.MpercolateRequestParameters,Elasticsearch.Net.MpercolateRequestParameters})">
            <summary>Represents a POST on /{index}/_mpercolate
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being count percolated to use as default</param>
            <param name="body">The percolate request definitions (header &amp; body pair), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.MpercolateAsync``1(System.String,System.Object,System.Func{Elasticsearch.Net.MpercolateRequestParameters,Elasticsearch.Net.MpercolateRequestParameters})">
            <summary>Represents a POST on /{index}/_mpercolate
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being count percolated to use as default</param>
            <param name="body">The percolate request definitions (header &amp; body pair), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.Mpercolate(System.String,System.Object,System.Func{Elasticsearch.Net.MpercolateRequestParameters,Elasticsearch.Net.MpercolateRequestParameters})">
            <summary>Represents a POST on /{index}/_mpercolate
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being count percolated to use as default</param>
            <param name="body">The percolate request definitions (header &amp; body pair), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.MpercolateAsync(System.String,System.Object,System.Func{Elasticsearch.Net.MpercolateRequestParameters,Elasticsearch.Net.MpercolateRequestParameters})">
            <summary>Represents a POST on /{index}/_mpercolate
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being count percolated to use as default</param>
            <param name="body">The percolate request definitions (header &amp; body pair), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.Mpercolate``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.MpercolateRequestParameters,Elasticsearch.Net.MpercolateRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_mpercolate
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being count percolated to use as default</param>
            <param name="type">The type of the document being percolated to use as default.</param>
            <param name="body">The percolate request definitions (header &amp; body pair), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.MpercolateAsync``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.MpercolateRequestParameters,Elasticsearch.Net.MpercolateRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_mpercolate
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being count percolated to use as default</param>
            <param name="type">The type of the document being percolated to use as default.</param>
            <param name="body">The percolate request definitions (header &amp; body pair), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.Mpercolate(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.MpercolateRequestParameters,Elasticsearch.Net.MpercolateRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_mpercolate
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being count percolated to use as default</param>
            <param name="type">The type of the document being percolated to use as default.</param>
            <param name="body">The percolate request definitions (header &amp; body pair), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.MpercolateAsync(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.MpercolateRequestParameters,Elasticsearch.Net.MpercolateRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_mpercolate
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being count percolated to use as default</param>
            <param name="type">The type of the document being percolated to use as default.</param>
            <param name="body">The percolate request definitions (header &amp; body pair), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.MsearchGet``1(System.Func{Elasticsearch.Net.MultiSearchRequestParameters,Elasticsearch.Net.MultiSearchRequestParameters})">
            <summary>Represents a GET on /_msearch
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-multi-search.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.MsearchGetAsync``1(System.Func{Elasticsearch.Net.MultiSearchRequestParameters,Elasticsearch.Net.MultiSearchRequestParameters})">
            <summary>Represents a GET on /_msearch
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-multi-search.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.MsearchGet(System.Func{Elasticsearch.Net.MultiSearchRequestParameters,Elasticsearch.Net.MultiSearchRequestParameters})">
            <summary>Represents a GET on /_msearch
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-multi-search.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.MsearchGetAsync(System.Func{Elasticsearch.Net.MultiSearchRequestParameters,Elasticsearch.Net.MultiSearchRequestParameters})">
            <summary>Represents a GET on /_msearch
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-multi-search.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.MsearchGet``1(System.String,System.Func{Elasticsearch.Net.MultiSearchRequestParameters,Elasticsearch.Net.MultiSearchRequestParameters})">
            <summary>Represents a GET on /{index}/_msearch
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-multi-search.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to use as default</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.MsearchGetAsync``1(System.String,System.Func{Elasticsearch.Net.MultiSearchRequestParameters,Elasticsearch.Net.MultiSearchRequestParameters})">
            <summary>Represents a GET on /{index}/_msearch
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-multi-search.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to use as default</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.MsearchGet(System.String,System.Func{Elasticsearch.Net.MultiSearchRequestParameters,Elasticsearch.Net.MultiSearchRequestParameters})">
            <summary>Represents a GET on /{index}/_msearch
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-multi-search.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to use as default</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.MsearchGetAsync(System.String,System.Func{Elasticsearch.Net.MultiSearchRequestParameters,Elasticsearch.Net.MultiSearchRequestParameters})">
            <summary>Represents a GET on /{index}/_msearch
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-multi-search.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to use as default</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.MsearchGet``1(System.String,System.String,System.Func{Elasticsearch.Net.MultiSearchRequestParameters,Elasticsearch.Net.MultiSearchRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_msearch
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-multi-search.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to use as default</param>
            <param name="type">A comma-separated list of document types to use as default</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.MsearchGetAsync``1(System.String,System.String,System.Func{Elasticsearch.Net.MultiSearchRequestParameters,Elasticsearch.Net.MultiSearchRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_msearch
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-multi-search.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to use as default</param>
            <param name="type">A comma-separated list of document types to use as default</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.MsearchGet(System.String,System.String,System.Func{Elasticsearch.Net.MultiSearchRequestParameters,Elasticsearch.Net.MultiSearchRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_msearch
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-multi-search.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to use as default</param>
            <param name="type">A comma-separated list of document types to use as default</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.MsearchGetAsync(System.String,System.String,System.Func{Elasticsearch.Net.MultiSearchRequestParameters,Elasticsearch.Net.MultiSearchRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_msearch
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-multi-search.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to use as default</param>
            <param name="type">A comma-separated list of document types to use as default</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.Msearch``1(System.Object,System.Func{Elasticsearch.Net.MultiSearchRequestParameters,Elasticsearch.Net.MultiSearchRequestParameters})">
            <summary>Represents a POST on /_msearch
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-multi-search.html</para>	
            </summary>
            <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.MsearchAsync``1(System.Object,System.Func{Elasticsearch.Net.MultiSearchRequestParameters,Elasticsearch.Net.MultiSearchRequestParameters})">
            <summary>Represents a POST on /_msearch
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-multi-search.html</para>	
            </summary>
            <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.Msearch(System.Object,System.Func{Elasticsearch.Net.MultiSearchRequestParameters,Elasticsearch.Net.MultiSearchRequestParameters})">
            <summary>Represents a POST on /_msearch
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-multi-search.html</para>	
            </summary>
            <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.MsearchAsync(System.Object,System.Func{Elasticsearch.Net.MultiSearchRequestParameters,Elasticsearch.Net.MultiSearchRequestParameters})">
            <summary>Represents a POST on /_msearch
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-multi-search.html</para>	
            </summary>
            <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.Msearch``1(System.String,System.Object,System.Func{Elasticsearch.Net.MultiSearchRequestParameters,Elasticsearch.Net.MultiSearchRequestParameters})">
            <summary>Represents a POST on /{index}/_msearch
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-multi-search.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to use as default</param>
            <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.MsearchAsync``1(System.String,System.Object,System.Func{Elasticsearch.Net.MultiSearchRequestParameters,Elasticsearch.Net.MultiSearchRequestParameters})">
            <summary>Represents a POST on /{index}/_msearch
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-multi-search.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to use as default</param>
            <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.Msearch(System.String,System.Object,System.Func{Elasticsearch.Net.MultiSearchRequestParameters,Elasticsearch.Net.MultiSearchRequestParameters})">
            <summary>Represents a POST on /{index}/_msearch
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-multi-search.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to use as default</param>
            <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.MsearchAsync(System.String,System.Object,System.Func{Elasticsearch.Net.MultiSearchRequestParameters,Elasticsearch.Net.MultiSearchRequestParameters})">
            <summary>Represents a POST on /{index}/_msearch
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-multi-search.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to use as default</param>
            <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.Msearch``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.MultiSearchRequestParameters,Elasticsearch.Net.MultiSearchRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_msearch
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-multi-search.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to use as default</param>
            <param name="type">A comma-separated list of document types to use as default</param>
            <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.MsearchAsync``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.MultiSearchRequestParameters,Elasticsearch.Net.MultiSearchRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_msearch
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-multi-search.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to use as default</param>
            <param name="type">A comma-separated list of document types to use as default</param>
            <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.Msearch(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.MultiSearchRequestParameters,Elasticsearch.Net.MultiSearchRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_msearch
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-multi-search.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to use as default</param>
            <param name="type">A comma-separated list of document types to use as default</param>
            <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.MsearchAsync(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.MultiSearchRequestParameters,Elasticsearch.Net.MultiSearchRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_msearch
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-multi-search.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to use as default</param>
            <param name="type">A comma-separated list of document types to use as default</param>
            <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.MtermvectorsGet``1(System.Func{Elasticsearch.Net.MultiTermVectorsRequestParameters,Elasticsearch.Net.MultiTermVectorsRequestParameters})">
            <summary>Represents a GET on /_mtermvectors
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-termvectors.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.MtermvectorsGetAsync``1(System.Func{Elasticsearch.Net.MultiTermVectorsRequestParameters,Elasticsearch.Net.MultiTermVectorsRequestParameters})">
            <summary>Represents a GET on /_mtermvectors
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-termvectors.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.MtermvectorsGet(System.Func{Elasticsearch.Net.MultiTermVectorsRequestParameters,Elasticsearch.Net.MultiTermVectorsRequestParameters})">
            <summary>Represents a GET on /_mtermvectors
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-termvectors.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.MtermvectorsGetAsync(System.Func{Elasticsearch.Net.MultiTermVectorsRequestParameters,Elasticsearch.Net.MultiTermVectorsRequestParameters})">
            <summary>Represents a GET on /_mtermvectors
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-termvectors.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.MtermvectorsGet``1(System.String,System.Func{Elasticsearch.Net.MultiTermVectorsRequestParameters,Elasticsearch.Net.MultiTermVectorsRequestParameters})">
            <summary>Represents a GET on /{index}/_mtermvectors
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-termvectors.html</para>	
            </summary>
            <param name="index">The index in which the document resides.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.MtermvectorsGetAsync``1(System.String,System.Func{Elasticsearch.Net.MultiTermVectorsRequestParameters,Elasticsearch.Net.MultiTermVectorsRequestParameters})">
            <summary>Represents a GET on /{index}/_mtermvectors
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-termvectors.html</para>	
            </summary>
            <param name="index">The index in which the document resides.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.MtermvectorsGet(System.String,System.Func{Elasticsearch.Net.MultiTermVectorsRequestParameters,Elasticsearch.Net.MultiTermVectorsRequestParameters})">
            <summary>Represents a GET on /{index}/_mtermvectors
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-termvectors.html</para>	
            </summary>
            <param name="index">The index in which the document resides.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.MtermvectorsGetAsync(System.String,System.Func{Elasticsearch.Net.MultiTermVectorsRequestParameters,Elasticsearch.Net.MultiTermVectorsRequestParameters})">
            <summary>Represents a GET on /{index}/_mtermvectors
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-termvectors.html</para>	
            </summary>
            <param name="index">The index in which the document resides.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.MtermvectorsGet``1(System.String,System.String,System.Func{Elasticsearch.Net.MultiTermVectorsRequestParameters,Elasticsearch.Net.MultiTermVectorsRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_mtermvectors
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-termvectors.html</para>	
            </summary>
            <param name="index">The index in which the document resides.</param>
            <param name="type">The type of the document.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.MtermvectorsGetAsync``1(System.String,System.String,System.Func{Elasticsearch.Net.MultiTermVectorsRequestParameters,Elasticsearch.Net.MultiTermVectorsRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_mtermvectors
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-termvectors.html</para>	
            </summary>
            <param name="index">The index in which the document resides.</param>
            <param name="type">The type of the document.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.MtermvectorsGet(System.String,System.String,System.Func{Elasticsearch.Net.MultiTermVectorsRequestParameters,Elasticsearch.Net.MultiTermVectorsRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_mtermvectors
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-termvectors.html</para>	
            </summary>
            <param name="index">The index in which the document resides.</param>
            <param name="type">The type of the document.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.MtermvectorsGetAsync(System.String,System.String,System.Func{Elasticsearch.Net.MultiTermVectorsRequestParameters,Elasticsearch.Net.MultiTermVectorsRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_mtermvectors
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-termvectors.html</para>	
            </summary>
            <param name="index">The index in which the document resides.</param>
            <param name="type">The type of the document.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.Mtermvectors``1(System.Object,System.Func{Elasticsearch.Net.MultiTermVectorsRequestParameters,Elasticsearch.Net.MultiTermVectorsRequestParameters})">
            <summary>Represents a POST on /_mtermvectors
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-termvectors.html</para>	
            </summary>
            <param name="body">Define ids, parameters or a list of parameters per document here. You must at least provide a list of document ids. See documentation.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.MtermvectorsAsync``1(System.Object,System.Func{Elasticsearch.Net.MultiTermVectorsRequestParameters,Elasticsearch.Net.MultiTermVectorsRequestParameters})">
            <summary>Represents a POST on /_mtermvectors
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-termvectors.html</para>	
            </summary>
            <param name="body">Define ids, parameters or a list of parameters per document here. You must at least provide a list of document ids. See documentation.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.Mtermvectors(System.Object,System.Func{Elasticsearch.Net.MultiTermVectorsRequestParameters,Elasticsearch.Net.MultiTermVectorsRequestParameters})">
            <summary>Represents a POST on /_mtermvectors
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-termvectors.html</para>	
            </summary>
            <param name="body">Define ids, parameters or a list of parameters per document here. You must at least provide a list of document ids. See documentation.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.MtermvectorsAsync(System.Object,System.Func{Elasticsearch.Net.MultiTermVectorsRequestParameters,Elasticsearch.Net.MultiTermVectorsRequestParameters})">
            <summary>Represents a POST on /_mtermvectors
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-termvectors.html</para>	
            </summary>
            <param name="body">Define ids, parameters or a list of parameters per document here. You must at least provide a list of document ids. See documentation.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.Mtermvectors``1(System.String,System.Object,System.Func{Elasticsearch.Net.MultiTermVectorsRequestParameters,Elasticsearch.Net.MultiTermVectorsRequestParameters})">
            <summary>Represents a POST on /{index}/_mtermvectors
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-termvectors.html</para>	
            </summary>
            <param name="index">The index in which the document resides.</param>
            <param name="body">Define ids, parameters or a list of parameters per document here. You must at least provide a list of document ids. See documentation.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.MtermvectorsAsync``1(System.String,System.Object,System.Func{Elasticsearch.Net.MultiTermVectorsRequestParameters,Elasticsearch.Net.MultiTermVectorsRequestParameters})">
            <summary>Represents a POST on /{index}/_mtermvectors
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-termvectors.html</para>	
            </summary>
            <param name="index">The index in which the document resides.</param>
            <param name="body">Define ids, parameters or a list of parameters per document here. You must at least provide a list of document ids. See documentation.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.Mtermvectors(System.String,System.Object,System.Func{Elasticsearch.Net.MultiTermVectorsRequestParameters,Elasticsearch.Net.MultiTermVectorsRequestParameters})">
            <summary>Represents a POST on /{index}/_mtermvectors
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-termvectors.html</para>	
            </summary>
            <param name="index">The index in which the document resides.</param>
            <param name="body">Define ids, parameters or a list of parameters per document here. You must at least provide a list of document ids. See documentation.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.MtermvectorsAsync(System.String,System.Object,System.Func{Elasticsearch.Net.MultiTermVectorsRequestParameters,Elasticsearch.Net.MultiTermVectorsRequestParameters})">
            <summary>Represents a POST on /{index}/_mtermvectors
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-termvectors.html</para>	
            </summary>
            <param name="index">The index in which the document resides.</param>
            <param name="body">Define ids, parameters or a list of parameters per document here. You must at least provide a list of document ids. See documentation.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.Mtermvectors``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.MultiTermVectorsRequestParameters,Elasticsearch.Net.MultiTermVectorsRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_mtermvectors
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-termvectors.html</para>	
            </summary>
            <param name="index">The index in which the document resides.</param>
            <param name="type">The type of the document.</param>
            <param name="body">Define ids, parameters or a list of parameters per document here. You must at least provide a list of document ids. See documentation.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.MtermvectorsAsync``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.MultiTermVectorsRequestParameters,Elasticsearch.Net.MultiTermVectorsRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_mtermvectors
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-termvectors.html</para>	
            </summary>
            <param name="index">The index in which the document resides.</param>
            <param name="type">The type of the document.</param>
            <param name="body">Define ids, parameters or a list of parameters per document here. You must at least provide a list of document ids. See documentation.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.Mtermvectors(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.MultiTermVectorsRequestParameters,Elasticsearch.Net.MultiTermVectorsRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_mtermvectors
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-termvectors.html</para>	
            </summary>
            <param name="index">The index in which the document resides.</param>
            <param name="type">The type of the document.</param>
            <param name="body">Define ids, parameters or a list of parameters per document here. You must at least provide a list of document ids. See documentation.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.MtermvectorsAsync(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.MultiTermVectorsRequestParameters,Elasticsearch.Net.MultiTermVectorsRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_mtermvectors
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-termvectors.html</para>	
            </summary>
            <param name="index">The index in which the document resides.</param>
            <param name="type">The type of the document.</param>
            <param name="body">Define ids, parameters or a list of parameters per document here. You must at least provide a list of document ids. See documentation.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.NodesHotThreadsForAll``1(System.Func{Elasticsearch.Net.NodesHotThreadsRequestParameters,Elasticsearch.Net.NodesHotThreadsRequestParameters})">
            <summary>Represents a GET on /_cluster/nodes/hotthreads
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-hot-threads.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.NodesHotThreadsForAllAsync``1(System.Func{Elasticsearch.Net.NodesHotThreadsRequestParameters,Elasticsearch.Net.NodesHotThreadsRequestParameters})">
            <summary>Represents a GET on /_cluster/nodes/hotthreads
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-hot-threads.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.NodesHotThreadsForAll(System.Func{Elasticsearch.Net.NodesHotThreadsRequestParameters,Elasticsearch.Net.NodesHotThreadsRequestParameters})">
            <summary>Represents a GET on /_cluster/nodes/hotthreads
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-hot-threads.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.NodesHotThreadsForAllAsync(System.Func{Elasticsearch.Net.NodesHotThreadsRequestParameters,Elasticsearch.Net.NodesHotThreadsRequestParameters})">
            <summary>Represents a GET on /_cluster/nodes/hotthreads
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-hot-threads.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.NodesHotThreads``1(System.String,System.Func{Elasticsearch.Net.NodesHotThreadsRequestParameters,Elasticsearch.Net.NodesHotThreadsRequestParameters})">
            <summary>Represents a GET on /_cluster/nodes/{node_id}/hotthreads
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-hot-threads.html</para>	
            </summary>
            <param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.NodesHotThreadsAsync``1(System.String,System.Func{Elasticsearch.Net.NodesHotThreadsRequestParameters,Elasticsearch.Net.NodesHotThreadsRequestParameters})">
            <summary>Represents a GET on /_cluster/nodes/{node_id}/hotthreads
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-hot-threads.html</para>	
            </summary>
            <param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.NodesHotThreads(System.String,System.Func{Elasticsearch.Net.NodesHotThreadsRequestParameters,Elasticsearch.Net.NodesHotThreadsRequestParameters})">
            <summary>Represents a GET on /_cluster/nodes/{node_id}/hotthreads
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-hot-threads.html</para>	
            </summary>
            <param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.NodesHotThreadsAsync(System.String,System.Func{Elasticsearch.Net.NodesHotThreadsRequestParameters,Elasticsearch.Net.NodesHotThreadsRequestParameters})">
            <summary>Represents a GET on /_cluster/nodes/{node_id}/hotthreads
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-hot-threads.html</para>	
            </summary>
            <param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.NodesInfoForAll``1(System.Func{Elasticsearch.Net.NodesInfoRequestParameters,Elasticsearch.Net.NodesInfoRequestParameters})">
            <summary>Represents a GET on /_nodes
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-info.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.NodesInfoForAllAsync``1(System.Func{Elasticsearch.Net.NodesInfoRequestParameters,Elasticsearch.Net.NodesInfoRequestParameters})">
            <summary>Represents a GET on /_nodes
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-info.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.NodesInfoForAll(System.Func{Elasticsearch.Net.NodesInfoRequestParameters,Elasticsearch.Net.NodesInfoRequestParameters})">
            <summary>Represents a GET on /_nodes
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-info.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.NodesInfoForAllAsync(System.Func{Elasticsearch.Net.NodesInfoRequestParameters,Elasticsearch.Net.NodesInfoRequestParameters})">
            <summary>Represents a GET on /_nodes
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-info.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.NodesInfo``1(System.String,System.Func{Elasticsearch.Net.NodesInfoRequestParameters,Elasticsearch.Net.NodesInfoRequestParameters})">
            <summary>Represents a GET on /_nodes/{node_id}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-info.html</para>	
            </summary>
            <param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.NodesInfoAsync``1(System.String,System.Func{Elasticsearch.Net.NodesInfoRequestParameters,Elasticsearch.Net.NodesInfoRequestParameters})">
            <summary>Represents a GET on /_nodes/{node_id}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-info.html</para>	
            </summary>
            <param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.NodesInfo(System.String,System.Func{Elasticsearch.Net.NodesInfoRequestParameters,Elasticsearch.Net.NodesInfoRequestParameters})">
            <summary>Represents a GET on /_nodes/{node_id}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-info.html</para>	
            </summary>
            <param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.NodesInfoAsync(System.String,System.Func{Elasticsearch.Net.NodesInfoRequestParameters,Elasticsearch.Net.NodesInfoRequestParameters})">
            <summary>Represents a GET on /_nodes/{node_id}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-info.html</para>	
            </summary>
            <param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.NodesInfoForAll``1(System.String,System.Func{Elasticsearch.Net.NodesInfoRequestParameters,Elasticsearch.Net.NodesInfoRequestParameters})">
            <summary>Represents a GET on /_nodes/{metric}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-info.html</para>	
            </summary>
            <param name="metric">A comma-separated list of metrics you wish returned. Leave empty to return all.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.NodesInfoForAllAsync``1(System.String,System.Func{Elasticsearch.Net.NodesInfoRequestParameters,Elasticsearch.Net.NodesInfoRequestParameters})">
            <summary>Represents a GET on /_nodes/{metric}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-info.html</para>	
            </summary>
            <param name="metric">A comma-separated list of metrics you wish returned. Leave empty to return all.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.NodesInfoForAll(System.String,System.Func{Elasticsearch.Net.NodesInfoRequestParameters,Elasticsearch.Net.NodesInfoRequestParameters})">
            <summary>Represents a GET on /_nodes/{metric}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-info.html</para>	
            </summary>
            <param name="metric">A comma-separated list of metrics you wish returned. Leave empty to return all.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.NodesInfoForAllAsync(System.String,System.Func{Elasticsearch.Net.NodesInfoRequestParameters,Elasticsearch.Net.NodesInfoRequestParameters})">
            <summary>Represents a GET on /_nodes/{metric}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-info.html</para>	
            </summary>
            <param name="metric">A comma-separated list of metrics you wish returned. Leave empty to return all.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.NodesInfo``1(System.String,System.String,System.Func{Elasticsearch.Net.NodesInfoRequestParameters,Elasticsearch.Net.NodesInfoRequestParameters})">
            <summary>Represents a GET on /_nodes/{node_id}/{metric}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-info.html</para>	
            </summary>
            <param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
            <param name="metric">A comma-separated list of metrics you wish returned. Leave empty to return all.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.NodesInfoAsync``1(System.String,System.String,System.Func{Elasticsearch.Net.NodesInfoRequestParameters,Elasticsearch.Net.NodesInfoRequestParameters})">
            <summary>Represents a GET on /_nodes/{node_id}/{metric}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-info.html</para>	
            </summary>
            <param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
            <param name="metric">A comma-separated list of metrics you wish returned. Leave empty to return all.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.NodesInfo(System.String,System.String,System.Func{Elasticsearch.Net.NodesInfoRequestParameters,Elasticsearch.Net.NodesInfoRequestParameters})">
            <summary>Represents a GET on /_nodes/{node_id}/{metric}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-info.html</para>	
            </summary>
            <param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
            <param name="metric">A comma-separated list of metrics you wish returned. Leave empty to return all.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.NodesInfoAsync(System.String,System.String,System.Func{Elasticsearch.Net.NodesInfoRequestParameters,Elasticsearch.Net.NodesInfoRequestParameters})">
            <summary>Represents a GET on /_nodes/{node_id}/{metric}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-info.html</para>	
            </summary>
            <param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
            <param name="metric">A comma-separated list of metrics you wish returned. Leave empty to return all.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.NodesShutdownForAll``1(System.Func{Elasticsearch.Net.NodesShutdownRequestParameters,Elasticsearch.Net.NodesShutdownRequestParameters})">
            <summary>Represents a POST on /_shutdown
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-shutdown.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.NodesShutdownForAllAsync``1(System.Func{Elasticsearch.Net.NodesShutdownRequestParameters,Elasticsearch.Net.NodesShutdownRequestParameters})">
            <summary>Represents a POST on /_shutdown
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-shutdown.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.NodesShutdownForAll(System.Func{Elasticsearch.Net.NodesShutdownRequestParameters,Elasticsearch.Net.NodesShutdownRequestParameters})">
            <summary>Represents a POST on /_shutdown
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-shutdown.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.NodesShutdownForAllAsync(System.Func{Elasticsearch.Net.NodesShutdownRequestParameters,Elasticsearch.Net.NodesShutdownRequestParameters})">
            <summary>Represents a POST on /_shutdown
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-shutdown.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.NodesShutdown``1(System.String,System.Func{Elasticsearch.Net.NodesShutdownRequestParameters,Elasticsearch.Net.NodesShutdownRequestParameters})">
            <summary>Represents a POST on /_cluster/nodes/{node_id}/_shutdown
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-shutdown.html</para>	
            </summary>
            <param name="node_id">A comma-separated list of node IDs or names to perform the operation on; use `_local` to perform the operation on the node you&#39;re connected to, leave empty to perform the operation on all nodes</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.NodesShutdownAsync``1(System.String,System.Func{Elasticsearch.Net.NodesShutdownRequestParameters,Elasticsearch.Net.NodesShutdownRequestParameters})">
            <summary>Represents a POST on /_cluster/nodes/{node_id}/_shutdown
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-shutdown.html</para>	
            </summary>
            <param name="node_id">A comma-separated list of node IDs or names to perform the operation on; use `_local` to perform the operation on the node you&#39;re connected to, leave empty to perform the operation on all nodes</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.NodesShutdown(System.String,System.Func{Elasticsearch.Net.NodesShutdownRequestParameters,Elasticsearch.Net.NodesShutdownRequestParameters})">
            <summary>Represents a POST on /_cluster/nodes/{node_id}/_shutdown
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-shutdown.html</para>	
            </summary>
            <param name="node_id">A comma-separated list of node IDs or names to perform the operation on; use `_local` to perform the operation on the node you&#39;re connected to, leave empty to perform the operation on all nodes</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.NodesShutdownAsync(System.String,System.Func{Elasticsearch.Net.NodesShutdownRequestParameters,Elasticsearch.Net.NodesShutdownRequestParameters})">
            <summary>Represents a POST on /_cluster/nodes/{node_id}/_shutdown
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-shutdown.html</para>	
            </summary>
            <param name="node_id">A comma-separated list of node IDs or names to perform the operation on; use `_local` to perform the operation on the node you&#39;re connected to, leave empty to perform the operation on all nodes</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.NodesStatsForAll``1(System.Func{Elasticsearch.Net.NodesStatsRequestParameters,Elasticsearch.Net.NodesStatsRequestParameters})">
            <summary>Represents a GET on /_nodes/stats
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-stats.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.NodesStatsForAllAsync``1(System.Func{Elasticsearch.Net.NodesStatsRequestParameters,Elasticsearch.Net.NodesStatsRequestParameters})">
            <summary>Represents a GET on /_nodes/stats
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-stats.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.NodesStatsForAll(System.Func{Elasticsearch.Net.NodesStatsRequestParameters,Elasticsearch.Net.NodesStatsRequestParameters})">
            <summary>Represents a GET on /_nodes/stats
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-stats.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.NodesStatsForAllAsync(System.Func{Elasticsearch.Net.NodesStatsRequestParameters,Elasticsearch.Net.NodesStatsRequestParameters})">
            <summary>Represents a GET on /_nodes/stats
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-stats.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.NodesStats``1(System.String,System.Func{Elasticsearch.Net.NodesStatsRequestParameters,Elasticsearch.Net.NodesStatsRequestParameters})">
            <summary>Represents a GET on /_nodes/{node_id}/stats
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-stats.html</para>	
            </summary>
            <param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.NodesStatsAsync``1(System.String,System.Func{Elasticsearch.Net.NodesStatsRequestParameters,Elasticsearch.Net.NodesStatsRequestParameters})">
            <summary>Represents a GET on /_nodes/{node_id}/stats
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-stats.html</para>	
            </summary>
            <param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.NodesStats(System.String,System.Func{Elasticsearch.Net.NodesStatsRequestParameters,Elasticsearch.Net.NodesStatsRequestParameters})">
            <summary>Represents a GET on /_nodes/{node_id}/stats
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-stats.html</para>	
            </summary>
            <param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.NodesStatsAsync(System.String,System.Func{Elasticsearch.Net.NodesStatsRequestParameters,Elasticsearch.Net.NodesStatsRequestParameters})">
            <summary>Represents a GET on /_nodes/{node_id}/stats
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-stats.html</para>	
            </summary>
            <param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.NodesStatsForAll``1(System.String,System.Func{Elasticsearch.Net.NodesStatsRequestParameters,Elasticsearch.Net.NodesStatsRequestParameters})">
            <summary>Represents a GET on /_nodes/stats/{metric}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-stats.html</para>	
            </summary>
            <param name="metric">Limit the information returned to the specified metrics</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.NodesStatsForAllAsync``1(System.String,System.Func{Elasticsearch.Net.NodesStatsRequestParameters,Elasticsearch.Net.NodesStatsRequestParameters})">
            <summary>Represents a GET on /_nodes/stats/{metric}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-stats.html</para>	
            </summary>
            <param name="metric">Limit the information returned to the specified metrics</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.NodesStatsForAll(System.String,System.Func{Elasticsearch.Net.NodesStatsRequestParameters,Elasticsearch.Net.NodesStatsRequestParameters})">
            <summary>Represents a GET on /_nodes/stats/{metric}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-stats.html</para>	
            </summary>
            <param name="metric">Limit the information returned to the specified metrics</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.NodesStatsForAllAsync(System.String,System.Func{Elasticsearch.Net.NodesStatsRequestParameters,Elasticsearch.Net.NodesStatsRequestParameters})">
            <summary>Represents a GET on /_nodes/stats/{metric}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-stats.html</para>	
            </summary>
            <param name="metric">Limit the information returned to the specified metrics</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.NodesStats``1(System.String,System.String,System.Func{Elasticsearch.Net.NodesStatsRequestParameters,Elasticsearch.Net.NodesStatsRequestParameters})">
            <summary>Represents a GET on /_nodes/{node_id}/stats/{metric}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-stats.html</para>	
            </summary>
            <param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
            <param name="metric">Limit the information returned to the specified metrics</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.NodesStatsAsync``1(System.String,System.String,System.Func{Elasticsearch.Net.NodesStatsRequestParameters,Elasticsearch.Net.NodesStatsRequestParameters})">
            <summary>Represents a GET on /_nodes/{node_id}/stats/{metric}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-stats.html</para>	
            </summary>
            <param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
            <param name="metric">Limit the information returned to the specified metrics</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.NodesStats(System.String,System.String,System.Func{Elasticsearch.Net.NodesStatsRequestParameters,Elasticsearch.Net.NodesStatsRequestParameters})">
            <summary>Represents a GET on /_nodes/{node_id}/stats/{metric}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-stats.html</para>	
            </summary>
            <param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
            <param name="metric">Limit the information returned to the specified metrics</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.NodesStatsAsync(System.String,System.String,System.Func{Elasticsearch.Net.NodesStatsRequestParameters,Elasticsearch.Net.NodesStatsRequestParameters})">
            <summary>Represents a GET on /_nodes/{node_id}/stats/{metric}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-stats.html</para>	
            </summary>
            <param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
            <param name="metric">Limit the information returned to the specified metrics</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.NodesStatsForAll``1(System.String,System.String,System.Func{Elasticsearch.Net.NodesStatsRequestParameters,Elasticsearch.Net.NodesStatsRequestParameters})">
            <summary>Represents a GET on /_nodes/stats/{metric}/{index_metric}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-stats.html</para>	
            </summary>
            <param name="metric">Limit the information returned to the specified metrics</param>
            <param name="index_metric">Limit the information returned for `indices` metric to the specific index metrics. Isn&#39;t used if `indices` (or `all`) metric isn&#39;t specified.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.NodesStatsForAllAsync``1(System.String,System.String,System.Func{Elasticsearch.Net.NodesStatsRequestParameters,Elasticsearch.Net.NodesStatsRequestParameters})">
            <summary>Represents a GET on /_nodes/stats/{metric}/{index_metric}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-stats.html</para>	
            </summary>
            <param name="metric">Limit the information returned to the specified metrics</param>
            <param name="index_metric">Limit the information returned for `indices` metric to the specific index metrics. Isn&#39;t used if `indices` (or `all`) metric isn&#39;t specified.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.NodesStatsForAll(System.String,System.String,System.Func{Elasticsearch.Net.NodesStatsRequestParameters,Elasticsearch.Net.NodesStatsRequestParameters})">
            <summary>Represents a GET on /_nodes/stats/{metric}/{index_metric}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-stats.html</para>	
            </summary>
            <param name="metric">Limit the information returned to the specified metrics</param>
            <param name="index_metric">Limit the information returned for `indices` metric to the specific index metrics. Isn&#39;t used if `indices` (or `all`) metric isn&#39;t specified.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.NodesStatsForAllAsync(System.String,System.String,System.Func{Elasticsearch.Net.NodesStatsRequestParameters,Elasticsearch.Net.NodesStatsRequestParameters})">
            <summary>Represents a GET on /_nodes/stats/{metric}/{index_metric}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-stats.html</para>	
            </summary>
            <param name="metric">Limit the information returned to the specified metrics</param>
            <param name="index_metric">Limit the information returned for `indices` metric to the specific index metrics. Isn&#39;t used if `indices` (or `all`) metric isn&#39;t specified.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.NodesStats``1(System.String,System.String,System.String,System.Func{Elasticsearch.Net.NodesStatsRequestParameters,Elasticsearch.Net.NodesStatsRequestParameters})">
            <summary>Represents a GET on /_nodes/{node_id}/stats/{metric}/{index_metric}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-stats.html</para>	
            </summary>
            <param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
            <param name="metric">Limit the information returned to the specified metrics</param>
            <param name="index_metric">Limit the information returned for `indices` metric to the specific index metrics. Isn&#39;t used if `indices` (or `all`) metric isn&#39;t specified.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.NodesStatsAsync``1(System.String,System.String,System.String,System.Func{Elasticsearch.Net.NodesStatsRequestParameters,Elasticsearch.Net.NodesStatsRequestParameters})">
            <summary>Represents a GET on /_nodes/{node_id}/stats/{metric}/{index_metric}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-stats.html</para>	
            </summary>
            <param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
            <param name="metric">Limit the information returned to the specified metrics</param>
            <param name="index_metric">Limit the information returned for `indices` metric to the specific index metrics. Isn&#39;t used if `indices` (or `all`) metric isn&#39;t specified.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.NodesStats(System.String,System.String,System.String,System.Func{Elasticsearch.Net.NodesStatsRequestParameters,Elasticsearch.Net.NodesStatsRequestParameters})">
            <summary>Represents a GET on /_nodes/{node_id}/stats/{metric}/{index_metric}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-stats.html</para>	
            </summary>
            <param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
            <param name="metric">Limit the information returned to the specified metrics</param>
            <param name="index_metric">Limit the information returned for `indices` metric to the specific index metrics. Isn&#39;t used if `indices` (or `all`) metric isn&#39;t specified.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.NodesStatsAsync(System.String,System.String,System.String,System.Func{Elasticsearch.Net.NodesStatsRequestParameters,Elasticsearch.Net.NodesStatsRequestParameters})">
            <summary>Represents a GET on /_nodes/{node_id}/stats/{metric}/{index_metric}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-stats.html</para>	
            </summary>
            <param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
            <param name="metric">Limit the information returned to the specified metrics</param>
            <param name="index_metric">Limit the information returned for `indices` metric to the specific index metrics. Isn&#39;t used if `indices` (or `all`) metric isn&#39;t specified.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.PercolateGet``1(System.String,System.String,System.Func{Elasticsearch.Net.PercolateRequestParameters,Elasticsearch.Net.PercolateRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_percolate
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being percolated.</param>
            <param name="type">The type of the document being percolated.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.PercolateGetAsync``1(System.String,System.String,System.Func{Elasticsearch.Net.PercolateRequestParameters,Elasticsearch.Net.PercolateRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_percolate
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being percolated.</param>
            <param name="type">The type of the document being percolated.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.PercolateGet(System.String,System.String,System.Func{Elasticsearch.Net.PercolateRequestParameters,Elasticsearch.Net.PercolateRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_percolate
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being percolated.</param>
            <param name="type">The type of the document being percolated.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.PercolateGetAsync(System.String,System.String,System.Func{Elasticsearch.Net.PercolateRequestParameters,Elasticsearch.Net.PercolateRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_percolate
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being percolated.</param>
            <param name="type">The type of the document being percolated.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.PercolateGet``1(System.String,System.String,System.String,System.Func{Elasticsearch.Net.PercolateRequestParameters,Elasticsearch.Net.PercolateRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/{id}/_percolate
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being percolated.</param>
            <param name="type">The type of the document being percolated.</param>
            <param name="id">Substitute the document in the request body with a document that is known by the specified id. On top of the id, the index and type parameter will be used to retrieve the document from within the cluster.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.PercolateGetAsync``1(System.String,System.String,System.String,System.Func{Elasticsearch.Net.PercolateRequestParameters,Elasticsearch.Net.PercolateRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/{id}/_percolate
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being percolated.</param>
            <param name="type">The type of the document being percolated.</param>
            <param name="id">Substitute the document in the request body with a document that is known by the specified id. On top of the id, the index and type parameter will be used to retrieve the document from within the cluster.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.PercolateGet(System.String,System.String,System.String,System.Func{Elasticsearch.Net.PercolateRequestParameters,Elasticsearch.Net.PercolateRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/{id}/_percolate
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being percolated.</param>
            <param name="type">The type of the document being percolated.</param>
            <param name="id">Substitute the document in the request body with a document that is known by the specified id. On top of the id, the index and type parameter will be used to retrieve the document from within the cluster.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.PercolateGetAsync(System.String,System.String,System.String,System.Func{Elasticsearch.Net.PercolateRequestParameters,Elasticsearch.Net.PercolateRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/{id}/_percolate
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being percolated.</param>
            <param name="type">The type of the document being percolated.</param>
            <param name="id">Substitute the document in the request body with a document that is known by the specified id. On top of the id, the index and type parameter will be used to retrieve the document from within the cluster.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.Percolate``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.PercolateRequestParameters,Elasticsearch.Net.PercolateRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_percolate
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being percolated.</param>
            <param name="type">The type of the document being percolated.</param>
            <param name="body">The percolator request definition using the percolate DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.PercolateAsync``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.PercolateRequestParameters,Elasticsearch.Net.PercolateRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_percolate
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being percolated.</param>
            <param name="type">The type of the document being percolated.</param>
            <param name="body">The percolator request definition using the percolate DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.Percolate(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.PercolateRequestParameters,Elasticsearch.Net.PercolateRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_percolate
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being percolated.</param>
            <param name="type">The type of the document being percolated.</param>
            <param name="body">The percolator request definition using the percolate DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.PercolateAsync(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.PercolateRequestParameters,Elasticsearch.Net.PercolateRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_percolate
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being percolated.</param>
            <param name="type">The type of the document being percolated.</param>
            <param name="body">The percolator request definition using the percolate DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.Percolate``1(System.String,System.String,System.String,System.Object,System.Func{Elasticsearch.Net.PercolateRequestParameters,Elasticsearch.Net.PercolateRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/{id}/_percolate
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being percolated.</param>
            <param name="type">The type of the document being percolated.</param>
            <param name="id">Substitute the document in the request body with a document that is known by the specified id. On top of the id, the index and type parameter will be used to retrieve the document from within the cluster.</param>
            <param name="body">The percolator request definition using the percolate DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.PercolateAsync``1(System.String,System.String,System.String,System.Object,System.Func{Elasticsearch.Net.PercolateRequestParameters,Elasticsearch.Net.PercolateRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/{id}/_percolate
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being percolated.</param>
            <param name="type">The type of the document being percolated.</param>
            <param name="id">Substitute the document in the request body with a document that is known by the specified id. On top of the id, the index and type parameter will be used to retrieve the document from within the cluster.</param>
            <param name="body">The percolator request definition using the percolate DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.Percolate(System.String,System.String,System.String,System.Object,System.Func{Elasticsearch.Net.PercolateRequestParameters,Elasticsearch.Net.PercolateRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/{id}/_percolate
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being percolated.</param>
            <param name="type">The type of the document being percolated.</param>
            <param name="id">Substitute the document in the request body with a document that is known by the specified id. On top of the id, the index and type parameter will be used to retrieve the document from within the cluster.</param>
            <param name="body">The percolator request definition using the percolate DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.PercolateAsync(System.String,System.String,System.String,System.Object,System.Func{Elasticsearch.Net.PercolateRequestParameters,Elasticsearch.Net.PercolateRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/{id}/_percolate
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html</para>	
            </summary>
            <param name="index">The index of the document being percolated.</param>
            <param name="type">The type of the document being percolated.</param>
            <param name="id">Substitute the document in the request body with a document that is known by the specified id. On top of the id, the index and type parameter will be used to retrieve the document from within the cluster.</param>
            <param name="body">The percolator request definition using the percolate DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.Ping``1(System.Func{Elasticsearch.Net.PingRequestParameters,Elasticsearch.Net.PingRequestParameters})">
            <summary>Represents a HEAD on /
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.PingAsync``1(System.Func{Elasticsearch.Net.PingRequestParameters,Elasticsearch.Net.PingRequestParameters})">
            <summary>Represents a HEAD on /
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.Ping(System.Func{Elasticsearch.Net.PingRequestParameters,Elasticsearch.Net.PingRequestParameters})">
            <summary>Represents a HEAD on /
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.PingAsync(System.Func{Elasticsearch.Net.PingRequestParameters,Elasticsearch.Net.PingRequestParameters})">
            <summary>Represents a HEAD on /
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.ScrollGet``1(System.Func{Elasticsearch.Net.ScrollRequestParameters,Elasticsearch.Net.ScrollRequestParameters})">
            <summary>Represents a GET on /_search/scroll
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-request-scroll.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.ScrollGetAsync``1(System.Func{Elasticsearch.Net.ScrollRequestParameters,Elasticsearch.Net.ScrollRequestParameters})">
            <summary>Represents a GET on /_search/scroll
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-request-scroll.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.ScrollGet(System.Func{Elasticsearch.Net.ScrollRequestParameters,Elasticsearch.Net.ScrollRequestParameters})">
            <summary>Represents a GET on /_search/scroll
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-request-scroll.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.ScrollGetAsync(System.Func{Elasticsearch.Net.ScrollRequestParameters,Elasticsearch.Net.ScrollRequestParameters})">
            <summary>Represents a GET on /_search/scroll
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-request-scroll.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.ScrollGet``1(System.String,System.Func{Elasticsearch.Net.ScrollRequestParameters,Elasticsearch.Net.ScrollRequestParameters})">
            <summary>Represents a GET on /_search/scroll/{scroll_id}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-request-scroll.html</para>	
            </summary>
            <param name="scroll_id">The scroll ID</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.ScrollGetAsync``1(System.String,System.Func{Elasticsearch.Net.ScrollRequestParameters,Elasticsearch.Net.ScrollRequestParameters})">
            <summary>Represents a GET on /_search/scroll/{scroll_id}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-request-scroll.html</para>	
            </summary>
            <param name="scroll_id">The scroll ID</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.ScrollGet(System.String,System.Func{Elasticsearch.Net.ScrollRequestParameters,Elasticsearch.Net.ScrollRequestParameters})">
            <summary>Represents a GET on /_search/scroll/{scroll_id}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-request-scroll.html</para>	
            </summary>
            <param name="scroll_id">The scroll ID</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.ScrollGetAsync(System.String,System.Func{Elasticsearch.Net.ScrollRequestParameters,Elasticsearch.Net.ScrollRequestParameters})">
            <summary>Represents a GET on /_search/scroll/{scroll_id}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-request-scroll.html</para>	
            </summary>
            <param name="scroll_id">The scroll ID</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.Scroll``1(System.Object,System.Func{Elasticsearch.Net.ScrollRequestParameters,Elasticsearch.Net.ScrollRequestParameters})">
            <summary>Represents a POST on /_search/scroll
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-request-scroll.html</para>	
            </summary>
            <param name="body">The scroll ID if not passed by URL or query parameter.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.ScrollAsync``1(System.Object,System.Func{Elasticsearch.Net.ScrollRequestParameters,Elasticsearch.Net.ScrollRequestParameters})">
            <summary>Represents a POST on /_search/scroll
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-request-scroll.html</para>	
            </summary>
            <param name="body">The scroll ID if not passed by URL or query parameter.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.Scroll(System.Object,System.Func{Elasticsearch.Net.ScrollRequestParameters,Elasticsearch.Net.ScrollRequestParameters})">
            <summary>Represents a POST on /_search/scroll
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-request-scroll.html</para>	
            </summary>
            <param name="body">The scroll ID if not passed by URL or query parameter.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.ScrollAsync(System.Object,System.Func{Elasticsearch.Net.ScrollRequestParameters,Elasticsearch.Net.ScrollRequestParameters})">
            <summary>Represents a POST on /_search/scroll
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-request-scroll.html</para>	
            </summary>
            <param name="body">The scroll ID if not passed by URL or query parameter.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.Scroll``1(System.String,System.Object,System.Func{Elasticsearch.Net.ScrollRequestParameters,Elasticsearch.Net.ScrollRequestParameters})">
            <summary>Represents a POST on /_search/scroll/{scroll_id}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-request-scroll.html</para>	
            </summary>
            <param name="scroll_id">The scroll ID</param>
            <param name="body">The scroll ID if not passed by URL or query parameter.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.ScrollAsync``1(System.String,System.Object,System.Func{Elasticsearch.Net.ScrollRequestParameters,Elasticsearch.Net.ScrollRequestParameters})">
            <summary>Represents a POST on /_search/scroll/{scroll_id}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-request-scroll.html</para>	
            </summary>
            <param name="scroll_id">The scroll ID</param>
            <param name="body">The scroll ID if not passed by URL or query parameter.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.Scroll(System.String,System.Object,System.Func{Elasticsearch.Net.ScrollRequestParameters,Elasticsearch.Net.ScrollRequestParameters})">
            <summary>Represents a POST on /_search/scroll/{scroll_id}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-request-scroll.html</para>	
            </summary>
            <param name="scroll_id">The scroll ID</param>
            <param name="body">The scroll ID if not passed by URL or query parameter.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.ScrollAsync(System.String,System.Object,System.Func{Elasticsearch.Net.ScrollRequestParameters,Elasticsearch.Net.ScrollRequestParameters})">
            <summary>Represents a POST on /_search/scroll/{scroll_id}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-request-scroll.html</para>	
            </summary>
            <param name="scroll_id">The scroll ID</param>
            <param name="body">The scroll ID if not passed by URL or query parameter.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SearchGet``1(System.Func{Elasticsearch.Net.SearchRequestParameters,Elasticsearch.Net.SearchRequestParameters})">
            <summary>Represents a GET on /_search
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-search.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SearchGetAsync``1(System.Func{Elasticsearch.Net.SearchRequestParameters,Elasticsearch.Net.SearchRequestParameters})">
            <summary>Represents a GET on /_search
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-search.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SearchGet(System.Func{Elasticsearch.Net.SearchRequestParameters,Elasticsearch.Net.SearchRequestParameters})">
            <summary>Represents a GET on /_search
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-search.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SearchGetAsync(System.Func{Elasticsearch.Net.SearchRequestParameters,Elasticsearch.Net.SearchRequestParameters})">
            <summary>Represents a GET on /_search
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-search.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SearchGet``1(System.String,System.Func{Elasticsearch.Net.SearchRequestParameters,Elasticsearch.Net.SearchRequestParameters})">
            <summary>Represents a GET on /{index}/_search
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-search.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SearchGetAsync``1(System.String,System.Func{Elasticsearch.Net.SearchRequestParameters,Elasticsearch.Net.SearchRequestParameters})">
            <summary>Represents a GET on /{index}/_search
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-search.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SearchGet(System.String,System.Func{Elasticsearch.Net.SearchRequestParameters,Elasticsearch.Net.SearchRequestParameters})">
            <summary>Represents a GET on /{index}/_search
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-search.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SearchGetAsync(System.String,System.Func{Elasticsearch.Net.SearchRequestParameters,Elasticsearch.Net.SearchRequestParameters})">
            <summary>Represents a GET on /{index}/_search
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-search.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SearchGet``1(System.String,System.String,System.Func{Elasticsearch.Net.SearchRequestParameters,Elasticsearch.Net.SearchRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_search
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-search.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
            <param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SearchGetAsync``1(System.String,System.String,System.Func{Elasticsearch.Net.SearchRequestParameters,Elasticsearch.Net.SearchRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_search
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-search.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
            <param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SearchGet(System.String,System.String,System.Func{Elasticsearch.Net.SearchRequestParameters,Elasticsearch.Net.SearchRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_search
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-search.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
            <param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SearchGetAsync(System.String,System.String,System.Func{Elasticsearch.Net.SearchRequestParameters,Elasticsearch.Net.SearchRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_search
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-search.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
            <param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.Search``1(System.Object,System.Func{Elasticsearch.Net.SearchRequestParameters,Elasticsearch.Net.SearchRequestParameters})">
            <summary>Represents a POST on /_search
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-search.html</para>	
            </summary>
            <param name="body">The search definition using the Query DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SearchAsync``1(System.Object,System.Func{Elasticsearch.Net.SearchRequestParameters,Elasticsearch.Net.SearchRequestParameters})">
            <summary>Represents a POST on /_search
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-search.html</para>	
            </summary>
            <param name="body">The search definition using the Query DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.Search(System.Object,System.Func{Elasticsearch.Net.SearchRequestParameters,Elasticsearch.Net.SearchRequestParameters})">
            <summary>Represents a POST on /_search
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-search.html</para>	
            </summary>
            <param name="body">The search definition using the Query DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SearchAsync(System.Object,System.Func{Elasticsearch.Net.SearchRequestParameters,Elasticsearch.Net.SearchRequestParameters})">
            <summary>Represents a POST on /_search
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-search.html</para>	
            </summary>
            <param name="body">The search definition using the Query DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.Search``1(System.String,System.Object,System.Func{Elasticsearch.Net.SearchRequestParameters,Elasticsearch.Net.SearchRequestParameters})">
            <summary>Represents a POST on /{index}/_search
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-search.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
            <param name="body">The search definition using the Query DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SearchAsync``1(System.String,System.Object,System.Func{Elasticsearch.Net.SearchRequestParameters,Elasticsearch.Net.SearchRequestParameters})">
            <summary>Represents a POST on /{index}/_search
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-search.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
            <param name="body">The search definition using the Query DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.Search(System.String,System.Object,System.Func{Elasticsearch.Net.SearchRequestParameters,Elasticsearch.Net.SearchRequestParameters})">
            <summary>Represents a POST on /{index}/_search
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-search.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
            <param name="body">The search definition using the Query DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SearchAsync(System.String,System.Object,System.Func{Elasticsearch.Net.SearchRequestParameters,Elasticsearch.Net.SearchRequestParameters})">
            <summary>Represents a POST on /{index}/_search
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-search.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
            <param name="body">The search definition using the Query DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.Search``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.SearchRequestParameters,Elasticsearch.Net.SearchRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_search
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-search.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
            <param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
            <param name="body">The search definition using the Query DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SearchAsync``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.SearchRequestParameters,Elasticsearch.Net.SearchRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_search
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-search.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
            <param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
            <param name="body">The search definition using the Query DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.Search(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.SearchRequestParameters,Elasticsearch.Net.SearchRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_search
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-search.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
            <param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
            <param name="body">The search definition using the Query DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SearchAsync(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.SearchRequestParameters,Elasticsearch.Net.SearchRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_search
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-search.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
            <param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
            <param name="body">The search definition using the Query DSL</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SearchShardsGet``1(System.Func{Elasticsearch.Net.SearchShardsRequestParameters,Elasticsearch.Net.SearchShardsRequestParameters})">
            <summary>Represents a GET on /_search_shards
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-shards.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SearchShardsGetAsync``1(System.Func{Elasticsearch.Net.SearchShardsRequestParameters,Elasticsearch.Net.SearchShardsRequestParameters})">
            <summary>Represents a GET on /_search_shards
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-shards.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SearchShardsGet(System.Func{Elasticsearch.Net.SearchShardsRequestParameters,Elasticsearch.Net.SearchShardsRequestParameters})">
            <summary>Represents a GET on /_search_shards
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-shards.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SearchShardsGetAsync(System.Func{Elasticsearch.Net.SearchShardsRequestParameters,Elasticsearch.Net.SearchShardsRequestParameters})">
            <summary>Represents a GET on /_search_shards
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-shards.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SearchShardsGet``1(System.String,System.Func{Elasticsearch.Net.SearchShardsRequestParameters,Elasticsearch.Net.SearchShardsRequestParameters})">
            <summary>Represents a GET on /{index}/_search_shards
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-shards.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SearchShardsGetAsync``1(System.String,System.Func{Elasticsearch.Net.SearchShardsRequestParameters,Elasticsearch.Net.SearchShardsRequestParameters})">
            <summary>Represents a GET on /{index}/_search_shards
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-shards.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SearchShardsGet(System.String,System.Func{Elasticsearch.Net.SearchShardsRequestParameters,Elasticsearch.Net.SearchShardsRequestParameters})">
            <summary>Represents a GET on /{index}/_search_shards
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-shards.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SearchShardsGetAsync(System.String,System.Func{Elasticsearch.Net.SearchShardsRequestParameters,Elasticsearch.Net.SearchShardsRequestParameters})">
            <summary>Represents a GET on /{index}/_search_shards
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-shards.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SearchShardsGet``1(System.String,System.String,System.Func{Elasticsearch.Net.SearchShardsRequestParameters,Elasticsearch.Net.SearchShardsRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_search_shards
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-shards.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SearchShardsGetAsync``1(System.String,System.String,System.Func{Elasticsearch.Net.SearchShardsRequestParameters,Elasticsearch.Net.SearchShardsRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_search_shards
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-shards.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SearchShardsGet(System.String,System.String,System.Func{Elasticsearch.Net.SearchShardsRequestParameters,Elasticsearch.Net.SearchShardsRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_search_shards
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-shards.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SearchShardsGetAsync(System.String,System.String,System.Func{Elasticsearch.Net.SearchShardsRequestParameters,Elasticsearch.Net.SearchShardsRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_search_shards
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-shards.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SearchShards``1(System.Func{Elasticsearch.Net.SearchShardsRequestParameters,Elasticsearch.Net.SearchShardsRequestParameters})">
            <summary>Represents a POST on /_search_shards
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-shards.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SearchShardsAsync``1(System.Func{Elasticsearch.Net.SearchShardsRequestParameters,Elasticsearch.Net.SearchShardsRequestParameters})">
            <summary>Represents a POST on /_search_shards
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-shards.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SearchShards(System.Func{Elasticsearch.Net.SearchShardsRequestParameters,Elasticsearch.Net.SearchShardsRequestParameters})">
            <summary>Represents a POST on /_search_shards
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-shards.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SearchShardsAsync(System.Func{Elasticsearch.Net.SearchShardsRequestParameters,Elasticsearch.Net.SearchShardsRequestParameters})">
            <summary>Represents a POST on /_search_shards
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-shards.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SearchShards``1(System.String,System.Func{Elasticsearch.Net.SearchShardsRequestParameters,Elasticsearch.Net.SearchShardsRequestParameters})">
            <summary>Represents a POST on /{index}/_search_shards
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-shards.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SearchShardsAsync``1(System.String,System.Func{Elasticsearch.Net.SearchShardsRequestParameters,Elasticsearch.Net.SearchShardsRequestParameters})">
            <summary>Represents a POST on /{index}/_search_shards
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-shards.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SearchShards(System.String,System.Func{Elasticsearch.Net.SearchShardsRequestParameters,Elasticsearch.Net.SearchShardsRequestParameters})">
            <summary>Represents a POST on /{index}/_search_shards
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-shards.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SearchShardsAsync(System.String,System.Func{Elasticsearch.Net.SearchShardsRequestParameters,Elasticsearch.Net.SearchShardsRequestParameters})">
            <summary>Represents a POST on /{index}/_search_shards
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-shards.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SearchShards``1(System.String,System.String,System.Func{Elasticsearch.Net.SearchShardsRequestParameters,Elasticsearch.Net.SearchShardsRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_search_shards
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-shards.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SearchShardsAsync``1(System.String,System.String,System.Func{Elasticsearch.Net.SearchShardsRequestParameters,Elasticsearch.Net.SearchShardsRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_search_shards
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-shards.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SearchShards(System.String,System.String,System.Func{Elasticsearch.Net.SearchShardsRequestParameters,Elasticsearch.Net.SearchShardsRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_search_shards
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-shards.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SearchShardsAsync(System.String,System.String,System.Func{Elasticsearch.Net.SearchShardsRequestParameters,Elasticsearch.Net.SearchShardsRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_search_shards
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-shards.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SearchTemplateGet``1(System.Func{Elasticsearch.Net.SearchTemplateRequestParameters,Elasticsearch.Net.SearchTemplateRequestParameters})">
            <summary>Represents a GET on /_search/template
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-template.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SearchTemplateGetAsync``1(System.Func{Elasticsearch.Net.SearchTemplateRequestParameters,Elasticsearch.Net.SearchTemplateRequestParameters})">
            <summary>Represents a GET on /_search/template
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-template.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SearchTemplateGet(System.Func{Elasticsearch.Net.SearchTemplateRequestParameters,Elasticsearch.Net.SearchTemplateRequestParameters})">
            <summary>Represents a GET on /_search/template
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-template.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SearchTemplateGetAsync(System.Func{Elasticsearch.Net.SearchTemplateRequestParameters,Elasticsearch.Net.SearchTemplateRequestParameters})">
            <summary>Represents a GET on /_search/template
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-template.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SearchTemplateGet``1(System.String,System.Func{Elasticsearch.Net.SearchTemplateRequestParameters,Elasticsearch.Net.SearchTemplateRequestParameters})">
            <summary>Represents a GET on /{index}/_search/template
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-template.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SearchTemplateGetAsync``1(System.String,System.Func{Elasticsearch.Net.SearchTemplateRequestParameters,Elasticsearch.Net.SearchTemplateRequestParameters})">
            <summary>Represents a GET on /{index}/_search/template
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-template.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SearchTemplateGet(System.String,System.Func{Elasticsearch.Net.SearchTemplateRequestParameters,Elasticsearch.Net.SearchTemplateRequestParameters})">
            <summary>Represents a GET on /{index}/_search/template
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-template.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SearchTemplateGetAsync(System.String,System.Func{Elasticsearch.Net.SearchTemplateRequestParameters,Elasticsearch.Net.SearchTemplateRequestParameters})">
            <summary>Represents a GET on /{index}/_search/template
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-template.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SearchTemplateGet``1(System.String,System.String,System.Func{Elasticsearch.Net.SearchTemplateRequestParameters,Elasticsearch.Net.SearchTemplateRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_search/template
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-template.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
            <param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SearchTemplateGetAsync``1(System.String,System.String,System.Func{Elasticsearch.Net.SearchTemplateRequestParameters,Elasticsearch.Net.SearchTemplateRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_search/template
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-template.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
            <param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SearchTemplateGet(System.String,System.String,System.Func{Elasticsearch.Net.SearchTemplateRequestParameters,Elasticsearch.Net.SearchTemplateRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_search/template
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-template.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
            <param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SearchTemplateGetAsync(System.String,System.String,System.Func{Elasticsearch.Net.SearchTemplateRequestParameters,Elasticsearch.Net.SearchTemplateRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/_search/template
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-template.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
            <param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SearchTemplate``1(System.Object,System.Func{Elasticsearch.Net.SearchTemplateRequestParameters,Elasticsearch.Net.SearchTemplateRequestParameters})">
            <summary>Represents a POST on /_search/template
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-template.html</para>	
            </summary>
            <param name="body">The search definition template and its params</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SearchTemplateAsync``1(System.Object,System.Func{Elasticsearch.Net.SearchTemplateRequestParameters,Elasticsearch.Net.SearchTemplateRequestParameters})">
            <summary>Represents a POST on /_search/template
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-template.html</para>	
            </summary>
            <param name="body">The search definition template and its params</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SearchTemplate(System.Object,System.Func{Elasticsearch.Net.SearchTemplateRequestParameters,Elasticsearch.Net.SearchTemplateRequestParameters})">
            <summary>Represents a POST on /_search/template
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-template.html</para>	
            </summary>
            <param name="body">The search definition template and its params</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SearchTemplateAsync(System.Object,System.Func{Elasticsearch.Net.SearchTemplateRequestParameters,Elasticsearch.Net.SearchTemplateRequestParameters})">
            <summary>Represents a POST on /_search/template
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-template.html</para>	
            </summary>
            <param name="body">The search definition template and its params</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SearchTemplate``1(System.String,System.Object,System.Func{Elasticsearch.Net.SearchTemplateRequestParameters,Elasticsearch.Net.SearchTemplateRequestParameters})">
            <summary>Represents a POST on /{index}/_search/template
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-template.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
            <param name="body">The search definition template and its params</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SearchTemplateAsync``1(System.String,System.Object,System.Func{Elasticsearch.Net.SearchTemplateRequestParameters,Elasticsearch.Net.SearchTemplateRequestParameters})">
            <summary>Represents a POST on /{index}/_search/template
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-template.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
            <param name="body">The search definition template and its params</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SearchTemplate(System.String,System.Object,System.Func{Elasticsearch.Net.SearchTemplateRequestParameters,Elasticsearch.Net.SearchTemplateRequestParameters})">
            <summary>Represents a POST on /{index}/_search/template
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-template.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
            <param name="body">The search definition template and its params</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SearchTemplateAsync(System.String,System.Object,System.Func{Elasticsearch.Net.SearchTemplateRequestParameters,Elasticsearch.Net.SearchTemplateRequestParameters})">
            <summary>Represents a POST on /{index}/_search/template
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-template.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
            <param name="body">The search definition template and its params</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SearchTemplate``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.SearchTemplateRequestParameters,Elasticsearch.Net.SearchTemplateRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_search/template
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-template.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
            <param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
            <param name="body">The search definition template and its params</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SearchTemplateAsync``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.SearchTemplateRequestParameters,Elasticsearch.Net.SearchTemplateRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_search/template
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-template.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
            <param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
            <param name="body">The search definition template and its params</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SearchTemplate(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.SearchTemplateRequestParameters,Elasticsearch.Net.SearchTemplateRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_search/template
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-template.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
            <param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
            <param name="body">The search definition template and its params</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SearchTemplateAsync(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.SearchTemplateRequestParameters,Elasticsearch.Net.SearchTemplateRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/_search/template
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-template.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
            <param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
            <param name="body">The search definition template and its params</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SnapshotCreate``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.SnapshotRequestParameters,Elasticsearch.Net.SnapshotRequestParameters})">
            <summary>Represents a PUT on /_snapshot/{repository}/{snapshot}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html</para>	
            </summary>
            <param name="repository">A repository name</param>
            <param name="snapshot">A snapshot name</param>
            <param name="body">The snapshot definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SnapshotCreateAsync``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.SnapshotRequestParameters,Elasticsearch.Net.SnapshotRequestParameters})">
            <summary>Represents a PUT on /_snapshot/{repository}/{snapshot}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html</para>	
            </summary>
            <param name="repository">A repository name</param>
            <param name="snapshot">A snapshot name</param>
            <param name="body">The snapshot definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SnapshotCreate(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.SnapshotRequestParameters,Elasticsearch.Net.SnapshotRequestParameters})">
            <summary>Represents a PUT on /_snapshot/{repository}/{snapshot}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html</para>	
            </summary>
            <param name="repository">A repository name</param>
            <param name="snapshot">A snapshot name</param>
            <param name="body">The snapshot definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SnapshotCreateAsync(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.SnapshotRequestParameters,Elasticsearch.Net.SnapshotRequestParameters})">
            <summary>Represents a PUT on /_snapshot/{repository}/{snapshot}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html</para>	
            </summary>
            <param name="repository">A repository name</param>
            <param name="snapshot">A snapshot name</param>
            <param name="body">The snapshot definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SnapshotCreatePost``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.SnapshotRequestParameters,Elasticsearch.Net.SnapshotRequestParameters})">
            <summary>Represents a POST on /_snapshot/{repository}/{snapshot}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html</para>	
            </summary>
            <param name="repository">A repository name</param>
            <param name="snapshot">A snapshot name</param>
            <param name="body">The snapshot definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SnapshotCreatePostAsync``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.SnapshotRequestParameters,Elasticsearch.Net.SnapshotRequestParameters})">
            <summary>Represents a POST on /_snapshot/{repository}/{snapshot}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html</para>	
            </summary>
            <param name="repository">A repository name</param>
            <param name="snapshot">A snapshot name</param>
            <param name="body">The snapshot definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SnapshotCreatePost(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.SnapshotRequestParameters,Elasticsearch.Net.SnapshotRequestParameters})">
            <summary>Represents a POST on /_snapshot/{repository}/{snapshot}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html</para>	
            </summary>
            <param name="repository">A repository name</param>
            <param name="snapshot">A snapshot name</param>
            <param name="body">The snapshot definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SnapshotCreatePostAsync(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.SnapshotRequestParameters,Elasticsearch.Net.SnapshotRequestParameters})">
            <summary>Represents a POST on /_snapshot/{repository}/{snapshot}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html</para>	
            </summary>
            <param name="repository">A repository name</param>
            <param name="snapshot">A snapshot name</param>
            <param name="body">The snapshot definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SnapshotCreateRepository``1(System.String,System.Object,System.Func{Elasticsearch.Net.CreateRepositoryRequestParameters,Elasticsearch.Net.CreateRepositoryRequestParameters})">
            <summary>Represents a PUT on /_snapshot/{repository}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html</para>	
            </summary>
            <param name="repository">A repository name</param>
            <param name="body">The repository definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SnapshotCreateRepositoryAsync``1(System.String,System.Object,System.Func{Elasticsearch.Net.CreateRepositoryRequestParameters,Elasticsearch.Net.CreateRepositoryRequestParameters})">
            <summary>Represents a PUT on /_snapshot/{repository}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html</para>	
            </summary>
            <param name="repository">A repository name</param>
            <param name="body">The repository definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SnapshotCreateRepository(System.String,System.Object,System.Func{Elasticsearch.Net.CreateRepositoryRequestParameters,Elasticsearch.Net.CreateRepositoryRequestParameters})">
            <summary>Represents a PUT on /_snapshot/{repository}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html</para>	
            </summary>
            <param name="repository">A repository name</param>
            <param name="body">The repository definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SnapshotCreateRepositoryAsync(System.String,System.Object,System.Func{Elasticsearch.Net.CreateRepositoryRequestParameters,Elasticsearch.Net.CreateRepositoryRequestParameters})">
            <summary>Represents a PUT on /_snapshot/{repository}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html</para>	
            </summary>
            <param name="repository">A repository name</param>
            <param name="body">The repository definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SnapshotCreateRepositoryPost``1(System.String,System.Object,System.Func{Elasticsearch.Net.CreateRepositoryRequestParameters,Elasticsearch.Net.CreateRepositoryRequestParameters})">
            <summary>Represents a POST on /_snapshot/{repository}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html</para>	
            </summary>
            <param name="repository">A repository name</param>
            <param name="body">The repository definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SnapshotCreateRepositoryPostAsync``1(System.String,System.Object,System.Func{Elasticsearch.Net.CreateRepositoryRequestParameters,Elasticsearch.Net.CreateRepositoryRequestParameters})">
            <summary>Represents a POST on /_snapshot/{repository}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html</para>	
            </summary>
            <param name="repository">A repository name</param>
            <param name="body">The repository definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SnapshotCreateRepositoryPost(System.String,System.Object,System.Func{Elasticsearch.Net.CreateRepositoryRequestParameters,Elasticsearch.Net.CreateRepositoryRequestParameters})">
            <summary>Represents a POST on /_snapshot/{repository}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html</para>	
            </summary>
            <param name="repository">A repository name</param>
            <param name="body">The repository definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SnapshotCreateRepositoryPostAsync(System.String,System.Object,System.Func{Elasticsearch.Net.CreateRepositoryRequestParameters,Elasticsearch.Net.CreateRepositoryRequestParameters})">
            <summary>Represents a POST on /_snapshot/{repository}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html</para>	
            </summary>
            <param name="repository">A repository name</param>
            <param name="body">The repository definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SnapshotDelete``1(System.String,System.String,System.Func{Elasticsearch.Net.DeleteSnapshotRequestParameters,Elasticsearch.Net.DeleteSnapshotRequestParameters})">
            <summary>Represents a DELETE on /_snapshot/{repository}/{snapshot}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html</para>	
            </summary>
            <param name="repository">A repository name</param>
            <param name="snapshot">A snapshot name</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SnapshotDeleteAsync``1(System.String,System.String,System.Func{Elasticsearch.Net.DeleteSnapshotRequestParameters,Elasticsearch.Net.DeleteSnapshotRequestParameters})">
            <summary>Represents a DELETE on /_snapshot/{repository}/{snapshot}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html</para>	
            </summary>
            <param name="repository">A repository name</param>
            <param name="snapshot">A snapshot name</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SnapshotDelete(System.String,System.String,System.Func{Elasticsearch.Net.DeleteSnapshotRequestParameters,Elasticsearch.Net.DeleteSnapshotRequestParameters})">
            <summary>Represents a DELETE on /_snapshot/{repository}/{snapshot}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html</para>	
            </summary>
            <param name="repository">A repository name</param>
            <param name="snapshot">A snapshot name</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SnapshotDeleteAsync(System.String,System.String,System.Func{Elasticsearch.Net.DeleteSnapshotRequestParameters,Elasticsearch.Net.DeleteSnapshotRequestParameters})">
            <summary>Represents a DELETE on /_snapshot/{repository}/{snapshot}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html</para>	
            </summary>
            <param name="repository">A repository name</param>
            <param name="snapshot">A snapshot name</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SnapshotDeleteRepository``1(System.String,System.Func{Elasticsearch.Net.DeleteRepositoryRequestParameters,Elasticsearch.Net.DeleteRepositoryRequestParameters})">
            <summary>Represents a DELETE on /_snapshot/{repository}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html</para>	
            </summary>
            <param name="repository">A comma-separated list of repository names</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SnapshotDeleteRepositoryAsync``1(System.String,System.Func{Elasticsearch.Net.DeleteRepositoryRequestParameters,Elasticsearch.Net.DeleteRepositoryRequestParameters})">
            <summary>Represents a DELETE on /_snapshot/{repository}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html</para>	
            </summary>
            <param name="repository">A comma-separated list of repository names</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SnapshotDeleteRepository(System.String,System.Func{Elasticsearch.Net.DeleteRepositoryRequestParameters,Elasticsearch.Net.DeleteRepositoryRequestParameters})">
            <summary>Represents a DELETE on /_snapshot/{repository}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html</para>	
            </summary>
            <param name="repository">A comma-separated list of repository names</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SnapshotDeleteRepositoryAsync(System.String,System.Func{Elasticsearch.Net.DeleteRepositoryRequestParameters,Elasticsearch.Net.DeleteRepositoryRequestParameters})">
            <summary>Represents a DELETE on /_snapshot/{repository}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html</para>	
            </summary>
            <param name="repository">A comma-separated list of repository names</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SnapshotGet``1(System.String,System.String,System.Func{Elasticsearch.Net.GetSnapshotRequestParameters,Elasticsearch.Net.GetSnapshotRequestParameters})">
            <summary>Represents a GET on /_snapshot/{repository}/{snapshot}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html</para>	
            </summary>
            <param name="repository">A repository name</param>
            <param name="snapshot">A comma-separated list of snapshot names</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SnapshotGetAsync``1(System.String,System.String,System.Func{Elasticsearch.Net.GetSnapshotRequestParameters,Elasticsearch.Net.GetSnapshotRequestParameters})">
            <summary>Represents a GET on /_snapshot/{repository}/{snapshot}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html</para>	
            </summary>
            <param name="repository">A repository name</param>
            <param name="snapshot">A comma-separated list of snapshot names</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SnapshotGet(System.String,System.String,System.Func{Elasticsearch.Net.GetSnapshotRequestParameters,Elasticsearch.Net.GetSnapshotRequestParameters})">
            <summary>Represents a GET on /_snapshot/{repository}/{snapshot}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html</para>	
            </summary>
            <param name="repository">A repository name</param>
            <param name="snapshot">A comma-separated list of snapshot names</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SnapshotGetAsync(System.String,System.String,System.Func{Elasticsearch.Net.GetSnapshotRequestParameters,Elasticsearch.Net.GetSnapshotRequestParameters})">
            <summary>Represents a GET on /_snapshot/{repository}/{snapshot}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html</para>	
            </summary>
            <param name="repository">A repository name</param>
            <param name="snapshot">A comma-separated list of snapshot names</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SnapshotGetRepository``1(System.Func{Elasticsearch.Net.SnapshotGetRepositoryRequestParameters,Elasticsearch.Net.SnapshotGetRepositoryRequestParameters})">
            <summary>Represents a GET on /_snapshot
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SnapshotGetRepositoryAsync``1(System.Func{Elasticsearch.Net.SnapshotGetRepositoryRequestParameters,Elasticsearch.Net.SnapshotGetRepositoryRequestParameters})">
            <summary>Represents a GET on /_snapshot
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SnapshotGetRepository(System.Func{Elasticsearch.Net.SnapshotGetRepositoryRequestParameters,Elasticsearch.Net.SnapshotGetRepositoryRequestParameters})">
            <summary>Represents a GET on /_snapshot
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SnapshotGetRepositoryAsync(System.Func{Elasticsearch.Net.SnapshotGetRepositoryRequestParameters,Elasticsearch.Net.SnapshotGetRepositoryRequestParameters})">
            <summary>Represents a GET on /_snapshot
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SnapshotGetRepository``1(System.String,System.Func{Elasticsearch.Net.SnapshotGetRepositoryRequestParameters,Elasticsearch.Net.SnapshotGetRepositoryRequestParameters})">
            <summary>Represents a GET on /_snapshot/{repository}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html</para>	
            </summary>
            <param name="repository">A comma-separated list of repository names</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SnapshotGetRepositoryAsync``1(System.String,System.Func{Elasticsearch.Net.SnapshotGetRepositoryRequestParameters,Elasticsearch.Net.SnapshotGetRepositoryRequestParameters})">
            <summary>Represents a GET on /_snapshot/{repository}
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html</para>	
            </summary>
            <param name="repository">A comma-separated list of repository names</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SnapshotGetRepository(System.String,System.Func{Elasticsearch.Net.SnapshotGetRepositoryRequestParameters,Elasticsearch.Net.SnapshotGetRepositoryRequestParameters})">
            <summary>Represents a GET on /_snapshot/{repository}
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html</para>	
            </summary>
            <param name="repository">A comma-separated list of repository names</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SnapshotGetRepositoryAsync(System.String,System.Func{Elasticsearch.Net.SnapshotGetRepositoryRequestParameters,Elasticsearch.Net.SnapshotGetRepositoryRequestParameters})">
            <summary>Represents a GET on /_snapshot/{repository}
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html</para>	
            </summary>
            <param name="repository">A comma-separated list of repository names</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SnapshotRestore``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.RestoreRequestParameters,Elasticsearch.Net.RestoreRequestParameters})">
            <summary>Represents a POST on /_snapshot/{repository}/{snapshot}/_restore
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html</para>	
            </summary>
            <param name="repository">A repository name</param>
            <param name="snapshot">A snapshot name</param>
            <param name="body">Details of what to restore</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SnapshotRestoreAsync``1(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.RestoreRequestParameters,Elasticsearch.Net.RestoreRequestParameters})">
            <summary>Represents a POST on /_snapshot/{repository}/{snapshot}/_restore
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html</para>	
            </summary>
            <param name="repository">A repository name</param>
            <param name="snapshot">A snapshot name</param>
            <param name="body">Details of what to restore</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SnapshotRestore(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.RestoreRequestParameters,Elasticsearch.Net.RestoreRequestParameters})">
            <summary>Represents a POST on /_snapshot/{repository}/{snapshot}/_restore
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html</para>	
            </summary>
            <param name="repository">A repository name</param>
            <param name="snapshot">A snapshot name</param>
            <param name="body">Details of what to restore</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SnapshotRestoreAsync(System.String,System.String,System.Object,System.Func{Elasticsearch.Net.RestoreRequestParameters,Elasticsearch.Net.RestoreRequestParameters})">
            <summary>Represents a POST on /_snapshot/{repository}/{snapshot}/_restore
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html</para>	
            </summary>
            <param name="repository">A repository name</param>
            <param name="snapshot">A snapshot name</param>
            <param name="body">Details of what to restore</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SnapshotStatus``1(System.Func{Elasticsearch.Net.SnapshotStatusRequestParameters,Elasticsearch.Net.SnapshotStatusRequestParameters})">
            <summary>Represents a GET on /_snapshot/_status
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/modules-snapshots.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SnapshotStatusAsync``1(System.Func{Elasticsearch.Net.SnapshotStatusRequestParameters,Elasticsearch.Net.SnapshotStatusRequestParameters})">
            <summary>Represents a GET on /_snapshot/_status
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/modules-snapshots.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SnapshotStatus(System.Func{Elasticsearch.Net.SnapshotStatusRequestParameters,Elasticsearch.Net.SnapshotStatusRequestParameters})">
            <summary>Represents a GET on /_snapshot/_status
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/modules-snapshots.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SnapshotStatusAsync(System.Func{Elasticsearch.Net.SnapshotStatusRequestParameters,Elasticsearch.Net.SnapshotStatusRequestParameters})">
            <summary>Represents a GET on /_snapshot/_status
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/modules-snapshots.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SnapshotStatus``1(System.String,System.Func{Elasticsearch.Net.SnapshotStatusRequestParameters,Elasticsearch.Net.SnapshotStatusRequestParameters})">
            <summary>Represents a GET on /_snapshot/{repository}/_status
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/modules-snapshots.html</para>	
            </summary>
            <param name="repository">A repository name</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SnapshotStatusAsync``1(System.String,System.Func{Elasticsearch.Net.SnapshotStatusRequestParameters,Elasticsearch.Net.SnapshotStatusRequestParameters})">
            <summary>Represents a GET on /_snapshot/{repository}/_status
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/modules-snapshots.html</para>	
            </summary>
            <param name="repository">A repository name</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SnapshotStatus(System.String,System.Func{Elasticsearch.Net.SnapshotStatusRequestParameters,Elasticsearch.Net.SnapshotStatusRequestParameters})">
            <summary>Represents a GET on /_snapshot/{repository}/_status
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/modules-snapshots.html</para>	
            </summary>
            <param name="repository">A repository name</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SnapshotStatusAsync(System.String,System.Func{Elasticsearch.Net.SnapshotStatusRequestParameters,Elasticsearch.Net.SnapshotStatusRequestParameters})">
            <summary>Represents a GET on /_snapshot/{repository}/_status
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/modules-snapshots.html</para>	
            </summary>
            <param name="repository">A repository name</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SnapshotStatus``1(System.String,System.String,System.Func{Elasticsearch.Net.SnapshotStatusRequestParameters,Elasticsearch.Net.SnapshotStatusRequestParameters})">
            <summary>Represents a GET on /_snapshot/{repository}/{snapshot}/_status
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/modules-snapshots.html</para>	
            </summary>
            <param name="repository">A repository name</param>
            <param name="snapshot">A comma-separated list of snapshot names</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SnapshotStatusAsync``1(System.String,System.String,System.Func{Elasticsearch.Net.SnapshotStatusRequestParameters,Elasticsearch.Net.SnapshotStatusRequestParameters})">
            <summary>Represents a GET on /_snapshot/{repository}/{snapshot}/_status
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/modules-snapshots.html</para>	
            </summary>
            <param name="repository">A repository name</param>
            <param name="snapshot">A comma-separated list of snapshot names</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SnapshotStatus(System.String,System.String,System.Func{Elasticsearch.Net.SnapshotStatusRequestParameters,Elasticsearch.Net.SnapshotStatusRequestParameters})">
            <summary>Represents a GET on /_snapshot/{repository}/{snapshot}/_status
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/modules-snapshots.html</para>	
            </summary>
            <param name="repository">A repository name</param>
            <param name="snapshot">A comma-separated list of snapshot names</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SnapshotStatusAsync(System.String,System.String,System.Func{Elasticsearch.Net.SnapshotStatusRequestParameters,Elasticsearch.Net.SnapshotStatusRequestParameters})">
            <summary>Represents a GET on /_snapshot/{repository}/{snapshot}/_status
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/modules-snapshots.html</para>	
            </summary>
            <param name="repository">A repository name</param>
            <param name="snapshot">A comma-separated list of snapshot names</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.Suggest``1(System.Object,System.Func{Elasticsearch.Net.SuggestRequestParameters,Elasticsearch.Net.SuggestRequestParameters})">
            <summary>Represents a POST on /_suggest
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-search.html</para>	
            </summary>
            <param name="body">The request definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SuggestAsync``1(System.Object,System.Func{Elasticsearch.Net.SuggestRequestParameters,Elasticsearch.Net.SuggestRequestParameters})">
            <summary>Represents a POST on /_suggest
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-search.html</para>	
            </summary>
            <param name="body">The request definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.Suggest(System.Object,System.Func{Elasticsearch.Net.SuggestRequestParameters,Elasticsearch.Net.SuggestRequestParameters})">
            <summary>Represents a POST on /_suggest
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-search.html</para>	
            </summary>
            <param name="body">The request definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SuggestAsync(System.Object,System.Func{Elasticsearch.Net.SuggestRequestParameters,Elasticsearch.Net.SuggestRequestParameters})">
            <summary>Represents a POST on /_suggest
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-search.html</para>	
            </summary>
            <param name="body">The request definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.Suggest``1(System.String,System.Object,System.Func{Elasticsearch.Net.SuggestRequestParameters,Elasticsearch.Net.SuggestRequestParameters})">
            <summary>Represents a POST on /{index}/_suggest
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-search.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
            <param name="body">The request definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SuggestAsync``1(System.String,System.Object,System.Func{Elasticsearch.Net.SuggestRequestParameters,Elasticsearch.Net.SuggestRequestParameters})">
            <summary>Represents a POST on /{index}/_suggest
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-search.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
            <param name="body">The request definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.Suggest(System.String,System.Object,System.Func{Elasticsearch.Net.SuggestRequestParameters,Elasticsearch.Net.SuggestRequestParameters})">
            <summary>Represents a POST on /{index}/_suggest
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-search.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
            <param name="body">The request definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SuggestAsync(System.String,System.Object,System.Func{Elasticsearch.Net.SuggestRequestParameters,Elasticsearch.Net.SuggestRequestParameters})">
            <summary>Represents a POST on /{index}/_suggest
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-search.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
            <param name="body">The request definition</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SuggestGet``1(System.Func{Elasticsearch.Net.SuggestRequestParameters,Elasticsearch.Net.SuggestRequestParameters})">
            <summary>Represents a GET on /_suggest
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-search.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SuggestGetAsync``1(System.Func{Elasticsearch.Net.SuggestRequestParameters,Elasticsearch.Net.SuggestRequestParameters})">
            <summary>Represents a GET on /_suggest
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-search.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SuggestGet(System.Func{Elasticsearch.Net.SuggestRequestParameters,Elasticsearch.Net.SuggestRequestParameters})">
            <summary>Represents a GET on /_suggest
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-search.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SuggestGetAsync(System.Func{Elasticsearch.Net.SuggestRequestParameters,Elasticsearch.Net.SuggestRequestParameters})">
            <summary>Represents a GET on /_suggest
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-search.html</para>	
            </summary>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SuggestGet``1(System.String,System.Func{Elasticsearch.Net.SuggestRequestParameters,Elasticsearch.Net.SuggestRequestParameters})">
            <summary>Represents a GET on /{index}/_suggest
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-search.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SuggestGetAsync``1(System.String,System.Func{Elasticsearch.Net.SuggestRequestParameters,Elasticsearch.Net.SuggestRequestParameters})">
            <summary>Represents a GET on /{index}/_suggest
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-search.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SuggestGet(System.String,System.Func{Elasticsearch.Net.SuggestRequestParameters,Elasticsearch.Net.SuggestRequestParameters})">
            <summary>Represents a GET on /{index}/_suggest
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-search.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.SuggestGetAsync(System.String,System.Func{Elasticsearch.Net.SuggestRequestParameters,Elasticsearch.Net.SuggestRequestParameters})">
            <summary>Represents a GET on /{index}/_suggest
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-search.html</para>	
            </summary>
            <param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.TermvectorGet``1(System.String,System.String,System.String,System.Func{Elasticsearch.Net.TermvectorRequestParameters,Elasticsearch.Net.TermvectorRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/{id}/_termvector
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-termvectors.html</para>	
            </summary>
            <param name="index">The index in which the document resides.</param>
            <param name="type">The type of the document.</param>
            <param name="id">The id of the document.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.TermvectorGetAsync``1(System.String,System.String,System.String,System.Func{Elasticsearch.Net.TermvectorRequestParameters,Elasticsearch.Net.TermvectorRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/{id}/_termvector
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-termvectors.html</para>	
            </summary>
            <param name="index">The index in which the document resides.</param>
            <param name="type">The type of the document.</param>
            <param name="id">The id of the document.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.TermvectorGet(System.String,System.String,System.String,System.Func{Elasticsearch.Net.TermvectorRequestParameters,Elasticsearch.Net.TermvectorRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/{id}/_termvector
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-termvectors.html</para>	
            </summary>
            <param name="index">The index in which the document resides.</param>
            <param name="type">The type of the document.</param>
            <param name="id">The id of the document.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.TermvectorGetAsync(System.String,System.String,System.String,System.Func{Elasticsearch.Net.TermvectorRequestParameters,Elasticsearch.Net.TermvectorRequestParameters})">
            <summary>Represents a GET on /{index}/{type}/{id}/_termvector
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-termvectors.html</para>	
            </summary>
            <param name="index">The index in which the document resides.</param>
            <param name="type">The type of the document.</param>
            <param name="id">The id of the document.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.Termvector``1(System.String,System.String,System.String,System.Object,System.Func{Elasticsearch.Net.TermvectorRequestParameters,Elasticsearch.Net.TermvectorRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/{id}/_termvector
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-termvectors.html</para>	
            </summary>
            <param name="index">The index in which the document resides.</param>
            <param name="type">The type of the document.</param>
            <param name="id">The id of the document.</param>
            <param name="body">Define parameters. See documentation.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.TermvectorAsync``1(System.String,System.String,System.String,System.Object,System.Func{Elasticsearch.Net.TermvectorRequestParameters,Elasticsearch.Net.TermvectorRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/{id}/_termvector
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-termvectors.html</para>	
            </summary>
            <param name="index">The index in which the document resides.</param>
            <param name="type">The type of the document.</param>
            <param name="id">The id of the document.</param>
            <param name="body">Define parameters. See documentation.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.Termvector(System.String,System.String,System.String,System.Object,System.Func{Elasticsearch.Net.TermvectorRequestParameters,Elasticsearch.Net.TermvectorRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/{id}/_termvector
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-termvectors.html</para>	
            </summary>
            <param name="index">The index in which the document resides.</param>
            <param name="type">The type of the document.</param>
            <param name="id">The id of the document.</param>
            <param name="body">Define parameters. See documentation.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.TermvectorAsync(System.String,System.String,System.String,System.Object,System.Func{Elasticsearch.Net.TermvectorRequestParameters,Elasticsearch.Net.TermvectorRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/{id}/_termvector
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-termvectors.html</para>	
            </summary>
            <param name="index">The index in which the document resides.</param>
            <param name="type">The type of the document.</param>
            <param name="id">The id of the document.</param>
            <param name="body">Define parameters. See documentation.</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.Update``1(System.String,System.String,System.String,System.Object,System.Func{Elasticsearch.Net.UpdateRequestParameters,Elasticsearch.Net.UpdateRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/{id}/_update
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-update.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="id">Document ID</param>
            <param name="body">The request definition using either `script` or partial `doc`</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.UpdateAsync``1(System.String,System.String,System.String,System.Object,System.Func{Elasticsearch.Net.UpdateRequestParameters,Elasticsearch.Net.UpdateRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/{id}/_update
            <para></para>Returns: A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-update.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="id">Document ID</param>
            <param name="body">The request definition using either `script` or partial `doc`</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>A task that'll return an ElasticsearchResponse&lt;T&gt; holding the reponse body deserialized as T.
            <para> - If T is of type byte[] deserialization will be shortcircuited</para>
            <para> - If T is of type VoidResponse the response stream will be ignored completely</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.Update(System.String,System.String,System.String,System.Object,System.Func{Elasticsearch.Net.UpdateRequestParameters,Elasticsearch.Net.UpdateRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/{id}/_update
            <para></para>Returns: ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-update.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="id">Document ID</param>
            <param name="body">The request definition using either `script` or partial `doc`</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>ElasticsearchResponse&lt;T&gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.UpdateAsync(System.String,System.String,System.String,System.Object,System.Func{Elasticsearch.Net.UpdateRequestParameters,Elasticsearch.Net.UpdateRequestParameters})">
            <summary>Represents a POST on /{index}/{type}/{id}/_update
            <para></para>Returns: Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            <para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-update.html</para>	
            </summary>
            <param name="index">The name of the index</param>
            <param name="type">The type of the document</param>
            <param name="id">Document ID</param>
            <param name="body">The request definition using either `script` or partial `doc`</param>
            <param name="requestParameters">
            Optional function to specify any additional request parameters 
            <para>Querystring values, connection configuration specific to this request, deserialization state.</para>
            </param>
            <returns>Task that'll return an ElasticsearchResponse&lt;T$gt; holding the response body deserialized as DynamicDictionary
            <para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
            <para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
            <para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para>
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchClient.#ctor(Elasticsearch.Net.Connection.IConnectionConfigurationValues,Elasticsearch.Net.Connection.IConnection,Elasticsearch.Net.Connection.ITransport,Elasticsearch.Net.Serialization.IElasticsearchSerializer)">
            <summary>
            Instantiate a new low level elasticsearch client
            </summary>
            <param name="settings">Specify how and where the client connects to elasticsearch, defaults to a static single node connectionpool 
            to http://localhost:9200
            </param>
            <param name="connection">Provide an alternative connection handler</param>
            <param name="transport">Provide a custom transport implementation that coordinates between IConnectionPool, IConnection and ISerializer</param>
            <param name="serializer">Provide a custom serializer</param>
        </member>
        <member name="T:Elasticsearch.Net.DynamicDictionary">
            <summary>
            A dictionary that supports dynamic access.
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.DynamicDictionary.Create(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Creates a dynamic dictionary from an <see cref="T:System.Collections.Generic.IDictionary`2"/> instance.
            </summary>
            <param name="values">An <see cref="T:System.Collections.Generic.IDictionary`2"/> instance, that the dynamic dictionary should be created from.</param>
            <returns>An <see cref="T:Elasticsearch.Net.DynamicDictionary"/> instance.</returns>
        </member>
        <member name="M:Elasticsearch.Net.DynamicDictionary.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <summary>
            Provides the implementation for operations that set member values. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can override this method to specify dynamic behavior for operations such as setting a value for a property.
            </summary>
            <returns>true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</returns>
            <param name="binder">Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member to which the value is being assigned. For example, for the statement sampleObject.SampleProperty = "Test", where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param><param name="value">The value to set to the member. For example, for sampleObject.SampleProperty = "Test", where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, the <paramref name="value"/> is "Test".</param>
        </member>
        <member name="M:Elasticsearch.Net.DynamicDictionary.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            Provides the implementation for operations that get member values. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can override this method to specify dynamic behavior for operations such as getting a value for a property.
            </summary>
            <returns>true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)</returns>
            <param name="binder">Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member on which the dynamic operation is performed. For example, for the Console.WriteLine(sampleObject.SampleProperty) statement, where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param><param name="result">The result of the get operation. For example, if the method is called for a property, you can assign the property value to <paramref name="result"/>.</param>
        </member>
        <member name="M:Elasticsearch.Net.DynamicDictionary.GetDynamicMemberNames">
            <summary>
            Returns the enumeration of all dynamic member names.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains dynamic member names.</returns>
        </member>
        <member name="M:Elasticsearch.Net.DynamicDictionary.GetEnumerator">
            <summary>
            Returns the enumeration of all dynamic member names.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains dynamic member names.</returns>
        </member>
        <member name="M:Elasticsearch.Net.DynamicDictionary.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns the enumeration of all dynamic member names.
            </summary>
            <returns>A <see cref="T:System.Collections.IEnumerator"/> that contains dynamic member names.</returns>
        </member>
        <member name="M:Elasticsearch.Net.DynamicDictionary.Equals(Elasticsearch.Net.DynamicDictionary)">
            <summary>
            Indicates whether the current <see cref="T:Elasticsearch.Net.DynamicDictionary"/> is equal to another object of the same type.
            </summary>
            <returns><see langword="true"/> if the current instance is equal to the <paramref name="other"/> parameter; otherwise, <see langword="false"/>.</returns>
            <param name="other">An <see cref="T:Elasticsearch.Net.DynamicDictionary"/> instance to compare with this instance.</param>
        </member>
        <member name="M:Elasticsearch.Net.DynamicDictionary.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns><see langword="true"/> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Elasticsearch.Net.DynamicDictionary.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String@System#Object}}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Elasticsearch.Net.DynamicDictionary.GetHashCode">
            <summary>
            Returns a hash code for this <see cref="T:Elasticsearch.Net.DynamicDictionary"/>.
            </summary>
            <returns> A hash code for this <see cref="T:Elasticsearch.Net.DynamicDictionary"/>, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:Elasticsearch.Net.DynamicDictionary.Add(System.String,System.Object)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:Elasticsearch.Net.DynamicDictionary"/>.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
        </member>
        <member name="M:Elasticsearch.Net.DynamicDictionary.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Adds an item to the <see cref="T:Elasticsearch.Net.DynamicDictionary"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:Elasticsearch.Net.DynamicDictionary"/>.</param>
        </member>
        <member name="M:Elasticsearch.Net.DynamicDictionary.ContainsKey(System.String)">
            <summary>
            Determines whether the <see cref="T:Elasticsearch.Net.DynamicDictionary"/> contains an element with the specified key.
            </summary>
            <returns><see langword="true"/> if the <see cref="T:Elasticsearch.Net.DynamicDictionary"/> contains an element with the key; otherwise, <see langword="false"/>.
            </returns>
            <param name="key">The key to locate in the <see cref="T:Elasticsearch.Net.DynamicDictionary"/>.</param>
        </member>
        <member name="M:Elasticsearch.Net.DynamicDictionary.TryGetValue(System.String,System.Object@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <returns><see langword="true"/> if the <see cref="T:Elasticsearch.Net.DynamicDictionary"/> contains an element with the specified key; otherwise, <see langword="false"/>.</returns>
            <param name="key">The key whose value to get.</param>
            <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value"/> parameter. This parameter is passed uninitialized.</param>
        </member>
        <member name="M:Elasticsearch.Net.DynamicDictionary.Clear">
            <summary>
            Removes all items from the <see cref="T:Elasticsearch.Net.DynamicDictionary"/>.
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.DynamicDictionary.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Determines whether the <see cref="T:Elasticsearch.Net.DynamicDictionary"/> contains a specific value.
            </summary>
            <returns><see langword="true"/> if <paramref name="item"/> is found in the <see cref="T:Elasticsearch.Net.DynamicDictionary"/>; otherwise, <see langword="false"/>.
            </returns>
            <param name="item">The object to locate in the <see cref="T:Elasticsearch.Net.DynamicDictionary"/>.</param>
        </member>
        <member name="M:Elasticsearch.Net.DynamicDictionary.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:Elasticsearch.Net.DynamicDictionary"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from the <see cref="T:Elasticsearch.Net.DynamicDictionary"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
        </member>
        <member name="M:Elasticsearch.Net.DynamicDictionary.Remove(System.String)">
            <summary>
            Removes the element with the specified key from the <see cref="T:Elasticsearch.Net.DynamicDictionary"/>.
            </summary>
            <returns><see langword="true"/> if the element is successfully removed; otherwise, <see langword="false"/>.</returns>
            <param name="key">The key of the element to remove.</param>
        </member>
        <member name="M:Elasticsearch.Net.DynamicDictionary.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:Elasticsearch.Net.DynamicDictionary"/>.
            </summary>
            <returns><see langword="true"/> if <paramref name="item"/> was successfully removed from the <see cref="T:Elasticsearch.Net.DynamicDictionary"/>; otherwise, <see langword="false"/>.</returns>
            <param name="item">The object to remove from the <see cref="T:Elasticsearch.Net.DynamicDictionary"/>.</param>
        </member>
        <member name="P:Elasticsearch.Net.DynamicDictionary.Empty">
            <summary>
            Returns an empty dynamic dictionary.
            </summary>
            <value>A <see cref="T:Elasticsearch.Net.DynamicDictionary"/> instance.</value>
        </member>
        <member name="P:Elasticsearch.Net.DynamicDictionary.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:Elasticsearch.Net.ElasticsearchDynamicValue"/> with the specified name.
            </summary>
            <value>A <see cref="T:Elasticsearch.Net.ElasticsearchDynamicValue"/> instance containing a value.</value>
        </member>
        <member name="P:Elasticsearch.Net.DynamicDictionary.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the <see cref="T:Elasticsearch.Net.DynamicDictionary"/>.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the <see cref="T:Elasticsearch.Net.DynamicDictionary"/>.</returns>
        </member>
        <member name="P:Elasticsearch.Net.DynamicDictionary.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:Elasticsearch.Net.DynamicDictionary"/>.
            </summary>
            <returns>The number of elements contained in the <see cref="T:Elasticsearch.Net.DynamicDictionary"/>.</returns>
        </member>
        <member name="P:Elasticsearch.Net.DynamicDictionary.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:Elasticsearch.Net.DynamicDictionary"/> is read-only.
            </summary>
            <returns>Always returns <see langword="false"/>.</returns>
        </member>
        <member name="P:Elasticsearch.Net.DynamicDictionary.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the <see cref="T:Elasticsearch.Net.DynamicDictionary"/>.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the <see cref="T:Elasticsearch.Net.DynamicDictionary"/>.</returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchDynamicValue.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Elasticsearch.Net.ElasticsearchDynamicValue"/> class.
            </summary>
            <param name="value">The value to store in the instance</param>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchDynamicValue.Default``1(``0)">
            <summary>
            Returns a default value if Value is null
            </summary>
            <typeparam name="T">When no default value is supplied, required to supply the default type</typeparam>
            <param name="defaultValue">Optional parameter for default value, if not given it returns default of type T</param>
            <returns>If value is not null, value is returned, else default value is returned</returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchDynamicValue.TryParse``1(``0)">
            <summary>
            Attempts to convert the value to type of T, failing to do so will return the defaultValue. 
            </summary>
            <typeparam name="T">When no default value is supplied, required to supply the default type</typeparam>
            <param name="defaultValue">Optional parameter for default value, if not given it returns default of type T</param>
            <returns>If value is not null, value is returned, else default value is returned</returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchDynamicValue.Equals(Elasticsearch.Net.ElasticsearchDynamicValue)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns><c>true</c> if the current object is equal to the <paramref name="compareValue"/> parameter; otherwise, <c>false</c>.
            </returns>
            <param name="compareValue">An <see cref="T:Elasticsearch.Net.ElasticsearchDynamicValue"/> to compare with this instance.</param>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchDynamicValue.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:Elasticsearch.Net.ElasticsearchDynamicValue"/>; otherwise, <c>false</c>.</returns>
            <param name="compareValue">The <see cref="T:System.Object"/> to compare with the current <see cref="T:Elasticsearch.Net.ElasticsearchDynamicValue"/>.</param>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchDynamicValue.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>A hash code for the current instance.</returns>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchDynamicValue.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
            <summary>
            Provides implementation for binary operations. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can override this method to specify dynamic behavior for operations such as addition and multiplication.
            </summary>
            <returns><c>true</c> if the operation is successful; otherwise, <c>false</c>. If this method returns <c>false</c>, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</returns>
            <param name="binder">Provides information about the binary operation. The binder.Operation property returns an <see cref="T:System.Linq.Expressions.ExpressionType"/> object. For example, for the sum = first + second statement, where first and second are derived from the DynamicObject class, binder.Operation returns ExpressionType.Add.</param><param name="arg">The right operand for the binary operation. For example, for the sum = first + second statement, where first and second are derived from the DynamicObject class, <paramref name="arg"/> is equal to second.</param><param name="result">The result of the binary operation.</param>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchDynamicValue.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
            <summary>
            Provides implementation for type conversion operations. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can override this method to specify dynamic behavior for operations that convert an object from one type to another.
            </summary>
            <returns><c>true</c> if the operation is successful; otherwise, <c>false</c>. If this method returns <c>false</c>, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</returns>
            <param name="binder">Provides information about the conversion operation. The binder.Type property provides the type to which the object must be converted. For example, for the statement (String)sampleObject in C# (CType(sampleObject, Type) in Visual Basic), where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, binder.Type returns the <see cref="T:System.String"/> type. The binder.Explicit property provides information about the kind of conversion that occurs. It returns true for explicit conversion and false for implicit conversion.</param><param name="result">The result of the type conversion operation.</param>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchDynamicValue.GetTypeCode">
            <summary>
            Returns the <see cref="T:System.TypeCode"/> for this instance.
            </summary>
            <returns>
            The enumerated constant that is the <see cref="T:System.TypeCode"/> of the class or value type that implements this interface.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchDynamicValue.ToBoolean(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent Boolean value using the specified culture-specific formatting information.
            </summary>
            <returns>
            A Boolean value equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchDynamicValue.ToChar(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent Unicode character using the specified culture-specific formatting information.
            </summary>
            <returns>
            A Unicode character equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchDynamicValue.ToSByte(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 8-bit signed integer using the specified culture-specific formatting information.
            </summary>
            <returns>
            An 8-bit signed integer equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchDynamicValue.ToByte(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 8-bit unsigned integer using the specified culture-specific formatting information.
            </summary>
            <returns>
            An 8-bit unsigned integer equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchDynamicValue.ToInt16(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 16-bit signed integer using the specified culture-specific formatting information.
            </summary>
            <returns>
            An 16-bit signed integer equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchDynamicValue.ToUInt16(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 16-bit unsigned integer using the specified culture-specific formatting information.
            </summary>
            <returns>
            An 16-bit unsigned integer equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchDynamicValue.ToInt32(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 32-bit signed integer using the specified culture-specific formatting information.
            </summary>
            <returns>
            An 32-bit signed integer equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchDynamicValue.ToUInt32(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 32-bit unsigned integer using the specified culture-specific formatting information.
            </summary>
            <returns>
            An 32-bit unsigned integer equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchDynamicValue.ToInt64(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 64-bit signed integer using the specified culture-specific formatting information.
            </summary>
            <returns>
            An 64-bit signed integer equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchDynamicValue.ToUInt64(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 64-bit unsigned integer using the specified culture-specific formatting information.
            </summary>
            <returns>
            An 64-bit unsigned integer equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchDynamicValue.ToSingle(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent single-precision floating-point number using the specified culture-specific formatting information.
            </summary>
            <returns>
            A single-precision floating-point number equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchDynamicValue.ToDouble(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent double-precision floating-point number using the specified culture-specific formatting information.
            </summary>
            <returns>
            A double-precision floating-point number equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchDynamicValue.ToDecimal(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent <see cref="T:System.Decimal"/> number using the specified culture-specific formatting information.
            </summary>
            <returns>
            A <see cref="T:System.Decimal"/> number equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchDynamicValue.ToDateTime(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent <see cref="T:System.DateTime"/> using the specified culture-specific formatting information.
            </summary>
            <returns>
            A <see cref="T:System.DateTime"/> instance equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchDynamicValue.ToString(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent <see cref="T:System.String"/> using the specified culture-specific formatting information.
            </summary>
            <returns>
            A <see cref="T:System.String"/> instance equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Elasticsearch.Net.ElasticsearchDynamicValue.ToType(System.Type,System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an <see cref="T:System.Object"/> of the specified <see cref="T:System.Type"/> that has an equivalent value, using the specified culture-specific formatting information.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> instance of type <paramref name="conversionType"/> whose value is equivalent to the value of this instance.
            </returns>
            <param name="conversionType">The <see cref="T:System.Type"/> to which the value of this instance is converted. </param><param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="P:Elasticsearch.Net.ElasticsearchDynamicValue.HasValue">
            <summary>
            Gets a value indicating whether this instance has value.
            </summary>
            <value><c>true</c> if this instance has value; otherwise, <c>false</c>.</value>
            <remarks><see langword="null"/> is considered as not being a value.</remarks>
        </member>
        <member name="P:Elasticsearch.Net.ElasticsearchDynamicValue.Value">
            <summary>
            Gets the inner value
            </summary>
        </member>
        <member name="T:Elasticsearch.Net.Exceptions.MaxRetryException">
            <summary>
            Thrown when a request has depleeded its max retry setting
            </summary>
        </member>
        <member name="T:Elasticsearch.Net.Exceptions.SniffException">
            <summary>
            Thrown when a sniff operation itself caused a maxrety exception
            </summary>
        </member>
        <member name="T:Elasticsearch.Net.Exceptions.PingException">
            <summary>
            Thrown when a ping operation itself caused a maxrety exception
            </summary>
        </member>
        <member name="T:Elasticsearch.Net.FluentRequestParameters`1">
            <summary>
            Used by the raw client to compose querystring parameters in a matter that still exposes some xmldocs
            You can always pass a simple NameValueCollection if you want.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Elasticsearch.Net.AbortBenchmarkRequestParameters">
            <summary>Request parameters descriptor for AbortBenchmark
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-benchmark.html
            </pre>
            </summary>
        </member>
        <member name="T:Elasticsearch.Net.BulkRequestParameters">
            <summary>Request parameters descriptor for Bulk
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-bulk.html
            </pre>
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.BulkRequestParameters.Consistency(Elasticsearch.Net.Consistency)">
            <summary>Explicit write consistency setting for the operation</summary>
        </member>
        <member name="M:Elasticsearch.Net.BulkRequestParameters.Refresh(System.Boolean)">
            <summary>Refresh the index after performing the operation</summary>
        </member>
        <member name="M:Elasticsearch.Net.BulkRequestParameters.Replication(Elasticsearch.Net.Replication)">
            <summary>Explicitely set the replication type</summary>
        </member>
        <member name="M:Elasticsearch.Net.BulkRequestParameters.Routing(System.String)">
            <summary>Specific routing value</summary>
        </member>
        <member name="M:Elasticsearch.Net.BulkRequestParameters.Timeout(System.String)">
            <summary>Explicit operation timeout</summary>
        </member>
        <member name="M:Elasticsearch.Net.BulkRequestParameters.Type(System.String)">
            <summary>Default document type for items which don&#39;t provide one</summary>
        </member>
        <member name="T:Elasticsearch.Net.CatAliasesRequestParameters">
            <summary>Request parameters descriptor for CatAliases
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-aliases.html
            </pre>
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.CatAliasesRequestParameters.Local(System.Boolean)">
            <summary>Return local information, do not retrieve the state from master node (default: false)</summary>
        </member>
        <member name="M:Elasticsearch.Net.CatAliasesRequestParameters.MasterTimeout(System.String)">
            <summary>Explicit operation timeout for connection to master node</summary>
        </member>
        <member name="M:Elasticsearch.Net.CatAliasesRequestParameters.H(System.String[])">
            <summary>Comma-separated list of column names to display</summary>
        </member>
        <member name="M:Elasticsearch.Net.CatAliasesRequestParameters.Help(System.Boolean)">
            <summary>Return help information</summary>
        </member>
        <member name="M:Elasticsearch.Net.CatAliasesRequestParameters.V(System.Boolean)">
            <summary>Verbose mode. Display column headers</summary>
        </member>
        <member name="T:Elasticsearch.Net.CatAllocationRequestParameters">
            <summary>Request parameters descriptor for CatAllocation
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-allocation.html
            </pre>
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.CatAllocationRequestParameters.Bytes(Elasticsearch.Net.Bytes)">
            <summary>The unit in which to display byte values</summary>
        </member>
        <member name="M:Elasticsearch.Net.CatAllocationRequestParameters.Local(System.Boolean)">
            <summary>Return local information, do not retrieve the state from master node (default: false)</summary>
        </member>
        <member name="M:Elasticsearch.Net.CatAllocationRequestParameters.MasterTimeout(System.String)">
            <summary>Explicit operation timeout for connection to master node</summary>
        </member>
        <member name="M:Elasticsearch.Net.CatAllocationRequestParameters.H(System.String[])">
            <summary>Comma-separated list of column names to display</summary>
        </member>
        <member name="M:Elasticsearch.Net.CatAllocationRequestParameters.Help(System.Boolean)">
            <summary>Return help information</summary>
        </member>
        <member name="M:Elasticsearch.Net.CatAllocationRequestParameters.V(System.Boolean)">
            <summary>Verbose mode. Display column headers</summary>
        </member>
        <member name="T:Elasticsearch.Net.CatCountRequestParameters">
            <summary>Request parameters descriptor for CatCount
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-count.html
            </pre>
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.CatCountRequestParameters.Local(System.Boolean)">
            <summary>Return local information, do not retrieve the state from master node (default: false)</summary>
        </member>
        <member name="M:Elasticsearch.Net.CatCountRequestParameters.MasterTimeout(System.String)">
            <summary>Explicit operation timeout for connection to master node</summary>
        </member>
        <member name="M:Elasticsearch.Net.CatCountRequestParameters.H(System.String[])">
            <summary>Comma-separated list of column names to display</summary>
        </member>
        <member name="M:Elasticsearch.Net.CatCountRequestParameters.Help(System.Boolean)">
            <summary>Return help information</summary>
        </member>
        <member name="M:Elasticsearch.Net.CatCountRequestParameters.V(System.Boolean)">
            <summary>Verbose mode. Display column headers</summary>
        </member>
        <member name="T:Elasticsearch.Net.CatFielddataRequestParameters">
            <summary>Request parameters descriptor for CatFielddata
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/cat-fielddata.html
            </pre>
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.CatFielddataRequestParameters.Bytes(Elasticsearch.Net.Bytes)">
            <summary>The unit in which to display byte values</summary>
        </member>
        <member name="M:Elasticsearch.Net.CatFielddataRequestParameters.Local(System.Boolean)">
            <summary>Return local information, do not retrieve the state from master node (default: false)</summary>
        </member>
        <member name="M:Elasticsearch.Net.CatFielddataRequestParameters.MasterTimeout(System.String)">
            <summary>Explicit operation timeout for connection to master node</summary>
        </member>
        <member name="M:Elasticsearch.Net.CatFielddataRequestParameters.H(System.String[])">
            <summary>Comma-separated list of column names to display</summary>
        </member>
        <member name="M:Elasticsearch.Net.CatFielddataRequestParameters.Help(System.Boolean)">
            <summary>Return help information</summary>
        </member>
        <member name="M:Elasticsearch.Net.CatFielddataRequestParameters.V(System.Boolean)">
            <summary>Verbose mode. Display column headers</summary>
        </member>
        <member name="M:Elasticsearch.Net.CatFielddataRequestParameters.Fields(System.String[])">
            <summary>A comma-separated list of fields to return the fielddata size</summary>
        </member>
        <member name="T:Elasticsearch.Net.CatHealthRequestParameters">
            <summary>Request parameters descriptor for CatHealth
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-health.html
            </pre>
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.CatHealthRequestParameters.Local(System.Boolean)">
            <summary>Return local information, do not retrieve the state from master node (default: false)</summary>
        </member>
        <member name="M:Elasticsearch.Net.CatHealthRequestParameters.MasterTimeout(System.String)">
            <summary>Explicit operation timeout for connection to master node</summary>
        </member>
        <member name="M:Elasticsearch.Net.CatHealthRequestParameters.H(System.String[])">
            <summary>Comma-separated list of column names to display</summary>
        </member>
        <member name="M:Elasticsearch.Net.CatHealthRequestParameters.Help(System.Boolean)">
            <summary>Return help information</summary>
        </member>
        <member name="M:Elasticsearch.Net.CatHealthRequestParameters.Ts(System.Boolean)">
            <summary>Set to false to disable timestamping</summary>
        </member>
        <member name="M:Elasticsearch.Net.CatHealthRequestParameters.V(System.Boolean)">
            <summary>Verbose mode. Display column headers</summary>
        </member>
        <member name="T:Elasticsearch.Net.CatHelpRequestParameters">
            <summary>Request parameters descriptor for CatHelp
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat.html
            </pre>
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.CatHelpRequestParameters.Help(System.Boolean)">
            <summary>Return help information</summary>
        </member>
        <member name="T:Elasticsearch.Net.CatIndicesRequestParameters">
            <summary>Request parameters descriptor for CatIndices
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-indices.html
            </pre>
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.CatIndicesRequestParameters.Bytes(Elasticsearch.Net.Bytes)">
            <summary>The unit in which to display byte values</summary>
        </member>
        <member name="M:Elasticsearch.Net.CatIndicesRequestParameters.Local(System.Boolean)">
            <summary>Return local information, do not retrieve the state from master node (default: false)</summary>
        </member>
        <member name="M:Elasticsearch.Net.CatIndicesRequestParameters.MasterTimeout(System.String)">
            <summary>Explicit operation timeout for connection to master node</summary>
        </member>
        <member name="M:Elasticsearch.Net.CatIndicesRequestParameters.H(System.String[])">
            <summary>Comma-separated list of column names to display</summary>
        </member>
        <member name="M:Elasticsearch.Net.CatIndicesRequestParameters.Help(System.Boolean)">
            <summary>Return help information</summary>
        </member>
        <member name="M:Elasticsearch.Net.CatIndicesRequestParameters.Pri(System.Boolean)">
            <summary>Set to true to return stats only for primary shards</summary>
        </member>
        <member name="M:Elasticsearch.Net.CatIndicesRequestParameters.V(System.Boolean)">
            <summary>Verbose mode. Display column headers</summary>
        </member>
        <member name="T:Elasticsearch.Net.CatMasterRequestParameters">
            <summary>Request parameters descriptor for CatMaster
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-master.html
            </pre>
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.CatMasterRequestParameters.Local(System.Boolean)">
            <summary>Return local information, do not retrieve the state from master node (default: false)</summary>
        </member>
        <member name="M:Elasticsearch.Net.CatMasterRequestParameters.MasterTimeout(System.String)">
            <summary>Explicit operation timeout for connection to master node</summary>
        </member>
        <member name="M:Elasticsearch.Net.CatMasterRequestParameters.H(System.String[])">
            <summary>Comma-separated list of column names to display</summary>
        </member>
        <member name="M:Elasticsearch.Net.CatMasterRequestParameters.Help(System.Boolean)">
            <summary>Return help information</summary>
        </member>
        <member name="M:Elasticsearch.Net.CatMasterRequestParameters.V(System.Boolean)">
            <summary>Verbose mode. Display column headers</summary>
        </member>
        <member name="T:Elasticsearch.Net.CatNodesRequestParameters">
            <summary>Request parameters descriptor for CatNodes
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-nodes.html
            </pre>
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.CatNodesRequestParameters.Local(System.Boolean)">
            <summary>Return local information, do not retrieve the state from master node (default: false)</summary>
        </member>
        <member name="M:Elasticsearch.Net.CatNodesRequestParameters.MasterTimeout(System.String)">
            <summary>Explicit operation timeout for connection to master node</summary>
        </member>
        <member name="M:Elasticsearch.Net.CatNodesRequestParameters.H(System.String[])">
            <summary>Comma-separated list of column names to display</summary>
        </member>
        <member name="M:Elasticsearch.Net.CatNodesRequestParameters.Help(System.Boolean)">
            <summary>Return help information</summary>
        </member>
        <member name="M:Elasticsearch.Net.CatNodesRequestParameters.V(System.Boolean)">
            <summary>Verbose mode. Display column headers</summary>
        </member>
        <member name="T:Elasticsearch.Net.CatPendingTasksRequestParameters">
            <summary>Request parameters descriptor for CatPendingTasks
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-pending-tasks.html
            </pre>
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.CatPendingTasksRequestParameters.Local(System.Boolean)">
            <summary>Return local information, do not retrieve the state from master node (default: false)</summary>
        </member>
        <member name="M:Elasticsearch.Net.CatPendingTasksRequestParameters.MasterTimeout(System.String)">
            <summary>Explicit operation timeout for connection to master node</summary>
        </member>
        <member name="M:Elasticsearch.Net.CatPendingTasksRequestParameters.H(System.String[])">
            <summary>Comma-separated list of column names to display</summary>
        </member>
        <member name="M:Elasticsearch.Net.CatPendingTasksRequestParameters.Help(System.Boolean)">
            <summary>Return help information</summary>
        </member>
        <member name="M:Elasticsearch.Net.CatPendingTasksRequestParameters.V(System.Boolean)">
            <summary>Verbose mode. Display column headers</summary>
        </member>
        <member name="T:Elasticsearch.Net.CatPluginsRequestParameters">
            <summary>Request parameters descriptor for CatPlugins
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/cat-plugins.html
            </pre>
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.CatPluginsRequestParameters.Local(System.Boolean)">
            <summary>Return local information, do not retrieve the state from master node (default: false)</summary>
        </member>
        <member name="M:Elasticsearch.Net.CatPluginsRequestParameters.MasterTimeout(System.String)">
            <summary>Explicit operation timeout for connection to master node</summary>
        </member>
        <member name="M:Elasticsearch.Net.CatPluginsRequestParameters.H(System.String[])">
            <summary>Comma-separated list of column names to display</summary>
        </member>
        <member name="M:Elasticsearch.Net.CatPluginsRequestParameters.Help(System.Boolean)">
            <summary>Return help information</summary>
        </member>
        <member name="M:Elasticsearch.Net.CatPluginsRequestParameters.V(System.Boolean)">
            <summary>Verbose mode. Display column headers</summary>
        </member>
        <member name="T:Elasticsearch.Net.CatRecoveryRequestParameters">
            <summary>Request parameters descriptor for CatRecovery
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-recovery.html
            </pre>
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.CatRecoveryRequestParameters.Bytes(Elasticsearch.Net.Bytes)">
            <summary>The unit in which to display byte values</summary>
        </member>
        <member name="M:Elasticsearch.Net.CatRecoveryRequestParameters.MasterTimeout(System.String)">
            <summary>Explicit operation timeout for connection to master node</summary>
        </member>
        <member name="M:Elasticsearch.Net.CatRecoveryRequestParameters.H(System.String[])">
            <summary>Comma-separated list of column names to display</summary>
        </member>
        <member name="M:Elasticsearch.Net.CatRecoveryRequestParameters.Help(System.Boolean)">
            <summary>Return help information</summary>
        </member>
        <member name="M:Elasticsearch.Net.CatRecoveryRequestParameters.V(System.Boolean)">
            <summary>Verbose mode. Display column headers</summary>
        </member>
        <member name="T:Elasticsearch.Net.CatShardsRequestParameters">
            <summary>Request parameters descriptor for CatShards
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-shards.html
            </pre>
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.CatShardsRequestParameters.Local(System.Boolean)">
            <summary>Return local information, do not retrieve the state from master node (default: false)</summary>
        </member>
        <member name="M:Elasticsearch.Net.CatShardsRequestParameters.MasterTimeout(System.String)">
            <summary>Explicit operation timeout for connection to master node</summary>
        </member>
        <member name="M:Elasticsearch.Net.CatShardsRequestParameters.H(System.String[])">
            <summary>Comma-separated list of column names to display</summary>
        </member>
        <member name="M:Elasticsearch.Net.CatShardsRequestParameters.Help(System.Boolean)">
            <summary>Return help information</summary>
        </member>
        <member name="M:Elasticsearch.Net.CatShardsRequestParameters.V(System.Boolean)">
            <summary>Verbose mode. Display column headers</summary>
        </member>
        <member name="T:Elasticsearch.Net.CatThreadPoolRequestParameters">
            <summary>Request parameters descriptor for CatThreadPool
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/cat-thread-pool.html
            </pre>
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.CatThreadPoolRequestParameters.Local(System.Boolean)">
            <summary>Return local information, do not retrieve the state from master node (default: false)</summary>
        </member>
        <member name="M:Elasticsearch.Net.CatThreadPoolRequestParameters.MasterTimeout(System.String)">
            <summary>Explicit operation timeout for connection to master node</summary>
        </member>
        <member name="M:Elasticsearch.Net.CatThreadPoolRequestParameters.H(System.String[])">
            <summary>Comma-separated list of column names to display</summary>
        </member>
        <member name="M:Elasticsearch.Net.CatThreadPoolRequestParameters.Help(System.Boolean)">
            <summary>Return help information</summary>
        </member>
        <member name="M:Elasticsearch.Net.CatThreadPoolRequestParameters.V(System.Boolean)">
            <summary>Verbose mode. Display column headers</summary>
        </member>
        <member name="M:Elasticsearch.Net.CatThreadPoolRequestParameters.FullId(System.Boolean)">
            <summary>Enables displaying the complete node ids</summary>
        </member>
        <member name="T:Elasticsearch.Net.ClearScrollRequestParameters">
            <summary>Request parameters descriptor for ClearScroll
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-request-scroll.html
            </pre>
            </summary>
        </member>
        <member name="T:Elasticsearch.Net.ClusterGetSettingsRequestParameters">
            <summary>Request parameters descriptor for ClusterGetSettings
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-update-settings.html
            </pre>
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.ClusterGetSettingsRequestParameters.FlatSettings(System.Boolean)">
            <summary>Return settings in flat format (default: false)</summary>
        </member>
        <member name="M:Elasticsearch.Net.ClusterGetSettingsRequestParameters.MasterTimeout(System.String)">
            <summary>Explicit operation timeout for connection to master node</summary>
        </member>
        <member name="M:Elasticsearch.Net.ClusterGetSettingsRequestParameters.Timeout(System.String)">
            <summary>Explicit operation timeout</summary>
        </member>
        <member name="T:Elasticsearch.Net.ClusterHealthRequestParameters">
            <summary>Request parameters descriptor for ClusterHealth
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-health.html
            </pre>
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.ClusterHealthRequestParameters.Level(Elasticsearch.Net.Level)">
            <summary>Specify the level of detail for returned information</summary>
        </member>
        <member name="M:Elasticsearch.Net.ClusterHealthRequestParameters.Local(System.Boolean)">
            <summary>Return local information, do not retrieve the state from master node (default: false)</summary>
        </member>
        <member name="M:Elasticsearch.Net.ClusterHealthRequestParameters.MasterTimeout(System.String)">
            <summary>Explicit operation timeout for connection to master node</summary>
        </member>
        <member name="M:Elasticsearch.Net.ClusterHealthRequestParameters.Timeout(System.String)">
            <summary>Explicit operation timeout</summary>
        </member>
        <member name="M:Elasticsearch.Net.ClusterHealthRequestParameters.WaitForActiveShards(System.Int64)">
            <summary>Wait until the specified number of shards is active</summary>
        </member>
        <member name="M:Elasticsearch.Net.ClusterHealthRequestParameters.WaitForNodes(System.String)">
            <summary>Wait until the specified number of nodes is available</summary>
        </member>
        <member name="M:Elasticsearch.Net.ClusterHealthRequestParameters.WaitForRelocatingShards(System.Int64)">
            <summary>Wait until the specified number of relocating shards is finished</summary>
        </member>
        <member name="M:Elasticsearch.Net.ClusterHealthRequestParameters.WaitForStatus(Elasticsearch.Net.WaitForStatus)">
            <summary>Wait until cluster is in a specific state</summary>
        </member>
        <member name="T:Elasticsearch.Net.ClusterPendingTasksRequestParameters">
            <summary>Request parameters descriptor for ClusterPendingTasks
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-pending.html
            </pre>
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.ClusterPendingTasksRequestParameters.Local(System.Boolean)">
            <summary>Return local information, do not retrieve the state from master node (default: false)</summary>
        </member>
        <member name="M:Elasticsearch.Net.ClusterPendingTasksRequestParameters.MasterTimeout(System.String)">
            <summary>Specify timeout for connection to master</summary>
        </member>
        <member name="T:Elasticsearch.Net.ClusterSettingsRequestParameters">
            <summary>Request parameters descriptor for ClusterPutSettings
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-update-settings.html
            </pre>
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.ClusterSettingsRequestParameters.FlatSettings(System.Boolean)">
            <summary>Return settings in flat format (default: false)</summary>
        </member>
        <member name="T:Elasticsearch.Net.ClusterRerouteRequestParameters">
            <summary>Request parameters descriptor for ClusterReroute
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-reroute.html
            </pre>
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.ClusterRerouteRequestParameters.DryRun(System.Boolean)">
            <summary>Simulate the operation only and return the resulting state</summary>
        </member>
        <member name="M:Elasticsearch.Net.ClusterRerouteRequestParameters.Explain(System.Boolean)">
            <summary>Return an explanation of why the commands can or cannot be executed</summary>
        </member>
        <member name="M:Elasticsearch.Net.ClusterRerouteRequestParameters.FilterMetadata(System.Boolean)">
            <summary>Don&#39;t return cluster state metadata (default: false)</summary>
        </member>
        <member name="M:Elasticsearch.Net.ClusterRerouteRequestParameters.MasterTimeout(System.String)">
            <summary>Explicit operation timeout for connection to master node</summary>
        </member>
        <member name="M:Elasticsearch.Net.ClusterRerouteRequestParameters.Timeout(System.String)">
            <summary>Explicit operation timeout</summary>
        </member>
        <member name="T:Elasticsearch.Net.ClusterStateRequestParameters">
            <summary>Request parameters descriptor for ClusterState
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-state.html
            </pre>
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.ClusterStateRequestParameters.Local(System.Boolean)">
            <summary>Return local information, do not retrieve the state from master node (default: false)</summary>
        </member>
        <member name="M:Elasticsearch.Net.ClusterStateRequestParameters.MasterTimeout(System.String)">
            <summary>Specify timeout for connection to master</summary>
        </member>
        <member name="M:Elasticsearch.Net.ClusterStateRequestParameters.FlatSettings(System.Boolean)">
            <summary>Return settings in flat format (default: false)</summary>
        </member>
        <member name="T:Elasticsearch.Net.ClusterStatsRequestParameters">
            <summary>Request parameters descriptor for ClusterStats
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-stats.html
            </pre>
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.ClusterStatsRequestParameters.FlatSettings(System.Boolean)">
            <summary>Return settings in flat format (default: false)</summary>
        </member>
        <member name="M:Elasticsearch.Net.ClusterStatsRequestParameters.Human(System.Boolean)">
            <summary>Whether to return time and byte values in human-readable format.</summary>
        </member>
        <member name="T:Elasticsearch.Net.CountRequestParameters">
            <summary>Request parameters descriptor for Count
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-count.html
            </pre>
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.CountRequestParameters.IgnoreUnavailable(System.Boolean)">
            <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
        </member>
        <member name="M:Elasticsearch.Net.CountRequestParameters.AllowNoIndices(System.Boolean)">
            <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
        </member>
        <member name="M:Elasticsearch.Net.CountRequestParameters.ExpandWildcards(Elasticsearch.Net.ExpandWildcards)">
            <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        </member>
        <member name="M:Elasticsearch.Net.CountRequestParameters.MinScore(System.Double)">
            <summary>Include only documents with a specific `_score` value in the result</summary>
        </member>
        <member name="M:Elasticsearch.Net.CountRequestParameters.Preference(System.String)">
            <summary>Specify the node or shard the operation should be performed on (default: random)</summary>
        </member>
        <member name="M:Elasticsearch.Net.CountRequestParameters.Routing(System.String)">
            <summary>Specific routing value</summary>
        </member>
        <member name="M:Elasticsearch.Net.CountRequestParameters.Source(System.String)">
            <summary>The URL-encoded query definition (instead of using the request body)</summary>
        </member>
        <member name="T:Elasticsearch.Net.PercolateCountRequestParameters">
            <summary>Request parameters descriptor for CountPercolateGet
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html
            </pre>
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.PercolateCountRequestParameters.Routing(System.String[])">
            <summary>A comma-separated list of specific routing values</summary>
        </member>
        <member name="M:Elasticsearch.Net.PercolateCountRequestParameters.Preference(System.String)">
            <summary>Specify the node or shard the operation should be performed on (default: random)</summary>
        </member>
        <member name="M:Elasticsearch.Net.PercolateCountRequestParameters.IgnoreUnavailable(System.Boolean)">
            <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
        </member>
        <member name="M:Elasticsearch.Net.PercolateCountRequestParameters.AllowNoIndices(System.Boolean)">
            <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
        </member>
        <member name="M:Elasticsearch.Net.PercolateCountRequestParameters.ExpandWildcards(Elasticsearch.Net.ExpandWildcards)">
            <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        </member>
        <member name="M:Elasticsearch.Net.PercolateCountRequestParameters.PercolateIndex(System.String)">
            <summary>The index to count percolate the document into. Defaults to index.</summary>
        </member>
        <member name="M:Elasticsearch.Net.PercolateCountRequestParameters.PercolateType(System.String)">
            <summary>The type to count percolate document into. Defaults to type.</summary>
        </member>
        <member name="M:Elasticsearch.Net.PercolateCountRequestParameters.Version(System.Int64)">
            <summary>Explicit version number for concurrency control</summary>
        </member>
        <member name="M:Elasticsearch.Net.PercolateCountRequestParameters.VersionType(Elasticsearch.Net.VersionType)">
            <summary>Specific version type</summary>
        </member>
        <member name="T:Elasticsearch.Net.DeleteRequestParameters">
            <summary>Request parameters descriptor for Delete
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-delete.html
            </pre>
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.DeleteRequestParameters.Consistency(Elasticsearch.Net.Consistency)">
            <summary>Specific write consistency setting for the operation</summary>
        </member>
        <member name="M:Elasticsearch.Net.DeleteRequestParameters.Parent(System.String)">
            <summary>ID of parent document</summary>
        </member>
        <member name="M:Elasticsearch.Net.DeleteRequestParameters.Refresh(System.Boolean)">
            <summary>Refresh the index after performing the operation</summary>
        </member>
        <member name="M:Elasticsearch.Net.DeleteRequestParameters.Replication(Elasticsearch.Net.Replication)">
            <summary>Specific replication type</summary>
        </member>
        <member name="M:Elasticsearch.Net.DeleteRequestParameters.Routing(System.String)">
            <summary>Specific routing value</summary>
        </member>
        <member name="M:Elasticsearch.Net.DeleteRequestParameters.Timeout(System.String)">
            <summary>Explicit operation timeout</summary>
        </member>
        <member name="M:Elasticsearch.Net.DeleteRequestParameters.Version(System.Int64)">
            <summary>Explicit version number for concurrency control</summary>
        </member>
        <member name="M:Elasticsearch.Net.DeleteRequestParameters.VersionType(Elasticsearch.Net.VersionType)">
            <summary>Specific version type</summary>
        </member>
        <member name="T:Elasticsearch.Net.DeleteByQueryRequestParameters">
            <summary>Request parameters descriptor for DeleteByQuery
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-delete-by-query.html
            </pre>
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.DeleteByQueryRequestParameters.Analyzer(System.String)">
            <summary>The analyzer to use for the query string</summary>
        </member>
        <member name="M:Elasticsearch.Net.DeleteByQueryRequestParameters.Consistency(Elasticsearch.Net.Consistency)">
            <summary>Specific write consistency setting for the operation</summary>
        </member>
        <member name="M:Elasticsearch.Net.DeleteByQueryRequestParameters.DefaultOperator(Elasticsearch.Net.DefaultOperator)">
            <summary>The default operator for query string query (AND or OR)</summary>
        </member>
        <member name="M:Elasticsearch.Net.DeleteByQueryRequestParameters.Df(System.String)">
            <summary>The field to use as default where no field prefix is given in the query string</summary>
        </member>
        <member name="M:Elasticsearch.Net.DeleteByQueryRequestParameters.IgnoreUnavailable(System.Boolean)">
            <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
        </member>
        <member name="M:Elasticsearch.Net.DeleteByQueryRequestParameters.AllowNoIndices(System.Boolean)">
            <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
        </member>
        <member name="M:Elasticsearch.Net.DeleteByQueryRequestParameters.ExpandWildcards(Elasticsearch.Net.ExpandWildcards)">
            <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        </member>
        <member name="M:Elasticsearch.Net.DeleteByQueryRequestParameters.Replication(Elasticsearch.Net.Replication)">
            <summary>Specific replication type</summary>
        </member>
        <member name="M:Elasticsearch.Net.DeleteByQueryRequestParameters.Q(System.String)">
            <summary>Query in the Lucene query string syntax</summary>
        </member>
        <member name="M:Elasticsearch.Net.DeleteByQueryRequestParameters.Routing(System.String)">
            <summary>Specific routing value</summary>
        </member>
        <member name="M:Elasticsearch.Net.DeleteByQueryRequestParameters.Source(System.String)">
            <summary>The URL-encoded query definition (instead of using the request body)</summary>
        </member>
        <member name="M:Elasticsearch.Net.DeleteByQueryRequestParameters.Timeout(System.String)">
            <summary>Explicit operation timeout</summary>
        </member>
        <member name="T:Elasticsearch.Net.DocumentExistsRequestParameters">
            <summary>Request parameters descriptor for Exists
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-get.html
            </pre>
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.DocumentExistsRequestParameters.Parent(System.String)">
            <summary>The ID of the parent document</summary>
        </member>
        <member name="M:Elasticsearch.Net.DocumentExistsRequestParameters.Preference(System.String)">
            <summary>Specify the node or shard the operation should be performed on (default: random)</summary>
        </member>
        <member name="M:Elasticsearch.Net.DocumentExistsRequestParameters.Realtime(System.Boolean)">
            <summary>Specify whether to perform the operation in realtime or search mode</summary>
        </member>
        <member name="M:Elasticsearch.Net.DocumentExistsRequestParameters.Refresh(System.Boolean)">
            <summary>Refresh the shard containing the document before performing the operation</summary>
        </member>
        <member name="M:Elasticsearch.Net.DocumentExistsRequestParameters.Routing(System.String)">
            <summary>Specific routing value</summary>
        </member>
        <member name="T:Elasticsearch.Net.ExplainRequestParameters">
            <summary>Request parameters descriptor for ExplainGet
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-explain.html
            </pre>
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.ExplainRequestParameters.AnalyzeWildcard(System.Boolean)">
            <summary>Specify whether wildcards and prefix queries in the query string query should be analyzed (default: false)</summary>
        </member>
        <member name="M:Elasticsearch.Net.ExplainRequestParameters.Analyzer(System.String)">
            <summary>The analyzer for the query string query</summary>
        </member>
        <member name="M:Elasticsearch.Net.ExplainRequestParameters.DefaultOperator(Elasticsearch.Net.DefaultOperator)">
            <summary>The default operator for query string query (AND or OR)</summary>
        </member>
        <member name="M:Elasticsearch.Net.ExplainRequestParameters.Df(System.String)">
            <summary>The default field for query string query (default: _all)</summary>
        </member>
        <member name="M:Elasticsearch.Net.ExplainRequestParameters.Fields(System.String[])">
            <summary>A comma-separated list of fields to return in the response</summary>
        </member>
        <member name="M:Elasticsearch.Net.ExplainRequestParameters.Lenient(System.Boolean)">
            <summary>Specify whether format-based query failures (such as providing text to a numeric field) should be ignored</summary>
        </member>
        <member name="M:Elasticsearch.Net.ExplainRequestParameters.LowercaseExpandedTerms(System.Boolean)">
            <summary>Specify whether query terms should be lowercased</summary>
        </member>
        <member name="M:Elasticsearch.Net.ExplainRequestParameters.Parent(System.String)">
            <summary>The ID of the parent document</summary>
        </member>
        <member name="M:Elasticsearch.Net.ExplainRequestParameters.Preference(System.String)">
            <summary>Specify the node or shard the operation should be performed on (default: random)</summary>
        </member>
        <member name="M:Elasticsearch.Net.ExplainRequestParameters.Q(System.String)">
            <summary>Query in the Lucene query string syntax</summary>
        </member>
        <member name="M:Elasticsearch.Net.ExplainRequestParameters.Routing(System.String)">
            <summary>Specific routing value</summary>
        </member>
        <member name="M:Elasticsearch.Net.ExplainRequestParameters.Source(System.String)">
            <summary>The URL-encoded query definition (instead of using the request body)</summary>
        </member>
        <member name="M:Elasticsearch.Net.ExplainRequestParameters.SourceEnabled(System.String[])">
            <summary>True or false to return the _source field or not, or a list of fields to return</summary>
        </member>
        <member name="M:Elasticsearch.Net.ExplainRequestParameters.SourceExclude(System.String[])">
            <summary>A list of fields to exclude from the returned _source field</summary>
        </member>
        <member name="M:Elasticsearch.Net.ExplainRequestParameters.SourceInclude(System.String[])">
            <summary>A list of fields to extract and return from the _source field</summary>
        </member>
        <member name="T:Elasticsearch.Net.GetRequestParameters">
            <summary>Request parameters descriptor for Get
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-get.html
            </pre>
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.GetRequestParameters.Fields(System.String[])">
            <summary>A comma-separated list of fields to return in the response</summary>
        </member>
        <member name="M:Elasticsearch.Net.GetRequestParameters.Parent(System.String)">
            <summary>The ID of the parent document</summary>
        </member>
        <member name="M:Elasticsearch.Net.GetRequestParameters.Preference(System.String)">
            <summary>Specify the node or shard the operation should be performed on (default: random)</summary>
        </member>
        <member name="M:Elasticsearch.Net.GetRequestParameters.Realtime(System.Boolean)">
            <summary>Specify whether to perform the operation in realtime or search mode</summary>
        </member>
        <member name="M:Elasticsearch.Net.GetRequestParameters.Refresh(System.Boolean)">
            <summary>Refresh the shard containing the document before performing the operation</summary>
        </member>
        <member name="M:Elasticsearch.Net.GetRequestParameters.Routing(System.String)">
            <summary>Specific routing value</summary>
        </member>
        <member name="M:Elasticsearch.Net.GetRequestParameters.SourceEnabled(System.String[])">
            <summary>True or false to return the _source field or not, or a list of fields to return</summary>
        </member>
        <member name="M:Elasticsearch.Net.GetRequestParameters.SourceExclude(System.String[])">
            <summary>A list of fields to exclude from the returned _source field</summary>
        </member>
        <member name="M:Elasticsearch.Net.GetRequestParameters.SourceInclude(System.String[])">
            <summary>A list of fields to extract and return from the _source field</summary>
        </member>
        <member name="M:Elasticsearch.Net.GetRequestParameters.Version(System.Int64)">
            <summary>Explicit version number for concurrency control</summary>
        </member>
        <member name="M:Elasticsearch.Net.GetRequestParameters.VersionType(Elasticsearch.Net.VersionType)">
            <summary>Specific version type</summary>
        </member>
        <member name="T:Elasticsearch.Net.SourceRequestParameters">
            <summary>Request parameters descriptor for GetSource
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-get.html
            </pre>
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.SourceRequestParameters.Parent(System.String)">
            <summary>The ID of the parent document</summary>
        </member>
        <member name="M:Elasticsearch.Net.SourceRequestParameters.Preference(System.String)">
            <summary>Specify the node or shard the operation should be performed on (default: random)</summary>
        </member>
        <member name="M:Elasticsearch.Net.SourceRequestParameters.Realtime(System.Boolean)">
            <summary>Specify whether to perform the operation in realtime or search mode</summary>
        </member>
        <member name="M:Elasticsearch.Net.SourceRequestParameters.Refresh(System.Boolean)">
            <summary>Refresh the shard containing the document before performing the operation</summary>
        </member>
        <member name="M:Elasticsearch.Net.SourceRequestParameters.Routing(System.String)">
            <summary>Specific routing value</summary>
        </member>
        <member name="M:Elasticsearch.Net.SourceRequestParameters.SourceEnabled(System.String[])">
            <summary>True or false to return the _source field or not, or a list of fields to return</summary>
        </member>
        <member name="M:Elasticsearch.Net.SourceRequestParameters.SourceExclude(System.String[])">
            <summary>A list of fields to exclude from the returned _source field</summary>
        </member>
        <member name="M:Elasticsearch.Net.SourceRequestParameters.SourceInclude(System.String[])">
            <summary>A list of fields to extract and return from the _source field</summary>
        </member>
        <member name="M:Elasticsearch.Net.SourceRequestParameters.Version(System.Int64)">
            <summary>Explicit version number for concurrency control</summary>
        </member>
        <member name="M:Elasticsearch.Net.SourceRequestParameters.VersionType(Elasticsearch.Net.VersionType)">
            <summary>Specific version type</summary>
        </member>
        <member name="T:Elasticsearch.Net.IndexRequestParameters">
            <summary>Request parameters descriptor for Index
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-index_.html
            </pre>
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.IndexRequestParameters.Consistency(Elasticsearch.Net.Consistency)">
            <summary>Explicit write consistency setting for the operation</summary>
        </member>
        <member name="M:Elasticsearch.Net.IndexRequestParameters.OpType(Elasticsearch.Net.OpType)">
            <summary>Explicit operation type</summary>
        </member>
        <member name="M:Elasticsearch.Net.IndexRequestParameters.Parent(System.String)">
            <summary>ID of the parent document</summary>
        </member>
        <member name="M:Elasticsearch.Net.IndexRequestParameters.Refresh(System.Boolean)">
            <summary>Refresh the index after performing the operation</summary>
        </member>
        <member name="M:Elasticsearch.Net.IndexRequestParameters.Replication(Elasticsearch.Net.Replication)">
            <summary>Specific replication type</summary>
        </member>
        <member name="M:Elasticsearch.Net.IndexRequestParameters.Routing(System.String)">
            <summary>Specific routing value</summary>
        </member>
        <member name="M:Elasticsearch.Net.IndexRequestParameters.Timeout(System.String)">
            <summary>Explicit operation timeout</summary>
        </member>
        <member name="M:Elasticsearch.Net.IndexRequestParameters.Timestamp(System.String)">
            <summary>Explicit timestamp for the document</summary>
        </member>
        <member name="M:Elasticsearch.Net.IndexRequestParameters.Ttl(System.String)">
            <summary>Expiration time for the document</summary>
        </member>
        <member name="M:Elasticsearch.Net.IndexRequestParameters.Version(System.Int64)">
            <summary>Explicit version number for concurrency control</summary>
        </member>
        <member name="M:Elasticsearch.Net.IndexRequestParameters.VersionType(Elasticsearch.Net.VersionType)">
            <summary>Specific version type</summary>
        </member>
        <member name="T:Elasticsearch.Net.AnalyzeRequestParameters">
            <summary>Request parameters descriptor for IndicesAnalyzeGetForAll
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-analyze.html
            </pre>
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.AnalyzeRequestParameters.Analyzer(System.String)">
            <summary>The name of the analyzer to use</summary>
        </member>
        <member name="M:Elasticsearch.Net.AnalyzeRequestParameters.CharFilters(System.String[])">
            <summary>A comma-separated list of character filters to use for the analysis</summary>
        </member>
        <member name="M:Elasticsearch.Net.AnalyzeRequestParameters.Field(System.String)">
            <summary>Use the analyzer configured for this field (instead of passing the analyzer name)</summary>
        </member>
        <member name="M:Elasticsearch.Net.AnalyzeRequestParameters.Filters(System.String[])">
            <summary>A comma-separated list of filters to use for the analysis</summary>
        </member>
        <member name="M:Elasticsearch.Net.AnalyzeRequestParameters.Index(System.String)">
            <summary>The name of the index to scope the operation</summary>
        </member>
        <member name="M:Elasticsearch.Net.AnalyzeRequestParameters.PreferLocal(System.Boolean)">
            <summary>With `true`, specify that a local shard should be used if available, with `false`, use a random shard (default: true)</summary>
        </member>
        <member name="M:Elasticsearch.Net.AnalyzeRequestParameters.Text(System.String)">
            <summary>The text on which the analysis should be performed (when request body is not used)</summary>
        </member>
        <member name="M:Elasticsearch.Net.AnalyzeRequestParameters.Tokenizer(System.String)">
            <summary>The name of the tokenizer to use for the analysis</summary>
        </member>
        <member name="M:Elasticsearch.Net.AnalyzeRequestParameters.Format(Elasticsearch.Net.Format)">
            <summary>Format of the output</summary>
        </member>
        <member name="T:Elasticsearch.Net.ClearCacheRequestParameters">
            <summary>Request parameters descriptor for IndicesClearCacheForAll
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-clearcache.html
            </pre>
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.ClearCacheRequestParameters.FieldData(System.Boolean)">
            <summary>Clear field data</summary>
        </member>
        <member name="M:Elasticsearch.Net.ClearCacheRequestParameters.Fields(System.String[])">
            <summary>A comma-separated list of fields to clear when using the `field_data` parameter (default: all)</summary>
        </member>
        <member name="M:Elasticsearch.Net.ClearCacheRequestParameters.Filter(System.Boolean)">
            <summary>Clear filter caches</summary>
        </member>
        <member name="M:Elasticsearch.Net.ClearCacheRequestParameters.FilterCache(System.Boolean)">
            <summary>Clear filter caches</summary>
        </member>
        <member name="M:Elasticsearch.Net.ClearCacheRequestParameters.FilterKeys(System.Boolean)">
            <summary>A comma-separated list of keys to clear when using the `filter_cache` parameter (default: all)</summary>
        </member>
        <member name="M:Elasticsearch.Net.ClearCacheRequestParameters.Id(System.Boolean)">
            <summary>Clear ID caches for parent/child</summary>
        </member>
        <member name="M:Elasticsearch.Net.ClearCacheRequestParameters.IdCache(System.Boolean)">
            <summary>Clear ID caches for parent/child</summary>
        </member>
        <member name="M:Elasticsearch.Net.ClearCacheRequestParameters.IgnoreUnavailable(System.Boolean)">
            <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
        </member>
        <member name="M:Elasticsearch.Net.ClearCacheRequestParameters.AllowNoIndices(System.Boolean)">
            <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
        </member>
        <member name="M:Elasticsearch.Net.ClearCacheRequestParameters.ExpandWildcards(Elasticsearch.Net.ExpandWildcards)">
            <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        </member>
        <member name="M:Elasticsearch.Net.ClearCacheRequestParameters.Index(System.String[])">
            <summary>A comma-separated list of index name to limit the operation</summary>
        </member>
        <member name="M:Elasticsearch.Net.ClearCacheRequestParameters.Recycler(System.Boolean)">
            <summary>Clear the recycler cache</summary>
        </member>
        <member name="T:Elasticsearch.Net.CloseIndexRequestParameters">
            <summary>Request parameters descriptor for IndicesClose
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-open-close.html
            </pre>
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.CloseIndexRequestParameters.Timeout(System.String)">
            <summary>Explicit operation timeout</summary>
        </member>
        <member name="M:Elasticsearch.Net.CloseIndexRequestParameters.MasterTimeout(System.String)">
            <summary>Specify timeout for connection to master</summary>
        </member>
        <member name="M:Elasticsearch.Net.CloseIndexRequestParameters.IgnoreUnavailable(System.Boolean)">
            <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
        </member>
        <member name="M:Elasticsearch.Net.CloseIndexRequestParameters.AllowNoIndices(System.Boolean)">
            <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
        </member>
        <member name="M:Elasticsearch.Net.CloseIndexRequestParameters.ExpandWildcards(Elasticsearch.Net.ExpandWildcards)">
            <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        </member>
        <member name="T:Elasticsearch.Net.CreateIndexRequestParameters">
            <summary>Request parameters descriptor for IndicesCreate
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-create-index.html
            </pre>
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.CreateIndexRequestParameters.Timeout(System.String)">
            <summary>Explicit operation timeout</summary>
        </member>
        <member name="M:Elasticsearch.Net.CreateIndexRequestParameters.MasterTimeout(System.String)">
            <summary>Specify timeout for connection to master</summary>
        </member>
        <member name="T:Elasticsearch.Net.DeleteIndexRequestParameters">
            <summary>Request parameters descriptor for IndicesDelete
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-delete-index.html
            </pre>
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.DeleteIndexRequestParameters.Timeout(System.String)">
            <summary>Explicit operation timeout</summary>
        </member>
        <member name="M:Elasticsearch.Net.DeleteIndexRequestParameters.MasterTimeout(System.String)">
            <summary>Specify timeout for connection to master</summary>
        </member>
        <member name="T:Elasticsearch.Net.IndicesDeleteAliasRequestParameters">
            <summary>Request parameters descriptor for IndicesDeleteAlias
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html
            </pre>
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.IndicesDeleteAliasRequestParameters.Timeout(System.String)">
            <summary>Explicit timestamp for the document</summary>
        </member>
        <member name="M:Elasticsearch.Net.IndicesDeleteAliasRequestParameters.MasterTimeout(System.String)">
            <summary>Specify timeout for connection to master</summary>
        </member>
        <member name="T:Elasticsearch.Net.DeleteMappingRequestParameters">
            <summary>Request parameters descriptor for IndicesDeleteMapping
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-delete-mapping.html
            </pre>
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.DeleteMappingRequestParameters.MasterTimeout(System.String)">
            <summary>Specify timeout for connection to master</summary>
        </member>
        <member name="T:Elasticsearch.Net.DeleteTemplateRequestParameters">
            <summary>Request parameters descriptor for IndicesDeleteTemplateForAll
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-templates.html
            </pre>
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.DeleteTemplateRequestParameters.Timeout(System.String)">
            <summary>Explicit operation timeout</summary>
        </member>
        <member name="M:Elasticsearch.Net.DeleteTemplateRequestParameters.MasterTimeout(System.String)">
            <summary>Specify timeout for connection to master</summary>
        </member>
        <member name="T:Elasticsearch.Net.DeleteWarmerRequestParameters">
            <summary>Request parameters descriptor for IndicesDeleteWarmer
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html
            </pre>
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.DeleteWarmerRequestParameters.MasterTimeout(System.String)">
            <summary>Specify timeout for connection to master</summary>
        </member>
        <member name="T:Elasticsearch.Net.IndexExistsRequestParameters">
            <summary>Request parameters descriptor for IndicesExists
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-settings.html
            </pre>
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.IndexExistsRequestParameters.IgnoreUnavailable(System.Boolean)">
            <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
        </member>
        <member name="M:Elasticsearch.Net.IndexExistsRequestParameters.AllowNoIndices(System.Boolean)">
            <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
        </member>
        <member name="M:Elasticsearch.Net.IndexExistsRequestParameters.ExpandWildcards(Elasticsearch.Net.ExpandWildcards)">
            <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        </member>
        <member name="M:Elasticsearch.Net.IndexExistsRequestParameters.Local(System.Boolean)">
            <summary>Return local information, do not retrieve the state from master node (default: false)</summary>
        </member>
        <member name="T:Elasticsearch.Net.IndicesExistsAliasRequestParameters">
            <summary>Request parameters descriptor for IndicesExistsAliasForAll
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html
            </pre>
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.IndicesExistsAliasRequestParameters.IgnoreUnavailable(System.Boolean)">
            <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
        </member>
        <member name="M:Elasticsearch.Net.IndicesExistsAliasRequestParameters.AllowNoIndices(System.Boolean)">
            <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
        </member>
        <member name="M:Elasticsearch.Net.IndicesExistsAliasRequestParameters.ExpandWildcards(Elasticsearch.Net.ExpandWildcards)">
            <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        </member>
        <member name="M:Elasticsearch.Net.IndicesExistsAliasRequestParameters.Local(System.Boolean)">
            <summary>Return local information, do not retrieve the state from master node (default: false)</summary>
        </member>
        <member name="T:Elasticsearch.Net.IndicesExistsTemplateRequestParameters">
            <summary>Request parameters descriptor for IndicesExistsTemplateForAll
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-templates.html
            </pre>
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.IndicesExistsTemplateRequestParameters.Local(System.Boolean)">
            <summary>Return local information, do not retrieve the state from master node (default: false)</summary>
        </member>
        <member name="T:Elasticsearch.Net.IndicesExistsTypeRequestParameters">
            <summary>Request parameters descriptor for IndicesExistsType
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-types-exists.html
            </pre>
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.IndicesExistsTypeRequestParameters.IgnoreUnavailable(System.Boolean)">
            <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
        </member>
        <member name="M:Elasticsearch.Net.IndicesExistsTypeRequestParameters.AllowNoIndices(System.Boolean)">
            <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
        </member>
        <member name="M:Elasticsearch.Net.IndicesExistsTypeRequestParameters.ExpandWildcards(Elasticsearch.Net.ExpandWildcards)">
            <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        </member>
        <member name="M:Elasticsearch.Net.IndicesExistsTypeRequestParameters.Local(System.Boolean)">
            <summary>Return local information, do not retrieve the state from master node (default: false)</summary>
        </member>
        <member name="T:Elasticsearch.Net.FlushRequestParameters">
            <summary>Request parameters descriptor for IndicesFlushForAll
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-flush.html
            </pre>
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.FlushRequestParameters.Force(System.Boolean)">
            <summary>Whether a flush should be forced even if it is not necessarily needed ie. if no changes will be committed to the index. This is useful if transaction log IDs should be incremented even if no uncommitted changes are present. (This setting can be considered as internal)</summary>
        </member>
        <member name="M:Elasticsearch.Net.FlushRequestParameters.Full(System.Boolean)">
            <summary>If set to true a new index writer is created and settings that have been changed related to the index writer will be refreshed. Note: if a full flush is required for a setting to take effect this will be part of the settings update process and it not required to be executed by the user. (This setting can be considered as internal)</summary>
        </member>
        <member name="M:Elasticsearch.Net.FlushRequestParameters.IgnoreUnavailable(System.Boolean)">
            <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
        </member>
        <member name="M:Elasticsearch.Net.FlushRequestParameters.AllowNoIndices(System.Boolean)">
            <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
        </member>
        <member name="M:Elasticsearch.Net.FlushRequestParameters.ExpandWildcards(Elasticsearch.Net.ExpandWildcards)">
            <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        </member>
        <member name="T:Elasticsearch.Net.GetAliasRequestParameters">
            <summary>Request parameters descriptor for IndicesGetAliasForAll
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html
            </pre>
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.GetAliasRequestParameters.IgnoreUnavailable(System.Boolean)">
            <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
        </member>
        <member name="M:Elasticsearch.Net.GetAliasRequestParameters.AllowNoIndices(System.Boolean)">
            <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
        </member>
        <member name="M:Elasticsearch.Net.GetAliasRequestParameters.ExpandWildcards(Elasticsearch.Net.ExpandWildcards)">
            <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        </member>
        <member name="M:Elasticsearch.Net.GetAliasRequestParameters.Local(System.Boolean)">
            <summary>Return local information, do not retrieve the state from master node (default: false)</summary>
        </member>
        <member name="T:Elasticsearch.Net.GetAliasesRequestParameters">
            <summary>Request parameters descriptor for IndicesGetAliasesForAll
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html
            </pre>
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.GetAliasesRequestParameters.Timeout(System.String)">
            <summary>Explicit operation timeout</summary>
        </member>
        <member name="M:Elasticsearch.Net.GetAliasesRequestParameters.Local(System.Boolean)">
            <summary>Return local information, do not retrieve the state from master node (default: false)</summary>
        </member>
        <member name="T:Elasticsearch.Net.IndicesGetFieldMappingRequestParameters">
            <summary>Request parameters descriptor for IndicesGetFieldMappingForAll
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-field-mapping.html
            </pre>
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.IndicesGetFieldMappingRequestParameters.IncludeDefaults(System.Boolean)">
            <summary>Whether the default mapping values should be returned as well</summary>
        </member>
        <member name="M:Elasticsearch.Net.IndicesGetFieldMappingRequestParameters.IgnoreUnavailable(System.Boolean)">
            <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
        </member>
        <member name="M:Elasticsearch.Net.IndicesGetFieldMappingRequestParameters.AllowNoIndices(System.Boolean)">
            <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
        </member>
        <member name="M:Elasticsearch.Net.IndicesGetFieldMappingRequestParameters.ExpandWildcards(Elasticsearch.Net.ExpandWildcards)">
            <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        </member>
        <member name="M:Elasticsearch.Net.IndicesGetFieldMappingRequestParameters.Local(System.Boolean)">
            <summary>Return local information, do not retrieve the state from master node (default: false)</summary>
        </member>
        <member name="T:Elasticsearch.Net.GetMappingRequestParameters">
            <summary>Request parameters descriptor for IndicesGetMappingForAll
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-mapping.html
            </pre>
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.GetMappingRequestParameters.IgnoreUnavailable(System.Boolean)">
            <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
        </member>
        <member name="M:Elasticsearch.Net.GetMappingRequestParameters.AllowNoIndices(System.Boolean)">
            <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
        </member>
        <member name="M:Elasticsearch.Net.GetMappingRequestParameters.ExpandWildcards(Elasticsearch.Net.ExpandWildcards)">
            <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        </member>
        <member name="M:Elasticsearch.Net.GetMappingRequestParameters.Local(System.Boolean)">
            <summary>Return local information, do not retrieve the state from master node (default: false)</summary>
        </member>
        <member name="T:Elasticsearch.Net.GetIndexSettingsRequestParameters">
            <summary>Request parameters descriptor for IndicesGetSettingsForAll
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-mapping.html
            </pre>
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.GetIndexSettingsRequestParameters.IgnoreUnavailable(System.Boolean)">
            <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
        </member>
        <member name="M:Elasticsearch.Net.GetIndexSettingsRequestParameters.AllowNoIndices(System.Boolean)">
            <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
        </member>
        <member name="M:Elasticsearch.Net.GetIndexSettingsRequestParameters.ExpandWildcards(Elasticsearch.Net.ExpandWildcards)">
            <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        </member>
        <member name="M:Elasticsearch.Net.GetIndexSettingsRequestParameters.FlatSettings(System.Boolean)">
            <summary>Return settings in flat format (default: false)</summary>
        </member>
        <member name="M:Elasticsearch.Net.GetIndexSettingsRequestParameters.Local(System.Boolean)">
            <summary>Return local information, do not retrieve the state from master node (default: false)</summary>
        </member>
        <member name="T:Elasticsearch.Net.GetTemplateRequestParameters">
            <summary>Request parameters descriptor for IndicesGetTemplateForAll
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-templates.html
            </pre>
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.GetTemplateRequestParameters.FlatSettings(System.Boolean)">
            <summary>Return settings in flat format (default: false)</summary>
        </member>
        <member name="M:Elasticsearch.Net.GetTemplateRequestParameters.Local(System.Boolean)">
            <summary>Return local information, do not retrieve the state from master node (default: false)</summary>
        </member>
        <member name="T:Elasticsearch.Net.GetWarmerRequestParameters">
            <summary>Request parameters descriptor for IndicesGetWarmerForAll
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html
            </pre>
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.GetWarmerRequestParameters.IgnoreUnavailable(System.Boolean)">
            <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
        </member>
        <member name="M:Elasticsearch.Net.GetWarmerRequestParameters.AllowNoIndices(System.Boolean)">
            <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
        </member>
        <member name="M:Elasticsearch.Net.GetWarmerRequestParameters.ExpandWildcards(Elasticsearch.Net.ExpandWildcards)">
            <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        </member>
        <member name="M:Elasticsearch.Net.GetWarmerRequestParameters.Local(System.Boolean)">
            <summary>Return local information, do not retrieve the state from master node (default: false)</summary>
        </member>
        <member name="T:Elasticsearch.Net.OpenIndexRequestParameters">
            <summary>Request parameters descriptor for IndicesOpen
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-open-close.html
            </pre>
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.OpenIndexRequestParameters.Timeout(System.String)">
            <summary>Explicit operation timeout</summary>
        </member>
        <member name="M:Elasticsearch.Net.OpenIndexRequestParameters.MasterTimeout(System.String)">
            <summary>Specify timeout for connection to master</summary>
        </member>
        <member name="M:Elasticsearch.Net.OpenIndexRequestParameters.IgnoreUnavailable(System.Boolean)">
            <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
        </member>
        <member name="M:Elasticsearch.Net.OpenIndexRequestParameters.AllowNoIndices(System.Boolean)">
            <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
        </member>
        <member name="M:Elasticsearch.Net.OpenIndexRequestParameters.ExpandWildcards(Elasticsearch.Net.ExpandWildcards)">
            <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        </member>
        <member name="T:Elasticsearch.Net.OptimizeRequestParameters">
            <summary>Request parameters descriptor for IndicesOptimizeForAll
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-optimize.html
            </pre>
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.OptimizeRequestParameters.Flush(System.Boolean)">
            <summary>Specify whether the index should be flushed after performing the operation (default: true)</summary>
        </member>
        <member name="M:Elasticsearch.Net.OptimizeRequestParameters.IgnoreUnavailable(System.Boolean)">
            <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
        </member>
        <member name="M:Elasticsearch.Net.OptimizeRequestParameters.AllowNoIndices(System.Boolean)">
            <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
        </member>
        <member name="M:Elasticsearch.Net.OptimizeRequestParameters.ExpandWildcards(Elasticsearch.Net.ExpandWildcards)">
            <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        </member>
        <member name="M:Elasticsearch.Net.OptimizeRequestParameters.MaxNumSegments(System.Int64)">
            <summary>The number of segments the index should be merged into (default: dynamic)</summary>
        </member>
        <member name="M:Elasticsearch.Net.OptimizeRequestParameters.OnlyExpungeDeletes(System.Boolean)">
            <summary>Specify whether the operation should only expunge deleted documents</summary>
        </member>
        <member name="M:Elasticsearch.Net.OptimizeRequestParameters.OperationThreading(System.String)">
            <summary>TODO: ?</summary>
        </member>
        <member name="M:Elasticsearch.Net.OptimizeRequestParameters.WaitForMerge(System.Boolean)">
            <summary>Specify whether the request should block until the merge process is finished (default: true)</summary>
        </member>
        <member name="M:Elasticsearch.Net.OptimizeRequestParameters.Force(System.Boolean)">
            <summary>Force a merge operation to run, even if there is a single segment in the index (default: false)</summary>
        </member>
        <member name="T:Elasticsearch.Net.IndicesPutAliasRequestParameters">
            <summary>Request parameters descriptor for IndicesPutAlias
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html
            </pre>
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.IndicesPutAliasRequestParameters.Timeout(System.String)">
            <summary>Explicit timestamp for the document</summary>
        </member>
        <member name="M:Elasticsearch.Net.IndicesPutAliasRequestParameters.MasterTimeout(System.String)">
            <summary>Specify timeout for connection to master</summary>
        </member>
        <member name="T:Elasticsearch.Net.PutMappingRequestParameters">
            <summary>Request parameters descriptor for IndicesPutMapping
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-put-mapping.html
            </pre>
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.PutMappingRequestParameters.IgnoreConflicts(System.Boolean)">
            <summary>Specify whether to ignore conflicts while updating the mapping (default: false)</summary>
        </member>
        <member name="M:Elasticsearch.Net.PutMappingRequestParameters.Timeout(System.String)">
            <summary>Explicit operation timeout</summary>
        </member>
        <member name="M:Elasticsearch.Net.PutMappingRequestParameters.MasterTimeout(System.String)">
            <summary>Specify timeout for connection to master</summary>
        </member>
        <member name="M:Elasticsearch.Net.PutMappingRequestParameters.IgnoreUnavailable(System.Boolean)">
            <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
        </member>
        <member name="M:Elasticsearch.Net.PutMappingRequestParameters.AllowNoIndices(System.Boolean)">
            <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
        </member>
        <member name="M:Elasticsearch.Net.PutMappingRequestParameters.ExpandWildcards(Elasticsearch.Net.ExpandWildcards)">
            <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        </member>
        <member name="T:Elasticsearch.Net.UpdateSettingsRequestParameters">
            <summary>Request parameters descriptor for IndicesPutSettingsForAll
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-update-settings.html
            </pre>
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.UpdateSettingsRequestParameters.MasterTimeout(System.String)">
            <summary>Specify timeout for connection to master</summary>
        </member>
        <member name="M:Elasticsearch.Net.UpdateSettingsRequestParameters.IgnoreUnavailable(System.Boolean)">
            <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
        </member>
        <member name="M:Elasticsearch.Net.UpdateSettingsRequestParameters.AllowNoIndices(System.Boolean)">
            <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
        </member>
        <member name="M:Elasticsearch.Net.UpdateSettingsRequestParameters.ExpandWildcards(Elasticsearch.Net.ExpandWildcards)">
            <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        </member>
        <member name="M:Elasticsearch.Net.UpdateSettingsRequestParameters.FlatSettings(System.Boolean)">
            <summary>Return settings in flat format (default: false)</summary>
        </member>
        <member name="T:Elasticsearch.Net.PutTemplateRequestParameters">
            <summary>Request parameters descriptor for IndicesPutTemplateForAll
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-templates.html
            </pre>
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.PutTemplateRequestParameters.Timeout(System.String)">
            <summary>Explicit operation timeout</summary>
        </member>
        <member name="M:Elasticsearch.Net.PutTemplateRequestParameters.MasterTimeout(System.String)">
            <summary>Specify timeout for connection to master</summary>
        </member>
        <member name="M:Elasticsearch.Net.PutTemplateRequestParameters.FlatSettings(System.Boolean)">
            <summary>Return settings in flat format (default: false)</summary>
        </member>
        <member name="T:Elasticsearch.Net.PutWarmerRequestParameters">
            <summary>Request parameters descriptor for IndicesPutWarmerForAll
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html
            </pre>
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.PutWarmerRequestParameters.MasterTimeout(System.String)">
            <summary>Specify timeout for connection to master</summary>
        </member>
        <member name="M:Elasticsearch.Net.PutWarmerRequestParameters.IgnoreUnavailable(System.Boolean)">
            <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed) in the search request to warm</summary>
        </member>
        <member name="M:Elasticsearch.Net.PutWarmerRequestParameters.AllowNoIndices(System.Boolean)">
            <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices in the search request to warm. (This includes `_all` string or when no indices have been specified)</summary>
        </member>
        <member name="M:Elasticsearch.Net.PutWarmerRequestParameters.ExpandWildcards(Elasticsearch.Net.ExpandWildcards)">
            <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both, in the search request to warm.</summary>
        </member>
        <member name="T:Elasticsearch.Net.IndicesRecoveryRequestParameters">
            <summary>Request parameters descriptor for IndicesRecoveryForAll
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/indices-recovery.html
            </pre>
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.IndicesRecoveryRequestParameters.Detailed(System.Boolean)">
            <summary>Whether to display detailed information about shard recovery</summary>
        </member>
        <member name="M:Elasticsearch.Net.IndicesRecoveryRequestParameters.ActiveOnly(System.Boolean)">
            <summary>Display only those recoveries that are currently on-going</summary>
        </member>
        <member name="M:Elasticsearch.Net.IndicesRecoveryRequestParameters.Human(System.Boolean)">
            <summary>Whether to return time and byte values in human-readable format.</summary>
        </member>
        <member name="T:Elasticsearch.Net.RefreshRequestParameters">
            <summary>Request parameters descriptor for IndicesRefreshForAll
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-refresh.html
            </pre>
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.RefreshRequestParameters.IgnoreUnavailable(System.Boolean)">
            <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
        </member>
        <member name="M:Elasticsearch.Net.RefreshRequestParameters.AllowNoIndices(System.Boolean)">
            <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
        </member>
        <member name="M:Elasticsearch.Net.RefreshRequestParameters.ExpandWildcards(Elasticsearch.Net.ExpandWildcards)">
            <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        </member>
        <member name="M:Elasticsearch.Net.RefreshRequestParameters.Force(System.Boolean)">
            <summary>Force a refresh even if not required</summary>
        </member>
        <member name="M:Elasticsearch.Net.RefreshRequestParameters.OperationThreading(System.String)">
            <summary>TODO: ?</summary>
        </member>
        <member name="T:Elasticsearch.Net.SegmentsRequestParameters">
            <summary>Request parameters descriptor for IndicesSegmentsForAll
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-segments.html
            </pre>
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.SegmentsRequestParameters.IgnoreUnavailable(System.Boolean)">
            <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
        </member>
        <member name="M:Elasticsearch.Net.SegmentsRequestParameters.AllowNoIndices(System.Boolean)">
            <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
        </member>
        <member name="M:Elasticsearch.Net.SegmentsRequestParameters.ExpandWildcards(Elasticsearch.Net.ExpandWildcards)">
            <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        </member>
        <member name="M:Elasticsearch.Net.SegmentsRequestParameters.Human(System.Boolean)">
            <summary>Whether to return time and byte values in human-readable format.</summary>
        </member>
        <member name="M:Elasticsearch.Net.SegmentsRequestParameters.OperationThreading(System.String)">
            <summary>TODO: ?</summary>
        </member>
        <member name="T:Elasticsearch.Net.IndicesStatsRequestParameters">
            <summary>Request parameters descriptor for IndicesStatsForAll
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-stats.html
            </pre>
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.IndicesStatsRequestParameters.CompletionFields(System.String[])">
            <summary>A comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards)</summary>
        </member>
        <member name="M:Elasticsearch.Net.IndicesStatsRequestParameters.FielddataFields(System.String[])">
            <summary>A comma-separated list of fields for `fielddata` index metric (supports wildcards)</summary>
        </member>
        <member name="M:Elasticsearch.Net.IndicesStatsRequestParameters.Fields(System.String[])">
            <summary>A comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards)</summary>
        </member>
        <member name="M:Elasticsearch.Net.IndicesStatsRequestParameters.Groups(System.Boolean)">
            <summary>A comma-separated list of search groups for `search` index metric</summary>
        </member>
        <member name="M:Elasticsearch.Net.IndicesStatsRequestParameters.Human(System.Boolean)">
            <summary>Whether to return time and byte values in human-readable format.</summary>
        </member>
        <member name="M:Elasticsearch.Net.IndicesStatsRequestParameters.Level(Elasticsearch.Net.Level)">
            <summary>Return stats aggregated at cluster, index or shard level</summary>
        </member>
        <member name="T:Elasticsearch.Net.IndicesStatusRequestParameters">
            <summary>Request parameters descriptor for IndicesStatusForAll
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-status.html
            </pre>
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.IndicesStatusRequestParameters.IgnoreUnavailable(System.Boolean)">
            <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
        </member>
        <member name="M:Elasticsearch.Net.IndicesStatusRequestParameters.AllowNoIndices(System.Boolean)">
            <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
        </member>
        <member name="M:Elasticsearch.Net.IndicesStatusRequestParameters.ExpandWildcards(Elasticsearch.Net.ExpandWildcards)">
            <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        </member>
        <member name="M:Elasticsearch.Net.IndicesStatusRequestParameters.Human(System.Boolean)">
            <summary>Whether to return time and byte values in human-readable format.</summary>
        </member>
        <member name="M:Elasticsearch.Net.IndicesStatusRequestParameters.OperationThreading(System.String)">
            <summary>TODO: ?</summary>
        </member>
        <member name="M:Elasticsearch.Net.IndicesStatusRequestParameters.Recovery(System.Boolean)">
            <summary>Return information about shard recovery</summary>
        </member>
        <member name="M:Elasticsearch.Net.IndicesStatusRequestParameters.Snapshot(System.Boolean)">
            <summary>TODO: ?</summary>
        </member>
        <member name="T:Elasticsearch.Net.AliasRequestParameters">
            <summary>Request parameters descriptor for IndicesUpdateAliasesForAll
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html
            </pre>
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.AliasRequestParameters.Timeout(System.String)">
            <summary>Request timeout</summary>
        </member>
        <member name="M:Elasticsearch.Net.AliasRequestParameters.MasterTimeout(System.String)">
            <summary>Specify timeout for connection to master</summary>
        </member>
        <member name="T:Elasticsearch.Net.ValidateQueryRequestParameters">
            <summary>Request parameters descriptor for IndicesValidateQueryGetForAll
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-validate.html
            </pre>
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.ValidateQueryRequestParameters.Explain(System.Boolean)">
            <summary>Return detailed information about the error</summary>
        </member>
        <member name="M:Elasticsearch.Net.ValidateQueryRequestParameters.IgnoreUnavailable(System.Boolean)">
            <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
        </member>
        <member name="M:Elasticsearch.Net.ValidateQueryRequestParameters.AllowNoIndices(System.Boolean)">
            <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
        </member>
        <member name="M:Elasticsearch.Net.ValidateQueryRequestParameters.ExpandWildcards(Elasticsearch.Net.ExpandWildcards)">
            <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        </member>
        <member name="M:Elasticsearch.Net.ValidateQueryRequestParameters.OperationThreading(System.String)">
            <summary>TODO: ?</summary>
        </member>
        <member name="M:Elasticsearch.Net.ValidateQueryRequestParameters.Source(System.String)">
            <summary>The URL-encoded query definition (instead of using the request body)</summary>
        </member>
        <member name="M:Elasticsearch.Net.ValidateQueryRequestParameters.Q(System.String)">
            <summary>Query in the Lucene query string syntax</summary>
        </member>
        <member name="T:Elasticsearch.Net.InfoRequestParameters">
            <summary>Request parameters descriptor for Info
            <pre>
            http://www.elasticsearch.org/guide/
            </pre>
            </summary>
        </member>
        <member name="T:Elasticsearch.Net.ListBenchmarksRequestParameters">
            <summary>Request parameters descriptor for ListBenchmarks
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-benchmark.html
            </pre>
            </summary>
        </member>
        <member name="T:Elasticsearch.Net.MultiGetRequestParameters">
            <summary>Request parameters descriptor for MgetGet
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-get.html
            </pre>
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.MultiGetRequestParameters.Fields(System.String[])">
            <summary>A comma-separated list of fields to return in the response</summary>
        </member>
        <member name="M:Elasticsearch.Net.MultiGetRequestParameters.Preference(System.String)">
            <summary>Specify the node or shard the operation should be performed on (default: random)</summary>
        </member>
        <member name="M:Elasticsearch.Net.MultiGetRequestParameters.Realtime(System.Boolean)">
            <summary>Specify whether to perform the operation in realtime or search mode</summary>
        </member>
        <member name="M:Elasticsearch.Net.MultiGetRequestParameters.Refresh(System.Boolean)">
            <summary>Refresh the shard containing the document before performing the operation</summary>
        </member>
        <member name="M:Elasticsearch.Net.MultiGetRequestParameters.SourceEnabled(System.String[])">
            <summary>True or false to return the _source field or not, or a list of fields to return</summary>
        </member>
        <member name="M:Elasticsearch.Net.MultiGetRequestParameters.SourceExclude(System.String[])">
            <summary>A list of fields to exclude from the returned _source field</summary>
        </member>
        <member name="M:Elasticsearch.Net.MultiGetRequestParameters.SourceInclude(System.String[])">
            <summary>A list of fields to extract and return from the _source field</summary>
        </member>
        <member name="T:Elasticsearch.Net.MoreLikeThisRequestParameters">
            <summary>Request parameters descriptor for MltGet
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-more-like-this.html
            </pre>
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.MoreLikeThisRequestParameters.BoostTerms(System.Double)">
            <summary>The boost factor</summary>
        </member>
        <member name="M:Elasticsearch.Net.MoreLikeThisRequestParameters.MaxDocFreq(System.Int64)">
            <summary>The word occurrence frequency as count: words with higher occurrence in the corpus will be ignored</summary>
        </member>
        <member name="M:Elasticsearch.Net.MoreLikeThisRequestParameters.MaxQueryTerms(System.Int64)">
            <summary>The maximum query terms to be included in the generated query</summary>
        </member>
        <member name="M:Elasticsearch.Net.MoreLikeThisRequestParameters.MaxWordLength(System.Int64)">
            <summary>The minimum length of the word: longer words will be ignored</summary>
        </member>
        <member name="M:Elasticsearch.Net.MoreLikeThisRequestParameters.MinDocFreq(System.Int64)">
            <summary>The word occurrence frequency as count: words with lower occurrence in the corpus will be ignored</summary>
        </member>
        <member name="M:Elasticsearch.Net.MoreLikeThisRequestParameters.MinTermFreq(System.Int64)">
            <summary>The term frequency as percent: terms with lower occurence in the source document will be ignored</summary>
        </member>
        <member name="M:Elasticsearch.Net.MoreLikeThisRequestParameters.MinWordLength(System.Int64)">
            <summary>The minimum length of the word: shorter words will be ignored</summary>
        </member>
        <member name="M:Elasticsearch.Net.MoreLikeThisRequestParameters.MltFields(System.String[])">
            <summary>Specific fields to perform the query against</summary>
        </member>
        <member name="M:Elasticsearch.Net.MoreLikeThisRequestParameters.PercentTermsToMatch(System.Double)">
            <summary>How many terms have to match in order to consider the document a match (default: 0.3)</summary>
        </member>
        <member name="M:Elasticsearch.Net.MoreLikeThisRequestParameters.Routing(System.String)">
            <summary>Specific routing value</summary>
        </member>
        <member name="M:Elasticsearch.Net.MoreLikeThisRequestParameters.SearchFrom(System.Int64)">
            <summary>The offset from which to return results</summary>
        </member>
        <member name="M:Elasticsearch.Net.MoreLikeThisRequestParameters.SearchIndices(System.String[])">
            <summary>A comma-separated list of indices to perform the query against (default: the index containing the document)</summary>
        </member>
        <member name="M:Elasticsearch.Net.MoreLikeThisRequestParameters.SearchQueryHint(System.String)">
            <summary>The search query hint</summary>
        </member>
        <member name="M:Elasticsearch.Net.MoreLikeThisRequestParameters.SearchScroll(System.String)">
            <summary>A scroll search request definition</summary>
        </member>
        <member name="M:Elasticsearch.Net.MoreLikeThisRequestParameters.SearchSize(System.Int64)">
            <summary>The number of documents to return (default: 10)</summary>
        </member>
        <member name="M:Elasticsearch.Net.MoreLikeThisRequestParameters.SearchSource(System.String)">
            <summary>A specific search request definition (instead of using the request body)</summary>
        </member>
        <member name="M:Elasticsearch.Net.MoreLikeThisRequestParameters.SearchType(System.String)">
            <summary>Specific search type (eg. `dfs_then_fetch`, `count`, etc)</summary>
        </member>
        <member name="M:Elasticsearch.Net.MoreLikeThisRequestParameters.SearchTypes(System.String[])">
            <summary>A comma-separated list of types to perform the query against (default: the same type as the document)</summary>
        </member>
        <member name="M:Elasticsearch.Net.MoreLikeThisRequestParameters.StopWords(System.String[])">
            <summary>A list of stop words to be ignored</summary>
        </member>
        <member name="T:Elasticsearch.Net.MpercolateRequestParameters">
            <summary>Request parameters descriptor for MpercolateGet
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html
            </pre>
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.MpercolateRequestParameters.IgnoreUnavailable(System.Boolean)">
            <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
        </member>
        <member name="M:Elasticsearch.Net.MpercolateRequestParameters.AllowNoIndices(System.Boolean)">
            <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
        </member>
        <member name="M:Elasticsearch.Net.MpercolateRequestParameters.ExpandWildcards(Elasticsearch.Net.ExpandWildcards)">
            <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        </member>
        <member name="T:Elasticsearch.Net.MultiSearchRequestParameters">
            <summary>Request parameters descriptor for MsearchGet
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-multi-search.html
            </pre>
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.MultiSearchRequestParameters.SearchType(Elasticsearch.Net.SearchType)">
            <summary>Search operation type</summary>
        </member>
        <member name="T:Elasticsearch.Net.MultiTermVectorsRequestParameters">
            <summary>Request parameters descriptor for MtermvectorsGet
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-termvectors.html
            </pre>
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.MultiTermVectorsRequestParameters.TermStatistics(System.Boolean)">
            <summary>Specifies if total term frequency and document frequency should be returned. Applies to all returned documents unless otherwise specified in body &quot;params&quot; or &quot;docs&quot;.</summary>
        </member>
        <member name="M:Elasticsearch.Net.MultiTermVectorsRequestParameters.FieldStatistics(System.Boolean)">
            <summary>Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned. Applies to all returned documents unless otherwise specified in body &quot;params&quot; or &quot;docs&quot;.</summary>
        </member>
        <member name="M:Elasticsearch.Net.MultiTermVectorsRequestParameters.Fields(System.String[])">
            <summary>A comma-separated list of fields to return. Applies to all returned documents unless otherwise specified in body &quot;params&quot; or &quot;docs&quot;.</summary>
        </member>
        <member name="M:Elasticsearch.Net.MultiTermVectorsRequestParameters.Offsets(System.Boolean)">
            <summary>Specifies if term offsets should be returned. Applies to all returned documents unless otherwise specified in body &quot;params&quot; or &quot;docs&quot;.</summary>
        </member>
        <member name="M:Elasticsearch.Net.MultiTermVectorsRequestParameters.Positions(System.Boolean)">
            <summary>Specifies if term positions should be returned. Applies to all returned documents unless otherwise specified in body &quot;params&quot; or &quot;docs&quot;.</summary>
        </member>
        <member name="M:Elasticsearch.Net.MultiTermVectorsRequestParameters.Payloads(System.Boolean)">
            <summary>Specifies if term payloads should be returned. Applies to all returned documents unless otherwise specified in body &quot;params&quot; or &quot;docs&quot;.</summary>
        </member>
        <member name="M:Elasticsearch.Net.MultiTermVectorsRequestParameters.Preference(System.String)">
            <summary>Specify the node or shard the operation should be performed on (default: random) .Applies to all returned documents unless otherwise specified in body &quot;params&quot; or &quot;docs&quot;.</summary>
        </member>
        <member name="M:Elasticsearch.Net.MultiTermVectorsRequestParameters.Routing(System.String)">
            <summary>Specific routing value. Applies to all returned documents unless otherwise specified in body &quot;params&quot; or &quot;docs&quot;.</summary>
        </member>
        <member name="M:Elasticsearch.Net.MultiTermVectorsRequestParameters.Parent(System.String)">
            <summary>Parent id of documents. Applies to all returned documents unless otherwise specified in body &quot;params&quot; or &quot;docs&quot;.</summary>
        </member>
        <member name="T:Elasticsearch.Net.NodesHotThreadsRequestParameters">
            <summary>Request parameters descriptor for NodesHotThreadsForAll
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-hot-threads.html
            </pre>
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.NodesHotThreadsRequestParameters.Interval(System.String)">
            <summary>The interval for the second sampling of threads</summary>
        </member>
        <member name="M:Elasticsearch.Net.NodesHotThreadsRequestParameters.Snapshots(System.Int64)">
            <summary>Number of samples of thread stacktrace (default: 10)</summary>
        </member>
        <member name="M:Elasticsearch.Net.NodesHotThreadsRequestParameters.Threads(System.Int64)">
            <summary>Specify the number of threads to provide information for (default: 3)</summary>
        </member>
        <member name="M:Elasticsearch.Net.NodesHotThreadsRequestParameters.ThreadType(Elasticsearch.Net.ThreadType)">
            <summary>The type to sample (default: cpu)</summary>
        </member>
        <member name="T:Elasticsearch.Net.NodesInfoRequestParameters">
            <summary>Request parameters descriptor for NodesInfoForAll
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-info.html
            </pre>
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.NodesInfoRequestParameters.FlatSettings(System.Boolean)">
            <summary>Return settings in flat format (default: false)</summary>
        </member>
        <member name="M:Elasticsearch.Net.NodesInfoRequestParameters.Human(System.Boolean)">
            <summary>Whether to return time and byte values in human-readable format.</summary>
        </member>
        <member name="T:Elasticsearch.Net.NodesShutdownRequestParameters">
            <summary>Request parameters descriptor for NodesShutdownForAll
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-shutdown.html
            </pre>
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.NodesShutdownRequestParameters.Delay(System.String)">
            <summary>Set the delay for the operation (default: 1s)</summary>
        </member>
        <member name="M:Elasticsearch.Net.NodesShutdownRequestParameters.Exit(System.Boolean)">
            <summary>Exit the JVM as well (default: true)</summary>
        </member>
        <member name="T:Elasticsearch.Net.NodesStatsRequestParameters">
            <summary>Request parameters descriptor for NodesStatsForAll
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-stats.html
            </pre>
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.NodesStatsRequestParameters.CompletionFields(System.String[])">
            <summary>A comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards)</summary>
        </member>
        <member name="M:Elasticsearch.Net.NodesStatsRequestParameters.FielddataFields(System.String[])">
            <summary>A comma-separated list of fields for `fielddata` index metric (supports wildcards)</summary>
        </member>
        <member name="M:Elasticsearch.Net.NodesStatsRequestParameters.Fields(System.String[])">
            <summary>A comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards)</summary>
        </member>
        <member name="M:Elasticsearch.Net.NodesStatsRequestParameters.Groups(System.Boolean)">
            <summary>A comma-separated list of search groups for `search` index metric</summary>
        </member>
        <member name="M:Elasticsearch.Net.NodesStatsRequestParameters.Human(System.Boolean)">
            <summary>Whether to return time and byte values in human-readable format.</summary>
        </member>
        <member name="M:Elasticsearch.Net.NodesStatsRequestParameters.Level(Elasticsearch.Net.Level)">
            <summary>Return indices stats aggregated at node, index or shard level</summary>
        </member>
        <member name="M:Elasticsearch.Net.NodesStatsRequestParameters.Types(System.String[])">
            <summary>A comma-separated list of document types for the `indexing` index metric</summary>
        </member>
        <member name="T:Elasticsearch.Net.PercolateRequestParameters">
            <summary>Request parameters descriptor for PercolateGet
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html
            </pre>
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.PercolateRequestParameters.Routing(System.String[])">
            <summary>A comma-separated list of specific routing values</summary>
        </member>
        <member name="M:Elasticsearch.Net.PercolateRequestParameters.Preference(System.String)">
            <summary>Specify the node or shard the operation should be performed on (default: random)</summary>
        </member>
        <member name="M:Elasticsearch.Net.PercolateRequestParameters.IgnoreUnavailable(System.Boolean)">
            <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
        </member>
        <member name="M:Elasticsearch.Net.PercolateRequestParameters.AllowNoIndices(System.Boolean)">
            <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
        </member>
        <member name="M:Elasticsearch.Net.PercolateRequestParameters.ExpandWildcards(Elasticsearch.Net.ExpandWildcards)">
            <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        </member>
        <member name="M:Elasticsearch.Net.PercolateRequestParameters.PercolateIndex(System.String)">
            <summary>The index to percolate the document into. Defaults to index.</summary>
        </member>
        <member name="M:Elasticsearch.Net.PercolateRequestParameters.PercolateType(System.String)">
            <summary>The type to percolate document into. Defaults to type.</summary>
        </member>
        <member name="M:Elasticsearch.Net.PercolateRequestParameters.Version(System.Int64)">
            <summary>Explicit version number for concurrency control</summary>
        </member>
        <member name="M:Elasticsearch.Net.PercolateRequestParameters.VersionType(Elasticsearch.Net.VersionType)">
            <summary>Specific version type</summary>
        </member>
        <member name="T:Elasticsearch.Net.PingRequestParameters">
            <summary>Request parameters descriptor for Ping
            <pre>
            http://www.elasticsearch.org/guide/
            </pre>
            </summary>
        </member>
        <member name="T:Elasticsearch.Net.ScrollRequestParameters">
            <summary>Request parameters descriptor for ScrollGet
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-request-scroll.html
            </pre>
            </summary>
        </member>
        <member name="T:Elasticsearch.Net.SearchRequestParameters">
            <summary>Request parameters descriptor for SearchGet
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-search.html
            </pre>
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.SearchRequestParameters.Analyzer(System.String)">
            <summary>The analyzer to use for the query string</summary>
        </member>
        <member name="M:Elasticsearch.Net.SearchRequestParameters.AnalyzeWildcard(System.Boolean)">
            <summary>Specify whether wildcard and prefix queries should be analyzed (default: false)</summary>
        </member>
        <member name="M:Elasticsearch.Net.SearchRequestParameters.DefaultOperator(Elasticsearch.Net.DefaultOperator)">
            <summary>The default operator for query string query (AND or OR)</summary>
        </member>
        <member name="M:Elasticsearch.Net.SearchRequestParameters.Df(System.String)">
            <summary>The field to use as default where no field prefix is given in the query string</summary>
        </member>
        <member name="M:Elasticsearch.Net.SearchRequestParameters.IgnoreUnavailable(System.Boolean)">
            <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
        </member>
        <member name="M:Elasticsearch.Net.SearchRequestParameters.AllowNoIndices(System.Boolean)">
            <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
        </member>
        <member name="M:Elasticsearch.Net.SearchRequestParameters.ExpandWildcards(Elasticsearch.Net.ExpandWildcards)">
            <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        </member>
        <member name="M:Elasticsearch.Net.SearchRequestParameters.Lenient(System.Boolean)">
            <summary>Specify whether format-based query failures (such as providing text to a numeric field) should be ignored</summary>
        </member>
        <member name="M:Elasticsearch.Net.SearchRequestParameters.LowercaseExpandedTerms(System.Boolean)">
            <summary>Specify whether query terms should be lowercased</summary>
        </member>
        <member name="M:Elasticsearch.Net.SearchRequestParameters.Preference(System.String)">
            <summary>Specify the node or shard the operation should be performed on (default: random)</summary>
        </member>
        <member name="M:Elasticsearch.Net.SearchRequestParameters.Routing(System.String[])">
            <summary>A comma-separated list of specific routing values</summary>
        </member>
        <member name="M:Elasticsearch.Net.SearchRequestParameters.Scroll(System.String)">
            <summary>Specify how long a consistent view of the index should be maintained for scrolled search</summary>
        </member>
        <member name="M:Elasticsearch.Net.SearchRequestParameters.SearchType(Elasticsearch.Net.SearchType)">
            <summary>Search operation type</summary>
        </member>
        <member name="M:Elasticsearch.Net.SearchRequestParameters.Stats(System.String[])">
            <summary>Specific &#39;tag&#39; of the request for logging and statistical purposes</summary>
        </member>
        <member name="M:Elasticsearch.Net.SearchRequestParameters.SuggestField(System.String)">
            <summary>Specify which field to use for suggestions</summary>
        </member>
        <member name="M:Elasticsearch.Net.SearchRequestParameters.SuggestMode(Elasticsearch.Net.SuggestMode)">
            <summary>Specify suggest mode</summary>
        </member>
        <member name="M:Elasticsearch.Net.SearchRequestParameters.SuggestSize(System.Int64)">
            <summary>How many suggestions to return in response</summary>
        </member>
        <member name="M:Elasticsearch.Net.SearchRequestParameters.SuggestText(System.String)">
            <summary>The source text for which the suggestions should be returned</summary>
        </member>
        <member name="T:Elasticsearch.Net.SearchShardsRequestParameters">
            <summary>Request parameters descriptor for SearchShardsGet
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-shards.html
            </pre>
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.SearchShardsRequestParameters.Preference(System.String)">
            <summary>Specify the node or shard the operation should be performed on (default: random)</summary>
        </member>
        <member name="M:Elasticsearch.Net.SearchShardsRequestParameters.Routing(System.String)">
            <summary>Specific routing value</summary>
        </member>
        <member name="M:Elasticsearch.Net.SearchShardsRequestParameters.Local(System.Boolean)">
            <summary>Return local information, do not retrieve the state from master node (default: false)</summary>
        </member>
        <member name="M:Elasticsearch.Net.SearchShardsRequestParameters.IgnoreUnavailable(System.Boolean)">
            <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
        </member>
        <member name="M:Elasticsearch.Net.SearchShardsRequestParameters.AllowNoIndices(System.Boolean)">
            <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
        </member>
        <member name="M:Elasticsearch.Net.SearchShardsRequestParameters.ExpandWildcards(Elasticsearch.Net.ExpandWildcards)">
            <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        </member>
        <member name="T:Elasticsearch.Net.SearchTemplateRequestParameters">
            <summary>Request parameters descriptor for SearchTemplateGet
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-template.html
            </pre>
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.SearchTemplateRequestParameters.IgnoreUnavailable(System.Boolean)">
            <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
        </member>
        <member name="M:Elasticsearch.Net.SearchTemplateRequestParameters.AllowNoIndices(System.Boolean)">
            <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
        </member>
        <member name="M:Elasticsearch.Net.SearchTemplateRequestParameters.ExpandWildcards(Elasticsearch.Net.ExpandWildcards)">
            <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        </member>
        <member name="M:Elasticsearch.Net.SearchTemplateRequestParameters.Preference(System.String)">
            <summary>Specify the node or shard the operation should be performed on (default: random)</summary>
        </member>
        <member name="M:Elasticsearch.Net.SearchTemplateRequestParameters.Routing(System.String[])">
            <summary>A comma-separated list of specific routing values</summary>
        </member>
        <member name="M:Elasticsearch.Net.SearchTemplateRequestParameters.Scroll(System.String)">
            <summary>Specify how long a consistent view of the index should be maintained for scrolled search</summary>
        </member>
        <member name="M:Elasticsearch.Net.SearchTemplateRequestParameters.SearchType(Elasticsearch.Net.SearchType)">
            <summary>Search operation type</summary>
        </member>
        <member name="T:Elasticsearch.Net.SnapshotRequestParameters">
            <summary>Request parameters descriptor for SnapshotCreate
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html
            </pre>
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.SnapshotRequestParameters.MasterTimeout(System.String)">
            <summary>Explicit operation timeout for connection to master node</summary>
        </member>
        <member name="M:Elasticsearch.Net.SnapshotRequestParameters.WaitForCompletion(System.Boolean)">
            <summary>Should this request wait until the operation has completed before returning</summary>
        </member>
        <member name="T:Elasticsearch.Net.CreateRepositoryRequestParameters">
            <summary>Request parameters descriptor for SnapshotCreateRepository
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html
            </pre>
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.CreateRepositoryRequestParameters.MasterTimeout(System.String)">
            <summary>Explicit operation timeout for connection to master node</summary>
        </member>
        <member name="M:Elasticsearch.Net.CreateRepositoryRequestParameters.Timeout(System.String)">
            <summary>Explicit operation timeout</summary>
        </member>
        <member name="T:Elasticsearch.Net.DeleteSnapshotRequestParameters">
            <summary>Request parameters descriptor for SnapshotDelete
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html
            </pre>
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.DeleteSnapshotRequestParameters.MasterTimeout(System.String)">
            <summary>Explicit operation timeout for connection to master node</summary>
        </member>
        <member name="T:Elasticsearch.Net.DeleteRepositoryRequestParameters">
            <summary>Request parameters descriptor for SnapshotDeleteRepository
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html
            </pre>
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.DeleteRepositoryRequestParameters.MasterTimeout(System.String)">
            <summary>Explicit operation timeout for connection to master node</summary>
        </member>
        <member name="M:Elasticsearch.Net.DeleteRepositoryRequestParameters.Timeout(System.String)">
            <summary>Explicit operation timeout</summary>
        </member>
        <member name="T:Elasticsearch.Net.GetSnapshotRequestParameters">
            <summary>Request parameters descriptor for SnapshotGet
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html
            </pre>
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.GetSnapshotRequestParameters.MasterTimeout(System.String)">
            <summary>Explicit operation timeout for connection to master node</summary>
        </member>
        <member name="T:Elasticsearch.Net.SnapshotGetRepositoryRequestParameters">
            <summary>Request parameters descriptor for SnapshotGetRepository
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html
            </pre>
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.SnapshotGetRepositoryRequestParameters.MasterTimeout(System.String)">
            <summary>Explicit operation timeout for connection to master node</summary>
        </member>
        <member name="M:Elasticsearch.Net.SnapshotGetRepositoryRequestParameters.Local(System.Boolean)">
            <summary>Return local information, do not retrieve the state from master node (default: false)</summary>
        </member>
        <member name="T:Elasticsearch.Net.RestoreRequestParameters">
            <summary>Request parameters descriptor for SnapshotRestore
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html
            </pre>
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.RestoreRequestParameters.MasterTimeout(System.String)">
            <summary>Explicit operation timeout for connection to master node</summary>
        </member>
        <member name="M:Elasticsearch.Net.RestoreRequestParameters.WaitForCompletion(System.Boolean)">
            <summary>Should this request wait until the operation has completed before returning</summary>
        </member>
        <member name="T:Elasticsearch.Net.SnapshotStatusRequestParameters">
            <summary>Request parameters descriptor for SnapshotStatus
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/modules-snapshots.html
            </pre>
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.SnapshotStatusRequestParameters.MasterTimeout(System.String)">
            <summary>Explicit operation timeout for connection to master node</summary>
        </member>
        <member name="T:Elasticsearch.Net.SuggestRequestParameters">
            <summary>Request parameters descriptor for Suggest
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-search.html
            </pre>
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.SuggestRequestParameters.IgnoreUnavailable(System.Boolean)">
            <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
        </member>
        <member name="M:Elasticsearch.Net.SuggestRequestParameters.AllowNoIndices(System.Boolean)">
            <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
        </member>
        <member name="M:Elasticsearch.Net.SuggestRequestParameters.ExpandWildcards(Elasticsearch.Net.ExpandWildcards)">
            <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        </member>
        <member name="M:Elasticsearch.Net.SuggestRequestParameters.Preference(System.String)">
            <summary>Specify the node or shard the operation should be performed on (default: random)</summary>
        </member>
        <member name="M:Elasticsearch.Net.SuggestRequestParameters.Routing(System.String)">
            <summary>Specific routing value</summary>
        </member>
        <member name="M:Elasticsearch.Net.SuggestRequestParameters.Source(System.String)">
            <summary>The URL-encoded request definition (instead of using request body)</summary>
        </member>
        <member name="T:Elasticsearch.Net.TermvectorRequestParameters">
            <summary>Request parameters descriptor for TermvectorGet
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-termvectors.html
            </pre>
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.TermvectorRequestParameters.TermStatistics(System.Boolean)">
            <summary>Specifies if total term frequency and document frequency should be returned.</summary>
        </member>
        <member name="M:Elasticsearch.Net.TermvectorRequestParameters.FieldStatistics(System.Boolean)">
            <summary>Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned.</summary>
        </member>
        <member name="M:Elasticsearch.Net.TermvectorRequestParameters.Fields(System.String[])">
            <summary>A comma-separated list of fields to return.</summary>
        </member>
        <member name="M:Elasticsearch.Net.TermvectorRequestParameters.Offsets(System.Boolean)">
            <summary>Specifies if term offsets should be returned.</summary>
        </member>
        <member name="M:Elasticsearch.Net.TermvectorRequestParameters.Positions(System.Boolean)">
            <summary>Specifies if term positions should be returned.</summary>
        </member>
        <member name="M:Elasticsearch.Net.TermvectorRequestParameters.Payloads(System.Boolean)">
            <summary>Specifies if term payloads should be returned.</summary>
        </member>
        <member name="M:Elasticsearch.Net.TermvectorRequestParameters.Preference(System.String)">
            <summary>Specify the node or shard the operation should be performed on (default: random).</summary>
        </member>
        <member name="M:Elasticsearch.Net.TermvectorRequestParameters.Routing(System.String)">
            <summary>Specific routing value.</summary>
        </member>
        <member name="M:Elasticsearch.Net.TermvectorRequestParameters.Parent(System.String)">
            <summary>Parent id of documents.</summary>
        </member>
        <member name="T:Elasticsearch.Net.UpdateRequestParameters">
            <summary>Request parameters descriptor for Update
            <pre>
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-update.html
            </pre>
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.UpdateRequestParameters.Consistency(Elasticsearch.Net.Consistency)">
            <summary>Explicit write consistency setting for the operation</summary>
        </member>
        <member name="M:Elasticsearch.Net.UpdateRequestParameters.Lang(System.String)">
            <summary>The script language (default: mvel)</summary>
        </member>
        <member name="M:Elasticsearch.Net.UpdateRequestParameters.Parent(System.String)">
            <summary>ID of the parent document</summary>
        </member>
        <member name="M:Elasticsearch.Net.UpdateRequestParameters.Refresh(System.Boolean)">
            <summary>Refresh the index after performing the operation</summary>
        </member>
        <member name="M:Elasticsearch.Net.UpdateRequestParameters.Replication(Elasticsearch.Net.Replication)">
            <summary>Specific replication type</summary>
        </member>
        <member name="M:Elasticsearch.Net.UpdateRequestParameters.RetryOnConflict(System.Int64)">
            <summary>Specify how many times should the operation be retried when a conflict occurs (default: 0)</summary>
        </member>
        <member name="M:Elasticsearch.Net.UpdateRequestParameters.Routing(System.String)">
            <summary>Specific routing value</summary>
        </member>
        <member name="M:Elasticsearch.Net.UpdateRequestParameters.Script(System.String)">
            <summary>The URL-encoded script definition (instead of using request body)</summary>
        </member>
        <member name="M:Elasticsearch.Net.UpdateRequestParameters.Timeout(System.String)">
            <summary>Explicit operation timeout</summary>
        </member>
        <member name="M:Elasticsearch.Net.UpdateRequestParameters.Timestamp(System.String)">
            <summary>Explicit timestamp for the document</summary>
        </member>
        <member name="M:Elasticsearch.Net.UpdateRequestParameters.Ttl(System.String)">
            <summary>Expiration time for the document</summary>
        </member>
        <member name="M:Elasticsearch.Net.UpdateRequestParameters.Version(System.Int64)">
            <summary>Explicit version number for concurrency control</summary>
        </member>
        <member name="M:Elasticsearch.Net.UpdateRequestParameters.VersionType(Elasticsearch.Net.VersionType)">
            <summary>Specific version type</summary>
        </member>
        <member name="M:Elasticsearch.Net.Serialization.IElasticsearchSerializer.Stringify(System.Object)">
            <summary>
            Used to stringify valuetypes to string (i.e querystring parameters and route parameters).
            </summary>
        </member>
        <member name="T:Elasticsearch.Net.Serialization.JsonArray">
            <summary>
            Represents the json array.
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.Serialization.JsonArray.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Elasticsearch.Net.Serialization.JsonArray"/> class. 
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.Serialization.JsonArray.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Elasticsearch.Net.Serialization.JsonArray"/> class. 
            </summary>
            <param name="capacity">The capacity of the json array.</param>
        </member>
        <member name="M:Elasticsearch.Net.Serialization.JsonArray.ToString">
            <summary>
            The json representation of the array.
            </summary>
            <returns>The json representation of the array.</returns>
        </member>
        <member name="T:Elasticsearch.Net.Serialization.JsonObject">
            <summary>
            Represents the json object.
            </summary>
        </member>
        <member name="F:Elasticsearch.Net.Serialization.JsonObject._members">
            <summary>
            The internal member dictionary.
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.Serialization.JsonObject.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Elasticsearch.Net.Serialization.JsonObject"/>.
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.Serialization.JsonObject.#ctor(System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
            Initializes a new instance of <see cref="T:Elasticsearch.Net.Serialization.JsonObject"/>.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing keys, or null to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/> for the type of the key.</param>
        </member>
        <member name="M:Elasticsearch.Net.Serialization.JsonObject.Add(System.String,System.Object)">
            <summary>
            Adds the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Elasticsearch.Net.Serialization.JsonObject.ContainsKey(System.String)">
            <summary>
            Determines whether the specified key contains key.
            </summary>
            <param name="key">The key.</param>
            <returns>
                <c>true</c> if the specified key contains key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.Serialization.JsonObject.Remove(System.String)">
            <summary>
            Removes the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Elasticsearch.Net.Serialization.JsonObject.TryGetValue(System.String,System.Object@)">
            <summary>
            Tries the get value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Elasticsearch.Net.Serialization.JsonObject.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Elasticsearch.Net.Serialization.JsonObject.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.Serialization.JsonObject.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Determines whether [contains] [the specified item].
            </summary>
            <param name="item">The item.</param>
            <returns>
            	<c>true</c> if [contains] [the specified item]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.Serialization.JsonObject.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="M:Elasticsearch.Net.Serialization.JsonObject.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Removes the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:Elasticsearch.Net.Serialization.JsonObject.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Elasticsearch.Net.Serialization.JsonObject.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.Serialization.JsonObject.ToString">
            <summary>
            Returns a json <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A json <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.Serialization.JsonObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
            <summary>
            Provides implementation for type conversion operations. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can override this method to specify dynamic behavior for operations that convert an object from one type to another.
            </summary>
            <param name="binder">Provides information about the conversion operation. The binder.Type property provides the type to which the object must be converted. For example, for the statement (String)sampleObject in C# (CType(sampleObject, Type) in Visual Basic), where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, binder.Type returns the <see cref="T:System.String"/> type. The binder.Explicit property provides information about the kind of conversion that occurs. It returns true for explicit conversion and false for implicit conversion.</param>
            <param name="result">The result of the type conversion operation.</param>
            <returns>
            Alwasy returns true.
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.Serialization.JsonObject.TryDeleteMember(System.Dynamic.DeleteMemberBinder)">
            <summary>
            Provides the implementation for operations that delete an object member. This method is not intended for use in C# or Visual Basic.
            </summary>
            <param name="binder">Provides information about the deletion.</param>
            <returns>
            Alwasy returns true.
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.Serialization.JsonObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
            <summary>
            Provides the implementation for operations that get a value by index. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can override this method to specify dynamic behavior for indexing operations.
            </summary>
            <param name="binder">Provides information about the operation.</param>
            <param name="indexes">The indexes that are used in the operation. For example, for the sampleObject[3] operation in C# (sampleObject(3) in Visual Basic), where sampleObject is derived from the DynamicObject class, <paramref name="indexes"/> is equal to 3.</param>
            <param name="result">The result of the index operation.</param>
            <returns>
            Alwasy returns true.
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.Serialization.JsonObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            Provides the implementation for operations that get member values. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can override this method to specify dynamic behavior for operations such as getting a value for a property.
            </summary>
            <param name="binder">Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member on which the dynamic operation is performed. For example, for the Console.WriteLine(sampleObject.SampleProperty) statement, where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
            <param name="result">The result of the get operation. For example, if the method is called for a property, you can assign the property value to <paramref name="result"/>.</param>
            <returns>
            Alwasy returns true.
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.Serialization.JsonObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
            <summary>
            Provides the implementation for operations that set a value by index. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can override this method to specify dynamic behavior for operations that access objects by a specified index.
            </summary>
            <param name="binder">Provides information about the operation.</param>
            <param name="indexes">The indexes that are used in the operation. For example, for the sampleObject[3] = 10 operation in C# (sampleObject(3) = 10 in Visual Basic), where sampleObject is derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, <paramref name="indexes"/> is equal to 3.</param>
            <param name="value">The value to set to the object that has the specified index. For example, for the sampleObject[3] = 10 operation in C# (sampleObject(3) = 10 in Visual Basic), where sampleObject is derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, <paramref name="value"/> is equal to 10.</param>
            <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.Serialization.JsonObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <summary>
            Provides the implementation for operations that set member values. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can override this method to specify dynamic behavior for operations such as setting a value for a property.
            </summary>
            <param name="binder">Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member to which the value is being assigned. For example, for the statement sampleObject.SampleProperty = "Test", where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
            <param name="value">The value to set to the member. For example, for sampleObject.SampleProperty = "Test", where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, the <paramref name="value"/> is "Test".</param>
            <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.Serialization.JsonObject.GetDynamicMemberNames">
            <summary>
            Returns the enumeration of all dynamic member names.
            </summary>
            <returns>
            A sequence that contains dynamic member names.
            </returns>
        </member>
        <member name="P:Elasticsearch.Net.Serialization.JsonObject.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:System.Object"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="P:Elasticsearch.Net.Serialization.JsonObject.Keys">
            <summary>
            Gets the keys.
            </summary>
            <value>The keys.</value>
        </member>
        <member name="P:Elasticsearch.Net.Serialization.JsonObject.Values">
            <summary>
            Gets the values.
            </summary>
            <value>The values.</value>
        </member>
        <member name="P:Elasticsearch.Net.Serialization.JsonObject.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:System.Object"/> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="P:Elasticsearch.Net.Serialization.JsonObject.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:Elasticsearch.Net.Serialization.JsonObject.IsReadOnly">
            <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
            <value>
            	<c>true</c> if this instance is read only; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Elasticsearch.Net.Serialization.SimpleJson">
            <summary>
            This class encodes and decodes JSON strings.
            Spec. details, see http://www.json.org/
            
            JSON uses Arrays and Objects. These correspond here to the datatypes JsonArray(IList&lt;object>) and JsonObject(IDictionary&lt;string,object>).
            All numbers are parsed to doubles.
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.Serialization.SimpleJson.DeserializeObject(System.String)">
            <summary>
            Parses the string json into a value
            </summary>
            <param name="json">A JSON string.</param>
            <returns>An IList&lt;object>, a IDictionary&lt;string,object>, a double, a string, null, true, or false</returns>
        </member>
        <member name="M:Elasticsearch.Net.Serialization.SimpleJson.TryDeserializeObject(System.String,System.Object@)">
            <summary>
            Try parsing the json string into a value.
            </summary>
            <param name="json">
            A JSON string.
            </param>
            <param name="obj">
            The object.
            </param>
            <returns>
            Returns true if successfull otherwise false.
            </returns>
        </member>
        <member name="M:Elasticsearch.Net.Serialization.SimpleJson.SerializeObject(System.Object,Elasticsearch.Net.Serialization.IJsonSerializerStrategy)">
            <summary>
            Converts a IDictionary&lt;string,object> / IList&lt;object> object into a JSON string
            </summary>
            <param name="json">A IDictionary&lt;string,object> / IList&lt;object></param>
            <param name="jsonSerializerStrategy">Serializer strategy to use</param>
            <returns>A JSON encoded string, or null if object 'json' is not serializable</returns>
        </member>
        <member name="M:Elasticsearch.Net.Serialization.SimpleJson.IsNumeric(System.Object)">
            <summary>
            Determines if a given object is numeric in any way
            (can be integer, double, null, etc).
            </summary>
        </member>
    </members>
</doc>
